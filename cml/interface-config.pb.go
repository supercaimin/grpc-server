// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interface-config.proto

package cml

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//以太接口up/down震荡抑制配置;只有l3接口适用
//suppress取值范围是1～20000，缺省值是2000，该值必须大于reuse值且小于ceiling的值
//reuse取值范围是1～20000，缺省值是750，该值必须小于suppress的值
//ceiling取值范围是1001～20000，缺省值是6000，该值必须大于suppress的值
//decay-ok取值范围是1～900秒，缺省值是54秒
//decay-ng取值范围是1～900秒，缺省值是54秒
type Ifcontrolflap struct {
	Suppress             int32    `protobuf:"varint,1,opt,name=suppress,proto3" json:"suppress,omitempty"`
	Reuse                int32    `protobuf:"varint,2,opt,name=reuse,proto3" json:"reuse,omitempty"`
	Ceiling              int32    `protobuf:"varint,3,opt,name=ceiling,proto3" json:"ceiling,omitempty"`
	Decayok              int32    `protobuf:"varint,4,opt,name=decayok,proto3" json:"decayok,omitempty"`
	Decayng              int32    `protobuf:"varint,5,opt,name=decayng,proto3" json:"decayng,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ifcontrolflap) Reset()         { *m = Ifcontrolflap{} }
func (m *Ifcontrolflap) String() string { return proto.CompactTextString(m) }
func (*Ifcontrolflap) ProtoMessage()    {}
func (*Ifcontrolflap) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bdf2cc498384b80, []int{0}
}

func (m *Ifcontrolflap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ifcontrolflap.Unmarshal(m, b)
}
func (m *Ifcontrolflap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ifcontrolflap.Marshal(b, m, deterministic)
}
func (m *Ifcontrolflap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ifcontrolflap.Merge(m, src)
}
func (m *Ifcontrolflap) XXX_Size() int {
	return xxx_messageInfo_Ifcontrolflap.Size(m)
}
func (m *Ifcontrolflap) XXX_DiscardUnknown() {
	xxx_messageInfo_Ifcontrolflap.DiscardUnknown(m)
}

var xxx_messageInfo_Ifcontrolflap proto.InternalMessageInfo

func (m *Ifcontrolflap) GetSuppress() int32 {
	if m != nil {
		return m.Suppress
	}
	return 0
}

func (m *Ifcontrolflap) GetReuse() int32 {
	if m != nil {
		return m.Reuse
	}
	return 0
}

func (m *Ifcontrolflap) GetCeiling() int32 {
	if m != nil {
		return m.Ceiling
	}
	return 0
}

func (m *Ifcontrolflap) GetDecayok() int32 {
	if m != nil {
		return m.Decayok
	}
	return 0
}

func (m *Ifcontrolflap) GetDecayng() int32 {
	if m != nil {
		return m.Decayng
	}
	return 0
}

//接口jumber相关信息
type Jumboinfocfg struct {
	Jumbersize           int32    `protobuf:"varint,1,opt,name=jumbersize,proto3" json:"jumbersize,omitempty"`
	Jumberstatsize       int32    `protobuf:"varint,2,opt,name=jumberstatsize,proto3" json:"jumberstatsize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Jumboinfocfg) Reset()         { *m = Jumboinfocfg{} }
func (m *Jumboinfocfg) String() string { return proto.CompactTextString(m) }
func (*Jumboinfocfg) ProtoMessage()    {}
func (*Jumboinfocfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bdf2cc498384b80, []int{1}
}

func (m *Jumboinfocfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Jumboinfocfg.Unmarshal(m, b)
}
func (m *Jumboinfocfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Jumboinfocfg.Marshal(b, m, deterministic)
}
func (m *Jumboinfocfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Jumboinfocfg.Merge(m, src)
}
func (m *Jumboinfocfg) XXX_Size() int {
	return xxx_messageInfo_Jumboinfocfg.Size(m)
}
func (m *Jumboinfocfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Jumboinfocfg.DiscardUnknown(m)
}

var xxx_messageInfo_Jumboinfocfg proto.InternalMessageInfo

func (m *Jumboinfocfg) GetJumbersize() int32 {
	if m != nil {
		return m.Jumbersize
	}
	return 0
}

func (m *Jumboinfocfg) GetJumberstatsize() int32 {
	if m != nil {
		return m.Jumberstatsize
	}
	return 0
}

//接口速率相关配置
type Speedinfocfg struct {
	Speedmode            int32    `protobuf:"varint,1,opt,name=speedmode,proto3" json:"speedmode,omitempty"`
	Speedvalue           int32    `protobuf:"varint,2,opt,name=speedvalue,proto3" json:"speedvalue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Speedinfocfg) Reset()         { *m = Speedinfocfg{} }
func (m *Speedinfocfg) String() string { return proto.CompactTextString(m) }
func (*Speedinfocfg) ProtoMessage()    {}
func (*Speedinfocfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bdf2cc498384b80, []int{2}
}

func (m *Speedinfocfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Speedinfocfg.Unmarshal(m, b)
}
func (m *Speedinfocfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Speedinfocfg.Marshal(b, m, deterministic)
}
func (m *Speedinfocfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Speedinfocfg.Merge(m, src)
}
func (m *Speedinfocfg) XXX_Size() int {
	return xxx_messageInfo_Speedinfocfg.Size(m)
}
func (m *Speedinfocfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Speedinfocfg.DiscardUnknown(m)
}

var xxx_messageInfo_Speedinfocfg proto.InternalMessageInfo

func (m *Speedinfocfg) GetSpeedmode() int32 {
	if m != nil {
		return m.Speedmode
	}
	return 0
}

func (m *Speedinfocfg) GetSpeedvalue() int32 {
	if m != nil {
		return m.Speedvalue
	}
	return 0
}

type Ifnumber struct {
	Type1                string   `protobuf:"bytes,1,opt,name=type1,proto3" json:"type1,omitempty"`
	Number1              string   `protobuf:"bytes,2,opt,name=number1,proto3" json:"number1,omitempty"`
	Subnumber1           string   `protobuf:"bytes,3,opt,name=subnumber1,proto3" json:"subnumber1,omitempty"`
	Type2                string   `protobuf:"bytes,4,opt,name=type2,proto3" json:"type2,omitempty"`
	Number2              string   `protobuf:"bytes,5,opt,name=number2,proto3" json:"number2,omitempty"`
	Subnumber2           string   `protobuf:"bytes,6,opt,name=subnumber2,proto3" json:"subnumber2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ifnumber) Reset()         { *m = Ifnumber{} }
func (m *Ifnumber) String() string { return proto.CompactTextString(m) }
func (*Ifnumber) ProtoMessage()    {}
func (*Ifnumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bdf2cc498384b80, []int{3}
}

func (m *Ifnumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ifnumber.Unmarshal(m, b)
}
func (m *Ifnumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ifnumber.Marshal(b, m, deterministic)
}
func (m *Ifnumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ifnumber.Merge(m, src)
}
func (m *Ifnumber) XXX_Size() int {
	return xxx_messageInfo_Ifnumber.Size(m)
}
func (m *Ifnumber) XXX_DiscardUnknown() {
	xxx_messageInfo_Ifnumber.DiscardUnknown(m)
}

var xxx_messageInfo_Ifnumber proto.InternalMessageInfo

func (m *Ifnumber) GetType1() string {
	if m != nil {
		return m.Type1
	}
	return ""
}

func (m *Ifnumber) GetNumber1() string {
	if m != nil {
		return m.Number1
	}
	return ""
}

func (m *Ifnumber) GetSubnumber1() string {
	if m != nil {
		return m.Subnumber1
	}
	return ""
}

func (m *Ifnumber) GetType2() string {
	if m != nil {
		return m.Type2
	}
	return ""
}

func (m *Ifnumber) GetNumber2() string {
	if m != nil {
		return m.Number2
	}
	return ""
}

func (m *Ifnumber) GetSubnumber2() string {
	if m != nil {
		return m.Subnumber2
	}
	return ""
}

//接口(物理接口,l3子接口,l3接口,vlanif等)相关配置
type Ifbaseinfocfg struct {
	Ifname               string         `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Ifalias              string         `protobuf:"bytes,2,opt,name=ifalias,proto3" json:"ifalias,omitempty"`
	Descrip              string         `protobuf:"bytes,3,opt,name=descrip,proto3" json:"descrip,omitempty"`
	AdminStatus          int32          `protobuf:"varint,4,opt,name=admin_status,json=adminStatus,proto3" json:"admin_status,omitempty"`
	Mtu                  int32          `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Jumboinfo            *Jumboinfocfg  `protobuf:"bytes,6,opt,name=jumboinfo,proto3" json:"jumboinfo,omitempty"`
	Speedinfo            *Speedinfocfg  `protobuf:"bytes,7,opt,name=speedinfo,proto3" json:"speedinfo,omitempty"`
	Ifg                  int32          `protobuf:"varint,8,opt,name=ifg,proto3" json:"ifg,omitempty"`
	Ifmode               int32          `protobuf:"varint,9,opt,name=ifmode,proto3" json:"ifmode,omitempty"`
	Switchmode           int32          `protobuf:"varint,10,opt,name=switchmode,proto3" json:"switchmode,omitempty"`
	Portmode             string         `protobuf:"bytes,11,opt,name=portmode,proto3" json:"portmode,omitempty"`
	Setupdelay           int32          `protobuf:"varint,12,opt,name=setupdelay,proto3" json:"setupdelay,omitempty"`
	Protoupdelay         int32          `protobuf:"varint,13,opt,name=protoupdelay,proto3" json:"protoupdelay,omitempty"`
	Statisticenable      int32          `protobuf:"varint,14,opt,name=statisticenable,proto3" json:"statisticenable,omitempty"`
	Controlflap          *Ifcontrolflap `protobuf:"bytes,15,opt,name=controlflap,proto3" json:"controlflap,omitempty"`
	Trapdowndisable      int32          `protobuf:"varint,16,opt,name=trapdowndisable,proto3" json:"trapdowndisable,omitempty"`
	Loopinternal         int32          `protobuf:"varint,17,opt,name=loopinternal,proto3" json:"loopinternal,omitempty"`
	Flowstatinterval     int32          `protobuf:"varint,18,opt,name=flowstatinterval,proto3" json:"flowstatinterval,omitempty"`
	Fecmode              string         `protobuf:"bytes,19,opt,name=fecmode,proto3" json:"fecmode,omitempty"`
	Etrunkid             int32          `protobuf:"varint,20,opt,name=etrunkid,proto3" json:"etrunkid,omitempty"`
	Vlanid               string         `protobuf:"bytes,21,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
	Pvid                 int32          `protobuf:"varint,22,opt,name=pvid,proto3" json:"pvid,omitempty"`
	Updatetime           int64          `protobuf:"varint,23,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	Cmdid                int32          `protobuf:"varint,24,opt,name=cmdid,proto3" json:"cmdid,omitempty"`
	Ifnum                *Ifnumber      `protobuf:"bytes,25,opt,name=ifnum,proto3" json:"ifnum,omitempty"`
	Clearconf            int32          `protobuf:"varint,26,opt,name=clearconf,proto3" json:"clearconf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Ifbaseinfocfg) Reset()         { *m = Ifbaseinfocfg{} }
func (m *Ifbaseinfocfg) String() string { return proto.CompactTextString(m) }
func (*Ifbaseinfocfg) ProtoMessage()    {}
func (*Ifbaseinfocfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3bdf2cc498384b80, []int{4}
}

func (m *Ifbaseinfocfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ifbaseinfocfg.Unmarshal(m, b)
}
func (m *Ifbaseinfocfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ifbaseinfocfg.Marshal(b, m, deterministic)
}
func (m *Ifbaseinfocfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ifbaseinfocfg.Merge(m, src)
}
func (m *Ifbaseinfocfg) XXX_Size() int {
	return xxx_messageInfo_Ifbaseinfocfg.Size(m)
}
func (m *Ifbaseinfocfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Ifbaseinfocfg.DiscardUnknown(m)
}

var xxx_messageInfo_Ifbaseinfocfg proto.InternalMessageInfo

func (m *Ifbaseinfocfg) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *Ifbaseinfocfg) GetIfalias() string {
	if m != nil {
		return m.Ifalias
	}
	return ""
}

func (m *Ifbaseinfocfg) GetDescrip() string {
	if m != nil {
		return m.Descrip
	}
	return ""
}

func (m *Ifbaseinfocfg) GetAdminStatus() int32 {
	if m != nil {
		return m.AdminStatus
	}
	return 0
}

func (m *Ifbaseinfocfg) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Ifbaseinfocfg) GetJumboinfo() *Jumboinfocfg {
	if m != nil {
		return m.Jumboinfo
	}
	return nil
}

func (m *Ifbaseinfocfg) GetSpeedinfo() *Speedinfocfg {
	if m != nil {
		return m.Speedinfo
	}
	return nil
}

func (m *Ifbaseinfocfg) GetIfg() int32 {
	if m != nil {
		return m.Ifg
	}
	return 0
}

func (m *Ifbaseinfocfg) GetIfmode() int32 {
	if m != nil {
		return m.Ifmode
	}
	return 0
}

func (m *Ifbaseinfocfg) GetSwitchmode() int32 {
	if m != nil {
		return m.Switchmode
	}
	return 0
}

func (m *Ifbaseinfocfg) GetPortmode() string {
	if m != nil {
		return m.Portmode
	}
	return ""
}

func (m *Ifbaseinfocfg) GetSetupdelay() int32 {
	if m != nil {
		return m.Setupdelay
	}
	return 0
}

func (m *Ifbaseinfocfg) GetProtoupdelay() int32 {
	if m != nil {
		return m.Protoupdelay
	}
	return 0
}

func (m *Ifbaseinfocfg) GetStatisticenable() int32 {
	if m != nil {
		return m.Statisticenable
	}
	return 0
}

func (m *Ifbaseinfocfg) GetControlflap() *Ifcontrolflap {
	if m != nil {
		return m.Controlflap
	}
	return nil
}

func (m *Ifbaseinfocfg) GetTrapdowndisable() int32 {
	if m != nil {
		return m.Trapdowndisable
	}
	return 0
}

func (m *Ifbaseinfocfg) GetLoopinternal() int32 {
	if m != nil {
		return m.Loopinternal
	}
	return 0
}

func (m *Ifbaseinfocfg) GetFlowstatinterval() int32 {
	if m != nil {
		return m.Flowstatinterval
	}
	return 0
}

func (m *Ifbaseinfocfg) GetFecmode() string {
	if m != nil {
		return m.Fecmode
	}
	return ""
}

func (m *Ifbaseinfocfg) GetEtrunkid() int32 {
	if m != nil {
		return m.Etrunkid
	}
	return 0
}

func (m *Ifbaseinfocfg) GetVlanid() string {
	if m != nil {
		return m.Vlanid
	}
	return ""
}

func (m *Ifbaseinfocfg) GetPvid() int32 {
	if m != nil {
		return m.Pvid
	}
	return 0
}

func (m *Ifbaseinfocfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

func (m *Ifbaseinfocfg) GetCmdid() int32 {
	if m != nil {
		return m.Cmdid
	}
	return 0
}

func (m *Ifbaseinfocfg) GetIfnum() *Ifnumber {
	if m != nil {
		return m.Ifnum
	}
	return nil
}

func (m *Ifbaseinfocfg) GetClearconf() int32 {
	if m != nil {
		return m.Clearconf
	}
	return 0
}

func init() {
	proto.RegisterType((*Ifcontrolflap)(nil), "cml.ifcontrolflap")
	proto.RegisterType((*Jumboinfocfg)(nil), "cml.jumboinfocfg")
	proto.RegisterType((*Speedinfocfg)(nil), "cml.speedinfocfg")
	proto.RegisterType((*Ifnumber)(nil), "cml.ifnumber")
	proto.RegisterType((*Ifbaseinfocfg)(nil), "cml.ifbaseinfocfg")
}

func init() {
	proto.RegisterFile("interface-config.proto", fileDescriptor_3bdf2cc498384b80)
}

var fileDescriptor_3bdf2cc498384b80 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0xfe, 0xfb, 0x77, 0xed, 0x56, 0xb7, 0x5b, 0x3b, 0x33, 0x86, 0xa9, 0x10, 0x1a, 0x41, 0x42,
	0x13, 0x12, 0x43, 0x0b, 0x5c, 0x70, 0x3f, 0x6e, 0x90, 0xb8, 0xca, 0x24, 0x6e, 0x91, 0xeb, 0xd8,
	0x99, 0x99, 0x63, 0x47, 0x89, 0xd3, 0x6a, 0xbc, 0x04, 0xef, 0xc1, 0x33, 0xf0, 0x12, 0xbc, 0x11,
	0xf2, 0xb1, 0x9d, 0xa6, 0xe5, 0x8e, 0xbb, 0x7c, 0xdf, 0x39, 0xe7, 0xf3, 0xc9, 0x77, 0x7c, 0x8c,
	0xce, 0xa5, 0xb6, 0xbc, 0x16, 0x94, 0xf1, 0x37, 0xcc, 0x68, 0x21, 0x8b, 0xab, 0xaa, 0x36, 0xd6,
	0xe0, 0x21, 0x2b, 0xd5, 0x72, 0xce, 0x44, 0xc1, 0x4c, 0x59, 0x1a, 0xed, 0xd9, 0xe4, 0xc7, 0x00,
	0x1d, 0x4b, 0xc1, 0x8c, 0xb6, 0xb5, 0x51, 0x42, 0xd1, 0x0a, 0x2f, 0xd1, 0x51, 0xd3, 0x56, 0x55,
	0xcd, 0x9b, 0x86, 0x0c, 0x2e, 0x06, 0x97, 0xa3, 0xac, 0xc3, 0xf8, 0x0c, 0x8d, 0x6a, 0xde, 0x36,
	0x9c, 0xfc, 0x0f, 0x01, 0x0f, 0x30, 0x41, 0x87, 0x8c, 0x4b, 0x25, 0x75, 0x41, 0x86, 0xc0, 0x47,
	0xe8, 0x22, 0x39, 0x67, 0xf4, 0xc1, 0xdc, 0x93, 0x03, 0x1f, 0x09, 0xb0, 0x8b, 0xe8, 0x82, 0x8c,
	0x7a, 0x11, 0x5d, 0x24, 0x5f, 0xd0, 0xec, 0x5b, 0x5b, 0xae, 0x8c, 0xd4, 0xc2, 0x30, 0x51, 0xe0,
	0xe7, 0x08, 0x39, 0xcc, 0xeb, 0x46, 0x7e, 0xe7, 0xa1, 0xa3, 0x1e, 0x83, 0x5f, 0xa1, 0x93, 0x80,
	0x2c, 0xb5, 0x90, 0xe3, 0x9b, 0xdb, 0x63, 0x93, 0xcf, 0x68, 0xd6, 0x54, 0x9c, 0xe7, 0x51, 0xf7,
	0x19, 0x9a, 0x00, 0x2e, 0x4d, 0x1e, 0x65, 0xb7, 0x84, 0x3b, 0x15, 0xc0, 0x9a, 0xaa, 0x36, 0x2a,
	0xf6, 0x98, 0xe4, 0xe7, 0x00, 0x1d, 0x49, 0xa1, 0xe1, 0x08, 0x67, 0x8b, 0x7d, 0xa8, 0xf8, 0x35,
	0xc8, 0x4c, 0x32, 0x0f, 0xdc, 0x2f, 0xfa, 0xf8, 0x35, 0xd4, 0x4f, 0xb2, 0x08, 0x41, 0xbc, 0x5d,
	0xc5, 0xe0, 0x10, 0x82, 0x3d, 0x26, 0xea, 0xa5, 0x60, 0x5a, 0xd0, 0x4b, 0xb7, 0x7a, 0x29, 0x58,
	0xd6, 0xe9, 0xa5, 0x3b, 0x7a, 0x29, 0x19, 0xef, 0xe9, 0xa5, 0xc9, 0xef, 0xb1, 0x1b, 0xf2, 0x8a,
	0x36, 0x3c, 0xfe, 0xfc, 0x39, 0x1a, 0x4b, 0xa1, 0x69, 0xc9, 0x43, 0xcb, 0x01, 0xb9, 0x33, 0xa4,
	0xa0, 0x4a, 0xd2, 0x26, 0xf6, 0x1c, 0xa0, 0x1f, 0x58, 0xc3, 0x6a, 0x59, 0x85, 0x86, 0x23, 0xc4,
	0x2f, 0xd0, 0x8c, 0xe6, 0xa5, 0xd4, 0x5f, 0x9d, 0xd5, 0x6d, 0x13, 0x26, 0x3d, 0x05, 0xee, 0x16,
	0x28, 0xbc, 0x40, 0xc3, 0xd2, 0xb6, 0x61, 0xd2, 0xee, 0x13, 0xbf, 0x45, 0x93, 0x6e, 0xca, 0xd0,
	0xf1, 0x34, 0x3d, 0xbd, 0x62, 0xa5, 0xba, 0xea, 0xcf, 0x3e, 0xdb, 0xe6, 0xb8, 0x82, 0x6e, 0x7c,
	0xe4, 0xb0, 0x57, 0xd0, 0x1f, 0x6a, 0xb6, 0xcd, 0x71, 0x67, 0x4a, 0x51, 0x90, 0x23, 0x7f, 0xa6,
	0x8c, 0x3f, 0x0d, 0xe3, 0x9e, 0x00, 0x19, 0x10, 0xd8, 0xb7, 0x91, 0x96, 0xdd, 0x41, 0x0c, 0x85,
	0x59, 0x77, 0x8c, 0xdb, 0x88, 0xca, 0xd4, 0x16, 0xa2, 0x53, 0xf8, 0xf7, 0x0e, 0x43, 0x2d, 0xb7,
	0x6d, 0x95, 0x73, 0x45, 0x1f, 0xc8, 0x2c, 0xd4, 0x76, 0x0c, 0x4e, 0xd0, 0x0c, 0x16, 0x2d, 0x66,
	0x1c, 0x43, 0xc6, 0x0e, 0x87, 0x2f, 0xd1, 0xdc, 0x59, 0x27, 0x1b, 0x2b, 0x19, 0xd7, 0x74, 0xa5,
	0x38, 0x39, 0x81, 0xb4, 0x7d, 0x1a, 0xbf, 0x47, 0xd3, 0xde, 0xaa, 0x92, 0x39, 0xd8, 0x80, 0xc1,
	0x86, 0x9d, 0x25, 0xce, 0xfa, 0x69, 0x4e, 0xdf, 0xd6, 0xb4, 0xca, 0xcd, 0x46, 0xe7, 0xb2, 0x01,
	0xfd, 0x85, 0xd7, 0xdf, 0xa3, 0x5d, 0xb7, 0xca, 0x98, 0x0a, 0x5e, 0x10, 0x4d, 0x15, 0x39, 0xf5,
	0xdd, 0xf6, 0x39, 0xfc, 0x1a, 0x2d, 0x84, 0x32, 0x1b, 0x68, 0xcd, 0x71, 0x6b, 0xaa, 0x08, 0x86,
	0xbc, 0xbf, 0x78, 0x77, 0x69, 0x04, 0x67, 0x60, 0xdc, 0x23, 0x7f, 0x69, 0x02, 0x74, 0x9e, 0x72,
	0x5b, 0xb7, 0xfa, 0x5e, 0xe6, 0xe4, 0xcc, 0xbf, 0x32, 0x11, 0xbb, 0x39, 0xad, 0x15, 0xd5, 0x32,
	0x27, 0x8f, 0xfd, 0xe5, 0xf4, 0x08, 0x63, 0x74, 0x50, 0xad, 0x65, 0x4e, 0xce, 0x21, 0x1f, 0xbe,
	0x9d, 0xff, 0x6d, 0x95, 0x53, 0xcb, 0xad, 0x2c, 0x39, 0x79, 0x72, 0x31, 0xb8, 0x1c, 0x66, 0x3d,
	0xc6, 0xad, 0x12, 0x2b, 0x73, 0x99, 0x13, 0xe2, 0x5f, 0x2c, 0x00, 0xf8, 0x25, 0x1a, 0xc1, 0xf2,
	0x92, 0xa7, 0xe0, 0xe0, 0x71, 0x70, 0xd0, 0xef, 0x4b, 0xe6, 0x63, 0xee, 0x81, 0x60, 0x8a, 0xd3,
	0xda, 0xbd, 0xa2, 0x64, 0xe9, 0x1f, 0x88, 0x8e, 0x48, 0x7f, 0x0d, 0xd0, 0xec, 0xa6, 0x54, 0x52,
	0x34, 0xbc, 0x5e, 0x4b, 0xc6, 0xf1, 0x07, 0x34, 0xbf, 0xe5, 0xf6, 0x53, 0x7c, 0x7c, 0x6f, 0x44,
	0x81, 0xe3, 0x64, 0x7a, 0x9b, 0xb7, 0x9c, 0x03, 0xc7, 0x44, 0x51, 0x5b, 0xed, 0xb8, 0xe4, 0x3f,
	0x57, 0xf9, 0x91, 0xab, 0x7f, 0xab, 0x5c, 0xdc, 0xde, 0x99, 0xcd, 0x4e, 0xe9, 0xc2, 0x6f, 0xc5,
	0x9d, 0xd9, 0x30, 0x51, 0xb8, 0xbc, 0xe5, 0x96, 0xe9, 0x2a, 0x57, 0x63, 0xb8, 0x81, 0xef, 0xfe,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x51, 0xad, 0x5b, 0x2e, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CmlifserviceClient is the client API for Cmlifservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmlifserviceClient interface {
	//interface基本信息的配置
	SetInterfaceCfg(ctx context.Context, in *Ifbaseinfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelInterfaceCfg(ctx context.Context, in *Ifbaseinfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	ShowInterfaceCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
}

type cmlifserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmlifserviceClient(cc grpc.ClientConnInterface) CmlifserviceClient {
	return &cmlifserviceClient{cc}
}

func (c *cmlifserviceClient) SetInterfaceCfg(ctx context.Context, in *Ifbaseinfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlifservice/SetInterfaceCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlifserviceClient) DelInterfaceCfg(ctx context.Context, in *Ifbaseinfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlifservice/DelInterfaceCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlifserviceClient) ShowInterfaceCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlifservice/ShowInterfaceCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmlifserviceServer is the server API for Cmlifservice service.
type CmlifserviceServer interface {
	//interface基本信息的配置
	SetInterfaceCfg(context.Context, *Ifbaseinfocfg) (*Cfgrtninfo, error)
	DelInterfaceCfg(context.Context, *Ifbaseinfocfg) (*Cfgrtninfo, error)
	ShowInterfaceCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
}

// UnimplementedCmlifserviceServer can be embedded to have forward compatible implementations.
type UnimplementedCmlifserviceServer struct {
}

func (*UnimplementedCmlifserviceServer) SetInterfaceCfg(ctx context.Context, req *Ifbaseinfocfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInterfaceCfg not implemented")
}
func (*UnimplementedCmlifserviceServer) DelInterfaceCfg(ctx context.Context, req *Ifbaseinfocfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelInterfaceCfg not implemented")
}
func (*UnimplementedCmlifserviceServer) ShowInterfaceCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowInterfaceCfg not implemented")
}

func RegisterCmlifserviceServer(s *grpc.Server, srv CmlifserviceServer) {
	s.RegisterService(&_Cmlifservice_serviceDesc, srv)
}

func _Cmlifservice_SetInterfaceCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ifbaseinfocfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlifserviceServer).SetInterfaceCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlifservice/SetInterfaceCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlifserviceServer).SetInterfaceCfg(ctx, req.(*Ifbaseinfocfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlifservice_DelInterfaceCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ifbaseinfocfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlifserviceServer).DelInterfaceCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlifservice/DelInterfaceCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlifserviceServer).DelInterfaceCfg(ctx, req.(*Ifbaseinfocfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlifservice_ShowInterfaceCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlifserviceServer).ShowInterfaceCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlifservice/ShowInterfaceCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlifserviceServer).ShowInterfaceCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmlifservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cml.Cmlifservice",
	HandlerType: (*CmlifserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInterfaceCfg",
			Handler:    _Cmlifservice_SetInterfaceCfg_Handler,
		},
		{
			MethodName: "DelInterfaceCfg",
			Handler:    _Cmlifservice_DelInterfaceCfg_Handler,
		},
		{
			MethodName: "ShowInterfaceCfg",
			Handler:    _Cmlifservice_ShowInterfaceCfg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface-config.proto",
}
