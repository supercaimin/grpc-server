// Code generated by protoc-gen-go. DO NOT EDIT.
// source: acl.proto

package cml

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ACL_PROFILE_TYPE int32

const (
	ACL_PROFILE_TYPE_WHITELIST ACL_PROFILE_TYPE = 0
	ACL_PROFILE_TYPE_BLACKLIST ACL_PROFILE_TYPE = 1
)

var ACL_PROFILE_TYPE_name = map[int32]string{
	0: "WHITELIST",
	1: "BLACKLIST",
}

var ACL_PROFILE_TYPE_value = map[string]int32{
	"WHITELIST": 0,
	"BLACKLIST": 1,
}

func (x ACL_PROFILE_TYPE) String() string {
	return proto.EnumName(ACL_PROFILE_TYPE_name, int32(x))
}

func (ACL_PROFILE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{0}
}

// ACL RULE TYPE
type ACL_RULE_TYPE int32

const (
	ACL_RULE_TYPE_ACL_RULE_TYPE_BASIC   ACL_RULE_TYPE = 0
	ACL_RULE_TYPE_ACL_RULE_TYPE_ADVANCE ACL_RULE_TYPE = 1
	ACL_RULE_TYPE_ACL_RULE_TYPE_L2      ACL_RULE_TYPE = 3
	ACL_RULE_TYPE_ACL_RULE_TYPE_ARP     ACL_RULE_TYPE = 4
	ACL_RULE_TYPE_ACL_RULE_TYPE_MIXED   ACL_RULE_TYPE = 5
)

var ACL_RULE_TYPE_name = map[int32]string{
	0: "ACL_RULE_TYPE_BASIC",
	1: "ACL_RULE_TYPE_ADVANCE",
	3: "ACL_RULE_TYPE_L2",
	4: "ACL_RULE_TYPE_ARP",
	5: "ACL_RULE_TYPE_MIXED",
}

var ACL_RULE_TYPE_value = map[string]int32{
	"ACL_RULE_TYPE_BASIC":   0,
	"ACL_RULE_TYPE_ADVANCE": 1,
	"ACL_RULE_TYPE_L2":      3,
	"ACL_RULE_TYPE_ARP":     4,
	"ACL_RULE_TYPE_MIXED":   5,
}

func (x ACL_RULE_TYPE) String() string {
	return proto.EnumName(ACL_RULE_TYPE_name, int32(x))
}

func (ACL_RULE_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{1}
}

type ACL_MATCH_FLAG int32

const (
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_NONE        ACL_MATCH_FLAG = 0
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_FRAGM       ACL_MATCH_FLAG = 2
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_TIMG        ACL_MATCH_FLAG = 4
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_SRCIP       ACL_MATCH_FLAG = 8
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_DSTIP       ACL_MATCH_FLAG = 16
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_VPN         ACL_MATCH_FLAG = 32
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_PROTO       ACL_MATCH_FLAG = 64
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_SRCPORT     ACL_MATCH_FLAG = 128
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_DSTPORT     ACL_MATCH_FLAG = 256
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_ICMPTYPE    ACL_MATCH_FLAG = 512
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_TCPFLAG     ACL_MATCH_FLAG = 1024
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_DSCP        ACL_MATCH_FLAG = 2048
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_PRECEDENCE  ACL_MATCH_FLAG = 4096
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_TOS         ACL_MATCH_FLAG = 8192
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_SRCMAC      ACL_MATCH_FLAG = 16384
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_DSTMAC      ACL_MATCH_FLAG = 32768
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_ETHTYPE     ACL_MATCH_FLAG = 65536
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_VLANID      ACL_MATCH_FLAG = 131072
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_DOT1P       ACL_MATCH_FLAG = 262144
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_INVLAN      ACL_MATCH_FLAG = 524288
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_INDOT1P     ACL_MATCH_FLAG = 1048576
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_DTAG        ACL_MATCH_FLAG = 2097152
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_ICMPCODE    ACL_MATCH_FLAG = 4194304
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_IGMPTYPE    ACL_MATCH_FLAG = 8388608
	ACL_MATCH_FLAG_ACL_MATCH_FLAG_PACKET_TYPE ACL_MATCH_FLAG = 16777216
)

var ACL_MATCH_FLAG_name = map[int32]string{
	0:        "ACL_MATCH_FLAG_NONE",
	2:        "ACL_MATCH_FLAG_FRAGM",
	4:        "ACL_MATCH_FLAG_TIMG",
	8:        "ACL_MATCH_FLAG_SRCIP",
	16:       "ACL_MATCH_FLAG_DSTIP",
	32:       "ACL_MATCH_FLAG_VPN",
	64:       "ACL_MATCH_FLAG_PROTO",
	128:      "ACL_MATCH_FLAG_SRCPORT",
	256:      "ACL_MATCH_FLAG_DSTPORT",
	512:      "ACL_MATCH_FLAG_ICMPTYPE",
	1024:     "ACL_MATCH_FLAG_TCPFLAG",
	2048:     "ACL_MATCH_FLAG_DSCP",
	4096:     "ACL_MATCH_FLAG_PRECEDENCE",
	8192:     "ACL_MATCH_FLAG_TOS",
	16384:    "ACL_MATCH_FLAG_SRCMAC",
	32768:    "ACL_MATCH_FLAG_DSTMAC",
	65536:    "ACL_MATCH_FLAG_ETHTYPE",
	131072:   "ACL_MATCH_FLAG_VLANID",
	262144:   "ACL_MATCH_FLAG_DOT1P",
	524288:   "ACL_MATCH_FLAG_INVLAN",
	1048576:  "ACL_MATCH_FLAG_INDOT1P",
	2097152:  "ACL_MATCH_FLAG_DTAG",
	4194304:  "ACL_MATCH_FLAG_ICMPCODE",
	8388608:  "ACL_MATCH_FLAG_IGMPTYPE",
	16777216: "ACL_MATCH_FLAG_PACKET_TYPE",
}

var ACL_MATCH_FLAG_value = map[string]int32{
	"ACL_MATCH_FLAG_NONE":        0,
	"ACL_MATCH_FLAG_FRAGM":       2,
	"ACL_MATCH_FLAG_TIMG":        4,
	"ACL_MATCH_FLAG_SRCIP":       8,
	"ACL_MATCH_FLAG_DSTIP":       16,
	"ACL_MATCH_FLAG_VPN":         32,
	"ACL_MATCH_FLAG_PROTO":       64,
	"ACL_MATCH_FLAG_SRCPORT":     128,
	"ACL_MATCH_FLAG_DSTPORT":     256,
	"ACL_MATCH_FLAG_ICMPTYPE":    512,
	"ACL_MATCH_FLAG_TCPFLAG":     1024,
	"ACL_MATCH_FLAG_DSCP":        2048,
	"ACL_MATCH_FLAG_PRECEDENCE":  4096,
	"ACL_MATCH_FLAG_TOS":         8192,
	"ACL_MATCH_FLAG_SRCMAC":      16384,
	"ACL_MATCH_FLAG_DSTMAC":      32768,
	"ACL_MATCH_FLAG_ETHTYPE":     65536,
	"ACL_MATCH_FLAG_VLANID":      131072,
	"ACL_MATCH_FLAG_DOT1P":       262144,
	"ACL_MATCH_FLAG_INVLAN":      524288,
	"ACL_MATCH_FLAG_INDOT1P":     1048576,
	"ACL_MATCH_FLAG_DTAG":        2097152,
	"ACL_MATCH_FLAG_ICMPCODE":    4194304,
	"ACL_MATCH_FLAG_IGMPTYPE":    8388608,
	"ACL_MATCH_FLAG_PACKET_TYPE": 16777216,
}

func (x ACL_MATCH_FLAG) String() string {
	return proto.EnumName(ACL_MATCH_FLAG_name, int32(x))
}

func (ACL_MATCH_FLAG) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{2}
}

type IP_PROTO_TYPE int32

const (
	IP_PROTO_TYPE_IP_PROTO_IP    IP_PROTO_TYPE = 0
	IP_PROTO_TYPE_IP_PROTO_UDP   IP_PROTO_TYPE = 1
	IP_PROTO_TYPE_IP_PROTO_TCP   IP_PROTO_TYPE = 2
	IP_PROTO_TYPE_IP_PROTO_ICMP  IP_PROTO_TYPE = 3
	IP_PROTO_TYPE_IP_PROTO_IGMP  IP_PROTO_TYPE = 4
	IP_PROTO_TYPE_IP_PROTO_OTHER IP_PROTO_TYPE = 20
)

var IP_PROTO_TYPE_name = map[int32]string{
	0:  "IP_PROTO_IP",
	1:  "IP_PROTO_UDP",
	2:  "IP_PROTO_TCP",
	3:  "IP_PROTO_ICMP",
	4:  "IP_PROTO_IGMP",
	20: "IP_PROTO_OTHER",
}

var IP_PROTO_TYPE_value = map[string]int32{
	"IP_PROTO_IP":    0,
	"IP_PROTO_UDP":   1,
	"IP_PROTO_TCP":   2,
	"IP_PROTO_ICMP":  3,
	"IP_PROTO_IGMP":  4,
	"IP_PROTO_OTHER": 20,
}

func (x IP_PROTO_TYPE) String() string {
	return proto.EnumName(IP_PROTO_TYPE_name, int32(x))
}

func (IP_PROTO_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{3}
}

type ICMP_TYPE int32

const (
	ICMP_TYPE_ICMP_TYPE_NOTCARE ICMP_TYPE = 0
	ICMP_TYPE_ICMP_TYPE_REQEUST ICMP_TYPE = 1
	ICMP_TYPE_ICMP_TYPE_REPLY   ICMP_TYPE = 2
	ICMP_TYPE_ICMP_TYPE_UNREACH ICMP_TYPE = 48
)

var ICMP_TYPE_name = map[int32]string{
	0:  "ICMP_TYPE_NOTCARE",
	1:  "ICMP_TYPE_REQEUST",
	2:  "ICMP_TYPE_REPLY",
	48: "ICMP_TYPE_UNREACH",
}

var ICMP_TYPE_value = map[string]int32{
	"ICMP_TYPE_NOTCARE": 0,
	"ICMP_TYPE_REQEUST": 1,
	"ICMP_TYPE_REPLY":   2,
	"ICMP_TYPE_UNREACH": 48,
}

func (x ICMP_TYPE) String() string {
	return proto.EnumName(ICMP_TYPE_name, int32(x))
}

func (ICMP_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{4}
}

type ACL_ACTION int32

const (
	ACL_ACTION_ACL_NOP ACL_ACTION = 0
	ACL_ACTION_PERMIT  ACL_ACTION = 1
	ACL_ACTION_DENY    ACL_ACTION = 2
)

var ACL_ACTION_name = map[int32]string{
	0: "ACL_NOP",
	1: "PERMIT",
	2: "DENY",
}

var ACL_ACTION_value = map[string]int32{
	"ACL_NOP": 0,
	"PERMIT":  1,
	"DENY":    2,
}

func (x ACL_ACTION) String() string {
	return proto.EnumName(ACL_ACTION_name, int32(x))
}

func (ACL_ACTION) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{5}
}

type ACL_TABLE_ACTION int32

const (
	ACL_TABLE_ACTION_BIND         ACL_TABLE_ACTION = 0
	ACL_TABLE_ACTION_UNBIND       ACL_TABLE_ACTION = 1
	ACL_TABLE_ACTION_STEP         ACL_TABLE_ACTION = 2
	ACL_TABLE_ACTION_NO_STEP      ACL_TABLE_ACTION = 3
	ACL_TABLE_ACTION_NO_TABLE     ACL_TABLE_ACTION = 4
	ACL_TABLE_ACTION_CREATE_TABLE ACL_TABLE_ACTION = 5
)

var ACL_TABLE_ACTION_name = map[int32]string{
	0: "BIND",
	1: "UNBIND",
	2: "STEP",
	3: "NO_STEP",
	4: "NO_TABLE",
	5: "CREATE_TABLE",
}

var ACL_TABLE_ACTION_value = map[string]int32{
	"BIND":         0,
	"UNBIND":       1,
	"STEP":         2,
	"NO_STEP":      3,
	"NO_TABLE":     4,
	"CREATE_TABLE": 5,
}

func (x ACL_TABLE_ACTION) String() string {
	return proto.EnumName(ACL_TABLE_ACTION_name, int32(x))
}

func (ACL_TABLE_ACTION) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{6}
}

type SHOW_ACL_ACTION int32

const (
	SHOW_ACL_ACTION_SHOW_ALL   SHOW_ACL_ACTION = 0
	SHOW_ACL_ACTION_SHOW_ENTRY SHOW_ACL_ACTION = 1
)

var SHOW_ACL_ACTION_name = map[int32]string{
	0: "SHOW_ALL",
	1: "SHOW_ENTRY",
}

var SHOW_ACL_ACTION_value = map[string]int32{
	"SHOW_ALL":   0,
	"SHOW_ENTRY": 1,
}

func (x SHOW_ACL_ACTION) String() string {
	return proto.EnumName(SHOW_ACL_ACTION_name, int32(x))
}

func (SHOW_ACL_ACTION) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{7}
}

type BASIC_ACL_MATCH struct {
	FragmentType         string   `protobuf:"bytes,1,opt,name=fragment_type,json=fragmentType,proto3" json:"fragment_type,omitempty"`
	TimeRange            string   `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	SrcIpMask            string   `protobuf:"bytes,3,opt,name=src_ip_mask,json=srcIpMask,proto3" json:"src_ip_mask,omitempty"`
	VpnInst              string   `protobuf:"bytes,4,opt,name=vpn_inst,json=vpnInst,proto3" json:"vpn_inst,omitempty"`
	Flag                 uint32   `protobuf:"varint,5,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BASIC_ACL_MATCH) Reset()         { *m = BASIC_ACL_MATCH{} }
func (m *BASIC_ACL_MATCH) String() string { return proto.CompactTextString(m) }
func (*BASIC_ACL_MATCH) ProtoMessage()    {}
func (*BASIC_ACL_MATCH) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{0}
}

func (m *BASIC_ACL_MATCH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BASIC_ACL_MATCH.Unmarshal(m, b)
}
func (m *BASIC_ACL_MATCH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BASIC_ACL_MATCH.Marshal(b, m, deterministic)
}
func (m *BASIC_ACL_MATCH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BASIC_ACL_MATCH.Merge(m, src)
}
func (m *BASIC_ACL_MATCH) XXX_Size() int {
	return xxx_messageInfo_BASIC_ACL_MATCH.Size(m)
}
func (m *BASIC_ACL_MATCH) XXX_DiscardUnknown() {
	xxx_messageInfo_BASIC_ACL_MATCH.DiscardUnknown(m)
}

var xxx_messageInfo_BASIC_ACL_MATCH proto.InternalMessageInfo

func (m *BASIC_ACL_MATCH) GetFragmentType() string {
	if m != nil {
		return m.FragmentType
	}
	return ""
}

func (m *BASIC_ACL_MATCH) GetTimeRange() string {
	if m != nil {
		return m.TimeRange
	}
	return ""
}

func (m *BASIC_ACL_MATCH) GetSrcIpMask() string {
	if m != nil {
		return m.SrcIpMask
	}
	return ""
}

func (m *BASIC_ACL_MATCH) GetVpnInst() string {
	if m != nil {
		return m.VpnInst
	}
	return ""
}

func (m *BASIC_ACL_MATCH) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type ADVANCE_ACL_MATCH struct {
	FragmentType         string   `protobuf:"bytes,1,opt,name=fragment_type,json=fragmentType,proto3" json:"fragment_type,omitempty"`
	TimeRange            string   `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	SrcIpMask            string   `protobuf:"bytes,3,opt,name=src_ip_mask,json=srcIpMask,proto3" json:"src_ip_mask,omitempty"`
	DstIpMask            string   `protobuf:"bytes,4,opt,name=dst_ip_mask,json=dstIpMask,proto3" json:"dst_ip_mask,omitempty"`
	VpnInst              string   `protobuf:"bytes,5,opt,name=vpn_inst,json=vpnInst,proto3" json:"vpn_inst,omitempty"`
	ProtoType            string   `protobuf:"bytes,6,opt,name=proto_type,json=protoType,proto3" json:"proto_type,omitempty"`
	SrcPortMin           int32    `protobuf:"varint,7,opt,name=src_port_min,json=srcPortMin,proto3" json:"src_port_min,omitempty"`
	SrcPortMax           int32    `protobuf:"varint,8,opt,name=src_port_max,json=srcPortMax,proto3" json:"src_port_max,omitempty"`
	DstPortMin           int32    `protobuf:"varint,9,opt,name=dst_port_min,json=dstPortMin,proto3" json:"dst_port_min,omitempty"`
	DstPortMax           int32    `protobuf:"varint,10,opt,name=dst_port_max,json=dstPortMax,proto3" json:"dst_port_max,omitempty"`
	IcmpType             int32    `protobuf:"varint,11,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	IcmpCode             int32    `protobuf:"varint,12,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	IgmpType             int32    `protobuf:"varint,13,opt,name=igmp_type,json=igmpType,proto3" json:"igmp_type,omitempty"`
	TcpFlag              int32    `protobuf:"varint,14,opt,name=tcp_flag,json=tcpFlag,proto3" json:"tcp_flag,omitempty"`
	Dscp                 int32    `protobuf:"varint,15,opt,name=dscp,proto3" json:"dscp,omitempty"`
	Precedence           int32    `protobuf:"varint,16,opt,name=precedence,proto3" json:"precedence,omitempty"`
	Tos                  int32    `protobuf:"varint,17,opt,name=tos,proto3" json:"tos,omitempty"`
	TtlExpired           string   `protobuf:"bytes,18,opt,name=ttl_expired,json=ttlExpired,proto3" json:"ttl_expired,omitempty"`
	Flag                 uint32   `protobuf:"varint,19,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ADVANCE_ACL_MATCH) Reset()         { *m = ADVANCE_ACL_MATCH{} }
func (m *ADVANCE_ACL_MATCH) String() string { return proto.CompactTextString(m) }
func (*ADVANCE_ACL_MATCH) ProtoMessage()    {}
func (*ADVANCE_ACL_MATCH) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{1}
}

func (m *ADVANCE_ACL_MATCH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADVANCE_ACL_MATCH.Unmarshal(m, b)
}
func (m *ADVANCE_ACL_MATCH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADVANCE_ACL_MATCH.Marshal(b, m, deterministic)
}
func (m *ADVANCE_ACL_MATCH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADVANCE_ACL_MATCH.Merge(m, src)
}
func (m *ADVANCE_ACL_MATCH) XXX_Size() int {
	return xxx_messageInfo_ADVANCE_ACL_MATCH.Size(m)
}
func (m *ADVANCE_ACL_MATCH) XXX_DiscardUnknown() {
	xxx_messageInfo_ADVANCE_ACL_MATCH.DiscardUnknown(m)
}

var xxx_messageInfo_ADVANCE_ACL_MATCH proto.InternalMessageInfo

func (m *ADVANCE_ACL_MATCH) GetFragmentType() string {
	if m != nil {
		return m.FragmentType
	}
	return ""
}

func (m *ADVANCE_ACL_MATCH) GetTimeRange() string {
	if m != nil {
		return m.TimeRange
	}
	return ""
}

func (m *ADVANCE_ACL_MATCH) GetSrcIpMask() string {
	if m != nil {
		return m.SrcIpMask
	}
	return ""
}

func (m *ADVANCE_ACL_MATCH) GetDstIpMask() string {
	if m != nil {
		return m.DstIpMask
	}
	return ""
}

func (m *ADVANCE_ACL_MATCH) GetVpnInst() string {
	if m != nil {
		return m.VpnInst
	}
	return ""
}

func (m *ADVANCE_ACL_MATCH) GetProtoType() string {
	if m != nil {
		return m.ProtoType
	}
	return ""
}

func (m *ADVANCE_ACL_MATCH) GetSrcPortMin() int32 {
	if m != nil {
		return m.SrcPortMin
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetSrcPortMax() int32 {
	if m != nil {
		return m.SrcPortMax
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetDstPortMin() int32 {
	if m != nil {
		return m.DstPortMin
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetDstPortMax() int32 {
	if m != nil {
		return m.DstPortMax
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetIcmpType() int32 {
	if m != nil {
		return m.IcmpType
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetIcmpCode() int32 {
	if m != nil {
		return m.IcmpCode
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetIgmpType() int32 {
	if m != nil {
		return m.IgmpType
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetTcpFlag() int32 {
	if m != nil {
		return m.TcpFlag
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetDscp() int32 {
	if m != nil {
		return m.Dscp
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetPrecedence() int32 {
	if m != nil {
		return m.Precedence
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetTos() int32 {
	if m != nil {
		return m.Tos
	}
	return 0
}

func (m *ADVANCE_ACL_MATCH) GetTtlExpired() string {
	if m != nil {
		return m.TtlExpired
	}
	return ""
}

func (m *ADVANCE_ACL_MATCH) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type L2_ACL_MATCH struct {
	SrcMacMask           string   `protobuf:"bytes,1,opt,name=src_mac_mask,json=srcMacMask,proto3" json:"src_mac_mask,omitempty"`
	DstMacMask           string   `protobuf:"bytes,2,opt,name=dst_mac_mask,json=dstMacMask,proto3" json:"dst_mac_mask,omitempty"`
	Ethertype            string   `protobuf:"bytes,3,opt,name=ethertype,proto3" json:"ethertype,omitempty"`
	VlanId               int32    `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	PacketType           string   `protobuf:"bytes,5,opt,name=packet_type,json=packetType,proto3" json:"packet_type,omitempty"`
	Dot1P                int32    `protobuf:"varint,6,opt,name=dot1p,proto3" json:"dot1p,omitempty"`
	Invlan               int32    `protobuf:"varint,7,opt,name=invlan,proto3" json:"invlan,omitempty"`
	Indot1P              int32    `protobuf:"varint,8,opt,name=indot1p,proto3" json:"indot1p,omitempty"`
	Dtag                 int32    `protobuf:"varint,9,opt,name=dtag,proto3" json:"dtag,omitempty"`
	TimeRange            string   `protobuf:"bytes,10,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Flag                 int32    `protobuf:"varint,11,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *L2_ACL_MATCH) Reset()         { *m = L2_ACL_MATCH{} }
func (m *L2_ACL_MATCH) String() string { return proto.CompactTextString(m) }
func (*L2_ACL_MATCH) ProtoMessage()    {}
func (*L2_ACL_MATCH) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{2}
}

func (m *L2_ACL_MATCH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2_ACL_MATCH.Unmarshal(m, b)
}
func (m *L2_ACL_MATCH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2_ACL_MATCH.Marshal(b, m, deterministic)
}
func (m *L2_ACL_MATCH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2_ACL_MATCH.Merge(m, src)
}
func (m *L2_ACL_MATCH) XXX_Size() int {
	return xxx_messageInfo_L2_ACL_MATCH.Size(m)
}
func (m *L2_ACL_MATCH) XXX_DiscardUnknown() {
	xxx_messageInfo_L2_ACL_MATCH.DiscardUnknown(m)
}

var xxx_messageInfo_L2_ACL_MATCH proto.InternalMessageInfo

func (m *L2_ACL_MATCH) GetSrcMacMask() string {
	if m != nil {
		return m.SrcMacMask
	}
	return ""
}

func (m *L2_ACL_MATCH) GetDstMacMask() string {
	if m != nil {
		return m.DstMacMask
	}
	return ""
}

func (m *L2_ACL_MATCH) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *L2_ACL_MATCH) GetVlanId() int32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *L2_ACL_MATCH) GetPacketType() string {
	if m != nil {
		return m.PacketType
	}
	return ""
}

func (m *L2_ACL_MATCH) GetDot1P() int32 {
	if m != nil {
		return m.Dot1P
	}
	return 0
}

func (m *L2_ACL_MATCH) GetInvlan() int32 {
	if m != nil {
		return m.Invlan
	}
	return 0
}

func (m *L2_ACL_MATCH) GetIndot1P() int32 {
	if m != nil {
		return m.Indot1P
	}
	return 0
}

func (m *L2_ACL_MATCH) GetDtag() int32 {
	if m != nil {
		return m.Dtag
	}
	return 0
}

func (m *L2_ACL_MATCH) GetTimeRange() string {
	if m != nil {
		return m.TimeRange
	}
	return ""
}

func (m *L2_ACL_MATCH) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type MIXED_ACL_MATCH struct {
	SrcMacMask           string   `protobuf:"bytes,1,opt,name=src_mac_mask,json=srcMacMask,proto3" json:"src_mac_mask,omitempty"`
	DstMacMask           string   `protobuf:"bytes,2,opt,name=dst_mac_mask,json=dstMacMask,proto3" json:"dst_mac_mask,omitempty"`
	Ethertype            string   `protobuf:"bytes,3,opt,name=ethertype,proto3" json:"ethertype,omitempty"`
	VlanId               int32    `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	PacketType           string   `protobuf:"bytes,5,opt,name=packet_type,json=packetType,proto3" json:"packet_type,omitempty"`
	Dot1P                int32    `protobuf:"varint,6,opt,name=dot1p,proto3" json:"dot1p,omitempty"`
	Invlan               int32    `protobuf:"varint,7,opt,name=invlan,proto3" json:"invlan,omitempty"`
	Indot1P              int32    `protobuf:"varint,8,opt,name=indot1p,proto3" json:"indot1p,omitempty"`
	Dtag                 int32    `protobuf:"varint,9,opt,name=dtag,proto3" json:"dtag,omitempty"`
	FragmentType         string   `protobuf:"bytes,10,opt,name=fragment_type,json=fragmentType,proto3" json:"fragment_type,omitempty"`
	TimeRange            string   `protobuf:"bytes,11,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	SrcIpMask            string   `protobuf:"bytes,12,opt,name=src_ip_mask,json=srcIpMask,proto3" json:"src_ip_mask,omitempty"`
	DstIpMask            string   `protobuf:"bytes,13,opt,name=dst_ip_mask,json=dstIpMask,proto3" json:"dst_ip_mask,omitempty"`
	VpnInst              string   `protobuf:"bytes,14,opt,name=vpn_inst,json=vpnInst,proto3" json:"vpn_inst,omitempty"`
	ProtoType            string   `protobuf:"bytes,15,opt,name=proto_type,json=protoType,proto3" json:"proto_type,omitempty"`
	SrcPortMin           int32    `protobuf:"varint,16,opt,name=src_port_min,json=srcPortMin,proto3" json:"src_port_min,omitempty"`
	SrcPortMax           int32    `protobuf:"varint,17,opt,name=src_port_max,json=srcPortMax,proto3" json:"src_port_max,omitempty"`
	DstPortMin           int32    `protobuf:"varint,18,opt,name=dst_port_min,json=dstPortMin,proto3" json:"dst_port_min,omitempty"`
	DstPortMax           int32    `protobuf:"varint,19,opt,name=dst_port_max,json=dstPortMax,proto3" json:"dst_port_max,omitempty"`
	IcmpType             int32    `protobuf:"varint,20,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	IcmpCode             int32    `protobuf:"varint,21,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	IgmpType             int32    `protobuf:"varint,22,opt,name=igmp_type,json=igmpType,proto3" json:"igmp_type,omitempty"`
	TcpFlag              int32    `protobuf:"varint,23,opt,name=tcp_flag,json=tcpFlag,proto3" json:"tcp_flag,omitempty"`
	Dscp                 int32    `protobuf:"varint,24,opt,name=dscp,proto3" json:"dscp,omitempty"`
	Precedence           int32    `protobuf:"varint,25,opt,name=precedence,proto3" json:"precedence,omitempty"`
	Tos                  int32    `protobuf:"varint,26,opt,name=tos,proto3" json:"tos,omitempty"`
	TtlExpired           string   `protobuf:"bytes,27,opt,name=ttl_expired,json=ttlExpired,proto3" json:"ttl_expired,omitempty"`
	Flag                 int32    `protobuf:"varint,28,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MIXED_ACL_MATCH) Reset()         { *m = MIXED_ACL_MATCH{} }
func (m *MIXED_ACL_MATCH) String() string { return proto.CompactTextString(m) }
func (*MIXED_ACL_MATCH) ProtoMessage()    {}
func (*MIXED_ACL_MATCH) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{3}
}

func (m *MIXED_ACL_MATCH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MIXED_ACL_MATCH.Unmarshal(m, b)
}
func (m *MIXED_ACL_MATCH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MIXED_ACL_MATCH.Marshal(b, m, deterministic)
}
func (m *MIXED_ACL_MATCH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MIXED_ACL_MATCH.Merge(m, src)
}
func (m *MIXED_ACL_MATCH) XXX_Size() int {
	return xxx_messageInfo_MIXED_ACL_MATCH.Size(m)
}
func (m *MIXED_ACL_MATCH) XXX_DiscardUnknown() {
	xxx_messageInfo_MIXED_ACL_MATCH.DiscardUnknown(m)
}

var xxx_messageInfo_MIXED_ACL_MATCH proto.InternalMessageInfo

func (m *MIXED_ACL_MATCH) GetSrcMacMask() string {
	if m != nil {
		return m.SrcMacMask
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetDstMacMask() string {
	if m != nil {
		return m.DstMacMask
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetEthertype() string {
	if m != nil {
		return m.Ethertype
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetVlanId() int32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetPacketType() string {
	if m != nil {
		return m.PacketType
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetDot1P() int32 {
	if m != nil {
		return m.Dot1P
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetInvlan() int32 {
	if m != nil {
		return m.Invlan
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetIndot1P() int32 {
	if m != nil {
		return m.Indot1P
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetDtag() int32 {
	if m != nil {
		return m.Dtag
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetFragmentType() string {
	if m != nil {
		return m.FragmentType
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetTimeRange() string {
	if m != nil {
		return m.TimeRange
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetSrcIpMask() string {
	if m != nil {
		return m.SrcIpMask
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetDstIpMask() string {
	if m != nil {
		return m.DstIpMask
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetVpnInst() string {
	if m != nil {
		return m.VpnInst
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetProtoType() string {
	if m != nil {
		return m.ProtoType
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetSrcPortMin() int32 {
	if m != nil {
		return m.SrcPortMin
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetSrcPortMax() int32 {
	if m != nil {
		return m.SrcPortMax
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetDstPortMin() int32 {
	if m != nil {
		return m.DstPortMin
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetDstPortMax() int32 {
	if m != nil {
		return m.DstPortMax
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetIcmpType() int32 {
	if m != nil {
		return m.IcmpType
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetIcmpCode() int32 {
	if m != nil {
		return m.IcmpCode
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetIgmpType() int32 {
	if m != nil {
		return m.IgmpType
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetTcpFlag() int32 {
	if m != nil {
		return m.TcpFlag
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetDscp() int32 {
	if m != nil {
		return m.Dscp
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetPrecedence() int32 {
	if m != nil {
		return m.Precedence
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetTos() int32 {
	if m != nil {
		return m.Tos
	}
	return 0
}

func (m *MIXED_ACL_MATCH) GetTtlExpired() string {
	if m != nil {
		return m.TtlExpired
	}
	return ""
}

func (m *MIXED_ACL_MATCH) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type ARP_ACL_MATCH struct {
	ArpType              string   `protobuf:"bytes,1,opt,name=arp_type,json=arpType,proto3" json:"arp_type,omitempty"`
	SrcIpMask            string   `protobuf:"bytes,2,opt,name=src_ip_mask,json=srcIpMask,proto3" json:"src_ip_mask,omitempty"`
	DstIpMask            string   `protobuf:"bytes,3,opt,name=dst_ip_mask,json=dstIpMask,proto3" json:"dst_ip_mask,omitempty"`
	SrcMacMask           string   `protobuf:"bytes,4,opt,name=src_mac_mask,json=srcMacMask,proto3" json:"src_mac_mask,omitempty"`
	DstMacMask           string   `protobuf:"bytes,5,opt,name=dst_mac_mask,json=dstMacMask,proto3" json:"dst_mac_mask,omitempty"`
	TimeRange            string   `protobuf:"bytes,6,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ARP_ACL_MATCH) Reset()         { *m = ARP_ACL_MATCH{} }
func (m *ARP_ACL_MATCH) String() string { return proto.CompactTextString(m) }
func (*ARP_ACL_MATCH) ProtoMessage()    {}
func (*ARP_ACL_MATCH) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{4}
}

func (m *ARP_ACL_MATCH) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ARP_ACL_MATCH.Unmarshal(m, b)
}
func (m *ARP_ACL_MATCH) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ARP_ACL_MATCH.Marshal(b, m, deterministic)
}
func (m *ARP_ACL_MATCH) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ARP_ACL_MATCH.Merge(m, src)
}
func (m *ARP_ACL_MATCH) XXX_Size() int {
	return xxx_messageInfo_ARP_ACL_MATCH.Size(m)
}
func (m *ARP_ACL_MATCH) XXX_DiscardUnknown() {
	xxx_messageInfo_ARP_ACL_MATCH.DiscardUnknown(m)
}

var xxx_messageInfo_ARP_ACL_MATCH proto.InternalMessageInfo

func (m *ARP_ACL_MATCH) GetArpType() string {
	if m != nil {
		return m.ArpType
	}
	return ""
}

func (m *ARP_ACL_MATCH) GetSrcIpMask() string {
	if m != nil {
		return m.SrcIpMask
	}
	return ""
}

func (m *ARP_ACL_MATCH) GetDstIpMask() string {
	if m != nil {
		return m.DstIpMask
	}
	return ""
}

func (m *ARP_ACL_MATCH) GetSrcMacMask() string {
	if m != nil {
		return m.SrcMacMask
	}
	return ""
}

func (m *ARP_ACL_MATCH) GetDstMacMask() string {
	if m != nil {
		return m.DstMacMask
	}
	return ""
}

func (m *ARP_ACL_MATCH) GetTimeRange() string {
	if m != nil {
		return m.TimeRange
	}
	return ""
}

type ACL_TABLE struct {
	AclNumber            string   `protobuf:"bytes,1,opt,name=acl_number,json=aclNumber,proto3" json:"acl_number,omitempty"`
	AclType              string   `protobuf:"bytes,2,opt,name=acl_type,json=aclType,proto3" json:"acl_type,omitempty"`
	Action               int32    `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
	Step                 int32    `protobuf:"varint,4,opt,name=step,proto3" json:"step,omitempty"`
	BindType             string   `protobuf:"bytes,5,opt,name=bind_type,json=bindType,proto3" json:"bind_type,omitempty"`
	BindTypeNumber       string   `protobuf:"bytes,6,opt,name=bind_type_number,json=bindTypeNumber,proto3" json:"bind_type_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACL_TABLE) Reset()         { *m = ACL_TABLE{} }
func (m *ACL_TABLE) String() string { return proto.CompactTextString(m) }
func (*ACL_TABLE) ProtoMessage()    {}
func (*ACL_TABLE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{5}
}

func (m *ACL_TABLE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACL_TABLE.Unmarshal(m, b)
}
func (m *ACL_TABLE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACL_TABLE.Marshal(b, m, deterministic)
}
func (m *ACL_TABLE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACL_TABLE.Merge(m, src)
}
func (m *ACL_TABLE) XXX_Size() int {
	return xxx_messageInfo_ACL_TABLE.Size(m)
}
func (m *ACL_TABLE) XXX_DiscardUnknown() {
	xxx_messageInfo_ACL_TABLE.DiscardUnknown(m)
}

var xxx_messageInfo_ACL_TABLE proto.InternalMessageInfo

func (m *ACL_TABLE) GetAclNumber() string {
	if m != nil {
		return m.AclNumber
	}
	return ""
}

func (m *ACL_TABLE) GetAclType() string {
	if m != nil {
		return m.AclType
	}
	return ""
}

func (m *ACL_TABLE) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *ACL_TABLE) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *ACL_TABLE) GetBindType() string {
	if m != nil {
		return m.BindType
	}
	return ""
}

func (m *ACL_TABLE) GetBindTypeNumber() string {
	if m != nil {
		return m.BindTypeNumber
	}
	return ""
}

type BASIC_ACLRULE struct {
	AclNumber            string           `protobuf:"bytes,1,opt,name=acl_number,json=aclNumber,proto3" json:"acl_number,omitempty"`
	Step                 int32            `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	RuleId               int32            `protobuf:"varint,3,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleId1              int32            `protobuf:"varint,4,opt,name=rule_id1,json=ruleId1,proto3" json:"rule_id1,omitempty"`
	RuleId2              int32            `protobuf:"varint,5,opt,name=rule_id2,json=ruleId2,proto3" json:"rule_id2,omitempty"`
	Action               int32            `protobuf:"varint,6,opt,name=action,proto3" json:"action,omitempty"`
	Match                *BASIC_ACL_MATCH `protobuf:"bytes,7,opt,name=match,proto3" json:"match,omitempty"`
	Cmdline              string           `protobuf:"bytes,8,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BASIC_ACLRULE) Reset()         { *m = BASIC_ACLRULE{} }
func (m *BASIC_ACLRULE) String() string { return proto.CompactTextString(m) }
func (*BASIC_ACLRULE) ProtoMessage()    {}
func (*BASIC_ACLRULE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{6}
}

func (m *BASIC_ACLRULE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BASIC_ACLRULE.Unmarshal(m, b)
}
func (m *BASIC_ACLRULE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BASIC_ACLRULE.Marshal(b, m, deterministic)
}
func (m *BASIC_ACLRULE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BASIC_ACLRULE.Merge(m, src)
}
func (m *BASIC_ACLRULE) XXX_Size() int {
	return xxx_messageInfo_BASIC_ACLRULE.Size(m)
}
func (m *BASIC_ACLRULE) XXX_DiscardUnknown() {
	xxx_messageInfo_BASIC_ACLRULE.DiscardUnknown(m)
}

var xxx_messageInfo_BASIC_ACLRULE proto.InternalMessageInfo

func (m *BASIC_ACLRULE) GetAclNumber() string {
	if m != nil {
		return m.AclNumber
	}
	return ""
}

func (m *BASIC_ACLRULE) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *BASIC_ACLRULE) GetRuleId() int32 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *BASIC_ACLRULE) GetRuleId1() int32 {
	if m != nil {
		return m.RuleId1
	}
	return 0
}

func (m *BASIC_ACLRULE) GetRuleId2() int32 {
	if m != nil {
		return m.RuleId2
	}
	return 0
}

func (m *BASIC_ACLRULE) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *BASIC_ACLRULE) GetMatch() *BASIC_ACL_MATCH {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *BASIC_ACLRULE) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

type ADVANCE_ACLRULE struct {
	AclNumber            string             `protobuf:"bytes,1,opt,name=acl_number,json=aclNumber,proto3" json:"acl_number,omitempty"`
	Step                 int32              `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	RuleId               int32              `protobuf:"varint,3,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleId1              int32              `protobuf:"varint,4,opt,name=rule_id1,json=ruleId1,proto3" json:"rule_id1,omitempty"`
	RuleId2              int32              `protobuf:"varint,5,opt,name=rule_id2,json=ruleId2,proto3" json:"rule_id2,omitempty"`
	Action               int32              `protobuf:"varint,6,opt,name=action,proto3" json:"action,omitempty"`
	Match                *ADVANCE_ACL_MATCH `protobuf:"bytes,7,opt,name=match,proto3" json:"match,omitempty"`
	Cmdline              string             `protobuf:"bytes,8,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ADVANCE_ACLRULE) Reset()         { *m = ADVANCE_ACLRULE{} }
func (m *ADVANCE_ACLRULE) String() string { return proto.CompactTextString(m) }
func (*ADVANCE_ACLRULE) ProtoMessage()    {}
func (*ADVANCE_ACLRULE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{7}
}

func (m *ADVANCE_ACLRULE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ADVANCE_ACLRULE.Unmarshal(m, b)
}
func (m *ADVANCE_ACLRULE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ADVANCE_ACLRULE.Marshal(b, m, deterministic)
}
func (m *ADVANCE_ACLRULE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ADVANCE_ACLRULE.Merge(m, src)
}
func (m *ADVANCE_ACLRULE) XXX_Size() int {
	return xxx_messageInfo_ADVANCE_ACLRULE.Size(m)
}
func (m *ADVANCE_ACLRULE) XXX_DiscardUnknown() {
	xxx_messageInfo_ADVANCE_ACLRULE.DiscardUnknown(m)
}

var xxx_messageInfo_ADVANCE_ACLRULE proto.InternalMessageInfo

func (m *ADVANCE_ACLRULE) GetAclNumber() string {
	if m != nil {
		return m.AclNumber
	}
	return ""
}

func (m *ADVANCE_ACLRULE) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *ADVANCE_ACLRULE) GetRuleId() int32 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *ADVANCE_ACLRULE) GetRuleId1() int32 {
	if m != nil {
		return m.RuleId1
	}
	return 0
}

func (m *ADVANCE_ACLRULE) GetRuleId2() int32 {
	if m != nil {
		return m.RuleId2
	}
	return 0
}

func (m *ADVANCE_ACLRULE) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *ADVANCE_ACLRULE) GetMatch() *ADVANCE_ACL_MATCH {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *ADVANCE_ACLRULE) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

type L2_ACLRULE struct {
	AclNumber            string        `protobuf:"bytes,1,opt,name=acl_number,json=aclNumber,proto3" json:"acl_number,omitempty"`
	Step                 int32         `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	RuleId               int32         `protobuf:"varint,3,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleId1              int32         `protobuf:"varint,4,opt,name=rule_id1,json=ruleId1,proto3" json:"rule_id1,omitempty"`
	RuleId2              int32         `protobuf:"varint,5,opt,name=rule_id2,json=ruleId2,proto3" json:"rule_id2,omitempty"`
	Action               int32         `protobuf:"varint,6,opt,name=action,proto3" json:"action,omitempty"`
	Match                *L2_ACL_MATCH `protobuf:"bytes,7,opt,name=match,proto3" json:"match,omitempty"`
	Cmdline              string        `protobuf:"bytes,8,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *L2_ACLRULE) Reset()         { *m = L2_ACLRULE{} }
func (m *L2_ACLRULE) String() string { return proto.CompactTextString(m) }
func (*L2_ACLRULE) ProtoMessage()    {}
func (*L2_ACLRULE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{8}
}

func (m *L2_ACLRULE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_L2_ACLRULE.Unmarshal(m, b)
}
func (m *L2_ACLRULE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_L2_ACLRULE.Marshal(b, m, deterministic)
}
func (m *L2_ACLRULE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_L2_ACLRULE.Merge(m, src)
}
func (m *L2_ACLRULE) XXX_Size() int {
	return xxx_messageInfo_L2_ACLRULE.Size(m)
}
func (m *L2_ACLRULE) XXX_DiscardUnknown() {
	xxx_messageInfo_L2_ACLRULE.DiscardUnknown(m)
}

var xxx_messageInfo_L2_ACLRULE proto.InternalMessageInfo

func (m *L2_ACLRULE) GetAclNumber() string {
	if m != nil {
		return m.AclNumber
	}
	return ""
}

func (m *L2_ACLRULE) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *L2_ACLRULE) GetRuleId() int32 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *L2_ACLRULE) GetRuleId1() int32 {
	if m != nil {
		return m.RuleId1
	}
	return 0
}

func (m *L2_ACLRULE) GetRuleId2() int32 {
	if m != nil {
		return m.RuleId2
	}
	return 0
}

func (m *L2_ACLRULE) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *L2_ACLRULE) GetMatch() *L2_ACL_MATCH {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *L2_ACLRULE) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

type ARP_ACLRULE struct {
	AclNumber            string         `protobuf:"bytes,1,opt,name=acl_number,json=aclNumber,proto3" json:"acl_number,omitempty"`
	Step                 int32          `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	RuleId               int32          `protobuf:"varint,3,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleId1              int32          `protobuf:"varint,4,opt,name=rule_id1,json=ruleId1,proto3" json:"rule_id1,omitempty"`
	RuleId2              int32          `protobuf:"varint,5,opt,name=rule_id2,json=ruleId2,proto3" json:"rule_id2,omitempty"`
	Action               int32          `protobuf:"varint,6,opt,name=action,proto3" json:"action,omitempty"`
	Match                *ARP_ACL_MATCH `protobuf:"bytes,7,opt,name=match,proto3" json:"match,omitempty"`
	Cmdline              string         `protobuf:"bytes,8,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ARP_ACLRULE) Reset()         { *m = ARP_ACLRULE{} }
func (m *ARP_ACLRULE) String() string { return proto.CompactTextString(m) }
func (*ARP_ACLRULE) ProtoMessage()    {}
func (*ARP_ACLRULE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{9}
}

func (m *ARP_ACLRULE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ARP_ACLRULE.Unmarshal(m, b)
}
func (m *ARP_ACLRULE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ARP_ACLRULE.Marshal(b, m, deterministic)
}
func (m *ARP_ACLRULE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ARP_ACLRULE.Merge(m, src)
}
func (m *ARP_ACLRULE) XXX_Size() int {
	return xxx_messageInfo_ARP_ACLRULE.Size(m)
}
func (m *ARP_ACLRULE) XXX_DiscardUnknown() {
	xxx_messageInfo_ARP_ACLRULE.DiscardUnknown(m)
}

var xxx_messageInfo_ARP_ACLRULE proto.InternalMessageInfo

func (m *ARP_ACLRULE) GetAclNumber() string {
	if m != nil {
		return m.AclNumber
	}
	return ""
}

func (m *ARP_ACLRULE) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *ARP_ACLRULE) GetRuleId() int32 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *ARP_ACLRULE) GetRuleId1() int32 {
	if m != nil {
		return m.RuleId1
	}
	return 0
}

func (m *ARP_ACLRULE) GetRuleId2() int32 {
	if m != nil {
		return m.RuleId2
	}
	return 0
}

func (m *ARP_ACLRULE) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *ARP_ACLRULE) GetMatch() *ARP_ACL_MATCH {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *ARP_ACLRULE) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

type MIXED_ACLRULE struct {
	AclNumber            string           `protobuf:"bytes,1,opt,name=acl_number,json=aclNumber,proto3" json:"acl_number,omitempty"`
	Step                 int32            `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	RuleId               int32            `protobuf:"varint,3,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleId1              int32            `protobuf:"varint,4,opt,name=rule_id1,json=ruleId1,proto3" json:"rule_id1,omitempty"`
	RuleId2              int32            `protobuf:"varint,5,opt,name=rule_id2,json=ruleId2,proto3" json:"rule_id2,omitempty"`
	Action               int32            `protobuf:"varint,6,opt,name=action,proto3" json:"action,omitempty"`
	Match                *MIXED_ACL_MATCH `protobuf:"bytes,7,opt,name=match,proto3" json:"match,omitempty"`
	Cmdline              string           `protobuf:"bytes,8,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MIXED_ACLRULE) Reset()         { *m = MIXED_ACLRULE{} }
func (m *MIXED_ACLRULE) String() string { return proto.CompactTextString(m) }
func (*MIXED_ACLRULE) ProtoMessage()    {}
func (*MIXED_ACLRULE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{10}
}

func (m *MIXED_ACLRULE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MIXED_ACLRULE.Unmarshal(m, b)
}
func (m *MIXED_ACLRULE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MIXED_ACLRULE.Marshal(b, m, deterministic)
}
func (m *MIXED_ACLRULE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MIXED_ACLRULE.Merge(m, src)
}
func (m *MIXED_ACLRULE) XXX_Size() int {
	return xxx_messageInfo_MIXED_ACLRULE.Size(m)
}
func (m *MIXED_ACLRULE) XXX_DiscardUnknown() {
	xxx_messageInfo_MIXED_ACLRULE.DiscardUnknown(m)
}

var xxx_messageInfo_MIXED_ACLRULE proto.InternalMessageInfo

func (m *MIXED_ACLRULE) GetAclNumber() string {
	if m != nil {
		return m.AclNumber
	}
	return ""
}

func (m *MIXED_ACLRULE) GetStep() int32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *MIXED_ACLRULE) GetRuleId() int32 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *MIXED_ACLRULE) GetRuleId1() int32 {
	if m != nil {
		return m.RuleId1
	}
	return 0
}

func (m *MIXED_ACLRULE) GetRuleId2() int32 {
	if m != nil {
		return m.RuleId2
	}
	return 0
}

func (m *MIXED_ACLRULE) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *MIXED_ACLRULE) GetMatch() *MIXED_ACL_MATCH {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *MIXED_ACLRULE) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

type ACL_SHOW_MSG struct {
	Action               int32    `protobuf:"varint,1,opt,name=action,proto3" json:"action,omitempty"`
	AclType              string   `protobuf:"bytes,2,opt,name=acl_type,json=aclType,proto3" json:"acl_type,omitempty"`
	AclName              string   `protobuf:"bytes,3,opt,name=acl_name,json=aclName,proto3" json:"acl_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACL_SHOW_MSG) Reset()         { *m = ACL_SHOW_MSG{} }
func (m *ACL_SHOW_MSG) String() string { return proto.CompactTextString(m) }
func (*ACL_SHOW_MSG) ProtoMessage()    {}
func (*ACL_SHOW_MSG) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{11}
}

func (m *ACL_SHOW_MSG) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACL_SHOW_MSG.Unmarshal(m, b)
}
func (m *ACL_SHOW_MSG) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACL_SHOW_MSG.Marshal(b, m, deterministic)
}
func (m *ACL_SHOW_MSG) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACL_SHOW_MSG.Merge(m, src)
}
func (m *ACL_SHOW_MSG) XXX_Size() int {
	return xxx_messageInfo_ACL_SHOW_MSG.Size(m)
}
func (m *ACL_SHOW_MSG) XXX_DiscardUnknown() {
	xxx_messageInfo_ACL_SHOW_MSG.DiscardUnknown(m)
}

var xxx_messageInfo_ACL_SHOW_MSG proto.InternalMessageInfo

func (m *ACL_SHOW_MSG) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *ACL_SHOW_MSG) GetAclType() string {
	if m != nil {
		return m.AclType
	}
	return ""
}

func (m *ACL_SHOW_MSG) GetAclName() string {
	if m != nil {
		return m.AclName
	}
	return ""
}

type ACL_SHOW_RESPONSE struct {
	AclTableName         string   `protobuf:"bytes,1,opt,name=acl_table_name,json=aclTableName,proto3" json:"acl_table_name,omitempty"`
	Step                 string   `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	BindVlan             string   `protobuf:"bytes,3,opt,name=bind_vlan,json=bindVlan,proto3" json:"bind_vlan,omitempty"`
	BindInterface        string   `protobuf:"bytes,4,opt,name=bind_interface,json=bindInterface,proto3" json:"bind_interface,omitempty"`
	BindPort             string   `protobuf:"bytes,5,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	Cmdline              []string `protobuf:"bytes,6,rep,name=cmdline,proto3" json:"cmdline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACL_SHOW_RESPONSE) Reset()         { *m = ACL_SHOW_RESPONSE{} }
func (m *ACL_SHOW_RESPONSE) String() string { return proto.CompactTextString(m) }
func (*ACL_SHOW_RESPONSE) ProtoMessage()    {}
func (*ACL_SHOW_RESPONSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{12}
}

func (m *ACL_SHOW_RESPONSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACL_SHOW_RESPONSE.Unmarshal(m, b)
}
func (m *ACL_SHOW_RESPONSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACL_SHOW_RESPONSE.Marshal(b, m, deterministic)
}
func (m *ACL_SHOW_RESPONSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACL_SHOW_RESPONSE.Merge(m, src)
}
func (m *ACL_SHOW_RESPONSE) XXX_Size() int {
	return xxx_messageInfo_ACL_SHOW_RESPONSE.Size(m)
}
func (m *ACL_SHOW_RESPONSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ACL_SHOW_RESPONSE.DiscardUnknown(m)
}

var xxx_messageInfo_ACL_SHOW_RESPONSE proto.InternalMessageInfo

func (m *ACL_SHOW_RESPONSE) GetAclTableName() string {
	if m != nil {
		return m.AclTableName
	}
	return ""
}

func (m *ACL_SHOW_RESPONSE) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

func (m *ACL_SHOW_RESPONSE) GetBindVlan() string {
	if m != nil {
		return m.BindVlan
	}
	return ""
}

func (m *ACL_SHOW_RESPONSE) GetBindInterface() string {
	if m != nil {
		return m.BindInterface
	}
	return ""
}

func (m *ACL_SHOW_RESPONSE) GetBindPort() string {
	if m != nil {
		return m.BindPort
	}
	return ""
}

func (m *ACL_SHOW_RESPONSE) GetCmdline() []string {
	if m != nil {
		return m.Cmdline
	}
	return nil
}

type ALL_SHOW_RESPONSE struct {
	Entries              []*ACL_SHOW_RESPONSE `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ALL_SHOW_RESPONSE) Reset()         { *m = ALL_SHOW_RESPONSE{} }
func (m *ALL_SHOW_RESPONSE) String() string { return proto.CompactTextString(m) }
func (*ALL_SHOW_RESPONSE) ProtoMessage()    {}
func (*ALL_SHOW_RESPONSE) Descriptor() ([]byte, []int) {
	return fileDescriptor_a452f070aeef01eb, []int{13}
}

func (m *ALL_SHOW_RESPONSE) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ALL_SHOW_RESPONSE.Unmarshal(m, b)
}
func (m *ALL_SHOW_RESPONSE) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ALL_SHOW_RESPONSE.Marshal(b, m, deterministic)
}
func (m *ALL_SHOW_RESPONSE) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ALL_SHOW_RESPONSE.Merge(m, src)
}
func (m *ALL_SHOW_RESPONSE) XXX_Size() int {
	return xxx_messageInfo_ALL_SHOW_RESPONSE.Size(m)
}
func (m *ALL_SHOW_RESPONSE) XXX_DiscardUnknown() {
	xxx_messageInfo_ALL_SHOW_RESPONSE.DiscardUnknown(m)
}

var xxx_messageInfo_ALL_SHOW_RESPONSE proto.InternalMessageInfo

func (m *ALL_SHOW_RESPONSE) GetEntries() []*ACL_SHOW_RESPONSE {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterEnum("cml.ACL_PROFILE_TYPE", ACL_PROFILE_TYPE_name, ACL_PROFILE_TYPE_value)
	proto.RegisterEnum("cml.ACL_RULE_TYPE", ACL_RULE_TYPE_name, ACL_RULE_TYPE_value)
	proto.RegisterEnum("cml.ACL_MATCH_FLAG", ACL_MATCH_FLAG_name, ACL_MATCH_FLAG_value)
	proto.RegisterEnum("cml.IP_PROTO_TYPE", IP_PROTO_TYPE_name, IP_PROTO_TYPE_value)
	proto.RegisterEnum("cml.ICMP_TYPE", ICMP_TYPE_name, ICMP_TYPE_value)
	proto.RegisterEnum("cml.ACL_ACTION", ACL_ACTION_name, ACL_ACTION_value)
	proto.RegisterEnum("cml.ACL_TABLE_ACTION", ACL_TABLE_ACTION_name, ACL_TABLE_ACTION_value)
	proto.RegisterEnum("cml.SHOW_ACL_ACTION", SHOW_ACL_ACTION_name, SHOW_ACL_ACTION_value)
	proto.RegisterType((*BASIC_ACL_MATCH)(nil), "cml.BASIC_ACL_MATCH")
	proto.RegisterType((*ADVANCE_ACL_MATCH)(nil), "cml.ADVANCE_ACL_MATCH")
	proto.RegisterType((*L2_ACL_MATCH)(nil), "cml.L2_ACL_MATCH")
	proto.RegisterType((*MIXED_ACL_MATCH)(nil), "cml.MIXED_ACL_MATCH")
	proto.RegisterType((*ARP_ACL_MATCH)(nil), "cml.ARP_ACL_MATCH")
	proto.RegisterType((*ACL_TABLE)(nil), "cml.ACL_TABLE")
	proto.RegisterType((*BASIC_ACLRULE)(nil), "cml.BASIC_ACLRULE")
	proto.RegisterType((*ADVANCE_ACLRULE)(nil), "cml.ADVANCE_ACLRULE")
	proto.RegisterType((*L2_ACLRULE)(nil), "cml.L2_ACLRULE")
	proto.RegisterType((*ARP_ACLRULE)(nil), "cml.ARP_ACLRULE")
	proto.RegisterType((*MIXED_ACLRULE)(nil), "cml.MIXED_ACLRULE")
	proto.RegisterType((*ACL_SHOW_MSG)(nil), "cml.ACL_SHOW_MSG")
	proto.RegisterType((*ACL_SHOW_RESPONSE)(nil), "cml.ACL_SHOW_RESPONSE")
	proto.RegisterType((*ALL_SHOW_RESPONSE)(nil), "cml.ALL_SHOW_RESPONSE")
}

func init() {
	proto.RegisterFile("acl.proto", fileDescriptor_a452f070aeef01eb)
}

var fileDescriptor_a452f070aeef01eb = []byte{
	// 1810 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4f, 0x6f, 0xdb, 0xc8,
	0x15, 0x37, 0xf5, 0x5f, 0x4f, 0x96, 0x35, 0x1e, 0xff, 0x93, 0xbd, 0x59, 0xd7, 0x75, 0x5b, 0xd4,
	0x10, 0x8a, 0x6c, 0xe2, 0x02, 0x45, 0xb1, 0x87, 0x62, 0x69, 0x8a, 0xb1, 0x89, 0x95, 0x28, 0x96,
	0xa2, 0xb3, 0x0d, 0x50, 0x80, 0x60, 0xc8, 0x89, 0x43, 0x84, 0xa4, 0x08, 0x8a, 0x49, 0xbd, 0x97,
	0x42, 0xd7, 0x7e, 0x8f, 0x5e, 0x7b, 0x6f, 0x81, 0x9e, 0x8b, 0x5e, 0x7a, 0xec, 0x87, 0x28, 0x7a,
	0xe8, 0xa1, 0x5f, 0xa0, 0x98, 0x19, 0x92, 0x26, 0x29, 0x59, 0xc2, 0xe6, 0x50, 0xa4, 0x40, 0x4f,
	0xd1, 0xbc, 0xf7, 0x7e, 0x33, 0xef, 0xf7, 0xe6, 0xcd, 0x8f, 0x2f, 0x86, 0xb6, 0x65, 0x7b, 0x4f,
	0xc3, 0x68, 0x16, 0xcf, 0x70, 0xd5, 0xf6, 0xbd, 0x13, 0x64, 0xcf, 0x7c, 0xdf, 0x8c, 0xbf, 0x0d,
	0xc9, 0x9c, 0x9b, 0xcf, 0x7f, 0x2f, 0x40, 0xef, 0x4a, 0x9c, 0x2a, 0x92, 0x29, 0x4a, 0x23, 0x73,
	0x2c, 0x1a, 0xd2, 0x0d, 0xfe, 0x01, 0x74, 0xdf, 0x44, 0xd6, 0x9d, 0x4f, 0x82, 0x98, 0xc5, 0xf6,
	0x85, 0x33, 0xe1, 0xa2, 0xad, 0x6f, 0xa7, 0x46, 0xe3, 0xdb, 0x90, 0xe0, 0xcf, 0x01, 0x62, 0xd7,
	0x27, 0x66, 0x64, 0x05, 0x77, 0xa4, 0x5f, 0x61, 0x11, 0x6d, 0x6a, 0xd1, 0xa9, 0x01, 0x9f, 0x42,
	0x67, 0x1e, 0xd9, 0xa6, 0x1b, 0x9a, 0xbe, 0x35, 0x7f, 0xd7, 0xaf, 0x72, 0xff, 0x3c, 0xb2, 0x95,
	0x70, 0x6c, 0xcd, 0xdf, 0xe1, 0x63, 0x68, 0x7d, 0x08, 0x03, 0xd3, 0x0d, 0xe6, 0x71, 0xbf, 0xc6,
	0x9c, 0xcd, 0x0f, 0x61, 0xa0, 0x04, 0xf3, 0x18, 0x63, 0xa8, 0xbd, 0xf1, 0xac, 0xbb, 0x7e, 0xfd,
	0x4c, 0xb8, 0xe8, 0xea, 0xec, 0xf7, 0xf9, 0x5f, 0x6a, 0xb0, 0x2b, 0x0e, 0x5f, 0x8a, 0xaa, 0x24,
	0xff, 0x97, 0x13, 0x3d, 0x85, 0x8e, 0x33, 0x8f, 0x33, 0x3f, 0xcf, 0xb5, 0xed, 0xcc, 0xe3, 0x15,
	0x44, 0xea, 0x45, 0x22, 0x9f, 0x03, 0xb0, 0x22, 0xf3, 0xdc, 0x1a, 0x1c, 0xc9, 0x2c, 0x2c, 0xb1,
	0x33, 0xd8, 0xa6, 0x27, 0x87, 0xb3, 0x28, 0x36, 0x7d, 0x37, 0xe8, 0x37, 0xcf, 0x84, 0x8b, 0xba,
	0x0e, 0xf3, 0xc8, 0xd6, 0x66, 0x51, 0x3c, 0x76, 0x83, 0x62, 0x84, 0x75, 0xdf, 0x6f, 0x15, 0x23,
	0xac, 0x7b, 0x1a, 0x41, 0xb3, 0xcb, 0xf6, 0x68, 0xf3, 0x08, 0x67, 0x1e, 0xe7, 0xf6, 0x78, 0x88,
	0xb0, 0xee, 0xfb, 0x50, 0x8c, 0xb0, 0xee, 0xf1, 0x67, 0xd0, 0x76, 0x6d, 0x3f, 0xe4, 0x59, 0x76,
	0x98, 0xbb, 0x45, 0x0d, 0x2c, 0xc9, 0xd4, 0x69, 0xcf, 0x1c, 0xd2, 0xdf, 0x7e, 0x70, 0x4a, 0x33,
	0x87, 0x3b, 0xef, 0x52, 0x64, 0x37, 0x71, 0xde, 0x25, 0xc8, 0x63, 0x68, 0xc5, 0x76, 0x68, 0xb2,
	0xab, 0xdc, 0x61, 0xbe, 0x66, 0x6c, 0x87, 0x2f, 0x3c, 0xeb, 0x8e, 0xde, 0xb0, 0x33, 0xb7, 0xc3,
	0x7e, 0x8f, 0x99, 0xd9, 0x6f, 0x7c, 0x4a, 0x8b, 0x45, 0x6c, 0xe2, 0x90, 0xc0, 0x26, 0x7d, 0xc4,
	0xb3, 0x7c, 0xb0, 0x60, 0x04, 0xd5, 0x78, 0x36, 0xef, 0xef, 0x32, 0x07, 0xfd, 0x89, 0xbf, 0x07,
	0x9d, 0x38, 0xf6, 0x4c, 0x72, 0x1f, 0xba, 0x11, 0x71, 0xfa, 0x98, 0xd5, 0x17, 0xe2, 0xd8, 0x93,
	0xb9, 0x25, 0x6b, 0xa4, 0xbd, 0x5c, 0x23, 0xfd, 0xa9, 0x02, 0xdb, 0xa3, 0xcb, 0x5c, 0x0f, 0x25,
	0x35, 0xf6, 0x2d, 0x9b, 0x5f, 0x30, 0x6f, 0x21, 0x5a, 0xe3, 0xb1, 0x65, 0xb3, 0x1b, 0x4e, 0x2a,
	0x98, 0x45, 0xf0, 0x16, 0xa2, 0x15, 0x4c, 0x23, 0x9e, 0x40, 0x9b, 0xc4, 0x6f, 0x49, 0xc4, 0xea,
	0x90, 0x74, 0x50, 0x66, 0xc0, 0x47, 0xd0, 0xfc, 0xe0, 0x59, 0x81, 0xe9, 0x3a, 0xac, 0x7b, 0xea,
	0x7a, 0x83, 0x2e, 0x15, 0x87, 0x12, 0x08, 0x2d, 0xfb, 0x1d, 0x49, 0x9a, 0x97, 0x77, 0x0f, 0x70,
	0x13, 0x2b, 0xe1, 0x3e, 0xd4, 0x9d, 0x59, 0xfc, 0x3c, 0x64, 0xbd, 0x53, 0xd7, 0xf9, 0x02, 0x1f,
	0x42, 0xc3, 0x0d, 0xe8, 0x16, 0x49, 0xc7, 0x24, 0x2b, 0xdc, 0x87, 0xa6, 0x1b, 0xf0, 0x78, 0xde,
	0x28, 0xe9, 0x92, 0xd5, 0x3b, 0xb6, 0xee, 0x92, 0xee, 0x60, 0xbf, 0x4b, 0xcf, 0x02, 0xca, 0xcf,
	0x22, 0xad, 0x1d, 0xef, 0x07, 0x5e, 0xbb, 0x3f, 0x37, 0xa0, 0x37, 0x56, 0x7e, 0x25, 0x0f, 0xff,
	0x5f, 0xbe, 0x65, 0xe9, 0x81, 0x8d, 0xd2, 0xd3, 0xd9, 0x20, 0x3d, 0xdb, 0x1b, 0xa4, 0xa7, 0xbb,
	0x4e, 0x7a, 0x76, 0xd6, 0x49, 0x4f, 0x6f, 0x93, 0xf4, 0xa0, 0x8d, 0xd2, 0xb3, 0xbb, 0x51, 0x7a,
	0xf0, 0x46, 0xe9, 0xd9, 0x5b, 0x2f, 0x3d, 0xfb, 0xeb, 0xa4, 0xe7, 0x60, 0x9d, 0xf4, 0x1c, 0xae,
	0x91, 0x9e, 0xa3, 0xd5, 0xd2, 0xd3, 0x7f, 0x54, 0x7a, 0x8e, 0x1f, 0x93, 0x9e, 0x93, 0x47, 0xa5,
	0xe7, 0xb3, 0x47, 0xa5, 0xe7, 0x49, 0xee, 0xf9, 0xfc, 0x4d, 0x80, 0xae, 0xa8, 0x6b, 0xb9, 0xc7,
	0x73, 0x0c, 0x2d, 0x2b, 0x0a, 0xf3, 0x9f, 0xae, 0xa6, 0x15, 0x71, 0x0a, 0xa5, 0xde, 0xa8, 0x6c,
	0xe8, 0x8d, 0x6a, 0xb9, 0x37, 0xca, 0xef, 0xb2, 0xb6, 0xf1, 0x5d, 0xd6, 0x97, 0xde, 0x65, 0xb1,
	0x7d, 0x1b, 0xa5, 0xf6, 0x3d, 0xff, 0xa3, 0x00, 0x6d, 0xca, 0xc5, 0x10, 0xaf, 0x46, 0x32, 0x0d,
	0xb6, 0x6c, 0xcf, 0x0c, 0xde, 0xfb, 0xaf, 0x49, 0x94, 0xb0, 0xa1, 0xe3, 0x87, 0xca, 0x0c, 0x8c,
	0xaa, 0xed, 0x71, 0xaa, 0x95, 0x84, 0xaa, 0xed, 0x31, 0xaa, 0x87, 0xd0, 0xb0, 0xec, 0xd8, 0x9d,
	0x05, 0x8c, 0x45, 0x5d, 0x4f, 0x56, 0xb4, 0x86, 0xf3, 0x98, 0x84, 0xc9, 0xab, 0x67, 0xbf, 0xe9,
	0xb5, 0xbf, 0x76, 0x03, 0x27, 0xff, 0xe2, 0x5b, 0xd4, 0xc0, 0x36, 0xba, 0x00, 0x94, 0x39, 0xd3,
	0x44, 0x78, 0xd6, 0x3b, 0x69, 0x0c, 0xcf, 0xe6, 0xfc, 0x5f, 0x02, 0x74, 0xb3, 0xa9, 0x47, 0xbf,
	0xdd, 0x9c, 0x7e, 0x9a, 0x4b, 0x25, 0x97, 0xcb, 0x11, 0x34, 0xa3, 0xf7, 0x1e, 0xa1, 0xc2, 0x94,
	0x24, 0x4e, 0x97, 0x8a, 0x43, 0xb9, 0x26, 0x8e, 0xe7, 0x49, 0xf2, 0x4d, 0xee, 0x79, 0x9e, 0x73,
	0x5d, 0xb2, 0xf4, 0x33, 0xd7, 0x65, 0xae, 0x0c, 0x8d, 0x42, 0x19, 0x06, 0x50, 0xf7, 0xad, 0xd8,
	0x7e, 0xcb, 0xe4, 0xaa, 0x73, 0xb9, 0xff, 0xd4, 0xf6, 0xbd, 0xa7, 0xa5, 0x91, 0x4d, 0xe7, 0x21,
	0x54, 0xc3, 0x6c, 0xdf, 0xf1, 0xdc, 0x80, 0x30, 0x0d, 0x6b, 0xeb, 0xe9, 0xf2, 0xfc, 0xdf, 0x02,
	0xf4, 0x72, 0x03, 0xd4, 0x27, 0xce, 0xf9, 0x27, 0x45, 0xce, 0x87, 0x8c, 0xf3, 0xd2, 0xfc, 0xb7,
	0x99, 0xf5, 0x3f, 0x04, 0x00, 0xfe, 0xb5, 0xff, 0xc4, 0x09, 0xff, 0xb8, 0x48, 0x78, 0x97, 0x11,
	0xce, 0xcf, 0x29, 0x9b, 0xb9, 0xfe, 0x53, 0x80, 0x4e, 0x22, 0x2f, 0x9f, 0x38, 0xd9, 0x8b, 0x22,
	0x59, 0xcc, 0x6f, 0x37, 0xaf, 0x8c, 0x9b, 0xd9, 0xd2, 0x17, 0x9c, 0xcd, 0x22, 0xff, 0x8b, 0x2f,
	0xb8, 0x34, 0x48, 0x6d, 0x66, 0xfc, 0x6b, 0xd8, 0xa6, 0xd1, 0xd3, 0x9b, 0xc9, 0x37, 0xe6, 0x78,
	0x7a, 0x9d, 0x3b, 0x4d, 0x28, 0x9c, 0xb6, 0x46, 0x69, 0x13, 0x57, 0x60, 0xf9, 0xe9, 0x9c, 0x45,
	0x5d, 0xaa, 0xe5, 0x93, 0xf3, 0xbf, 0x0a, 0xb0, 0x9b, 0x6d, 0xaf, 0xcb, 0x53, 0x6d, 0xa2, 0x4e,
	0x65, 0xfc, 0x43, 0xd8, 0x61, 0x7b, 0x59, 0xaf, 0x3d, 0xc2, 0x61, 0xc9, 0xff, 0xb0, 0xe8, 0x8e,
	0xd4, 0x48, 0xb1, 0x85, 0xd2, 0xb6, 0x4b, 0x42, 0xcd, 0x06, 0xad, 0xea, 0x83, 0x50, 0xbf, 0xa4,
	0xa3, 0xd6, 0x8f, 0x80, 0x09, 0xb2, 0xe9, 0x06, 0x31, 0x89, 0xde, 0x58, 0x36, 0x49, 0x3e, 0x4f,
	0x5d, 0x6a, 0x55, 0x52, 0x63, 0xb6, 0x07, 0x1d, 0x20, 0xf2, 0x62, 0x4f, 0xa7, 0x87, 0x7c, 0xa1,
	0x1a, 0x67, 0xd5, 0x7c, 0xa1, 0x64, 0xd8, 0x15, 0x47, 0x65, 0x26, 0xcf, 0xa0, 0x49, 0x82, 0x38,
	0x72, 0xc9, 0xbc, 0x2f, 0x9c, 0x55, 0x1f, 0x34, 0xa5, 0x4c, 0x59, 0x4f, 0xc3, 0x06, 0xcf, 0x00,
	0x51, 0xaf, 0xa6, 0x4f, 0x5e, 0x28, 0x23, 0xd9, 0x34, 0x5e, 0x69, 0x32, 0xee, 0x42, 0xfb, 0x9b,
	0x1b, 0xc5, 0x90, 0x47, 0xca, 0xd4, 0x40, 0x5b, 0x74, 0x79, 0x35, 0x12, 0xa5, 0xaf, 0xd9, 0x52,
	0x18, 0xfc, 0x8e, 0x7e, 0xe0, 0xa5, 0x91, 0x49, 0xdb, 0x91, 0xc7, 0x1f, 0xc1, 0x5e, 0xc1, 0x60,
	0x32, 0xdd, 0x46, 0x5b, 0xf8, 0x18, 0x0e, 0x8a, 0x8e, 0x44, 0xdc, 0x90, 0x80, 0xf7, 0xf9, 0xb9,
	0x0f, 0xae, 0xd1, 0x25, 0xaa, 0xe2, 0x03, 0x7e, 0x3d, 0x39, 0x80, 0xae, 0xa1, 0xda, 0xf2, 0x01,
	0xac, 0xad, 0x50, 0x7d, 0xf0, 0xf7, 0x3a, 0xec, 0x64, 0xcd, 0x65, 0xbe, 0x18, 0x89, 0xd7, 0x69,
	0xec, 0x83, 0xc5, 0x54, 0x27, 0xaa, 0x8c, 0xb6, 0x70, 0x1f, 0xf6, 0x4b, 0x8e, 0x17, 0xba, 0x78,
	0x3d, 0x46, 0x95, 0x15, 0x10, 0x43, 0x19, 0x5f, 0xa3, 0xda, 0x0a, 0xc8, 0x54, 0x97, 0x14, 0x0d,
	0xb5, 0x56, 0x78, 0x86, 0x53, 0x43, 0xd1, 0x10, 0xc2, 0x87, 0x80, 0x4b, 0x9e, 0x97, 0x9a, 0x8a,
	0xce, 0x56, 0x20, 0x34, 0x7d, 0x62, 0x4c, 0xd0, 0x57, 0xf8, 0x33, 0x38, 0x5c, 0x3e, 0x45, 0x9b,
	0xe8, 0x06, 0x5a, 0x08, 0x2b, 0x9c, 0xc3, 0xa9, 0xc1, 0x9d, 0x15, 0xfc, 0x04, 0x8e, 0x4a, 0x4e,
	0x45, 0x1a, 0x6b, 0xb4, 0x42, 0x68, 0x51, 0x5b, 0x01, 0x35, 0x24, 0x8d, 0xfe, 0x8b, 0x16, 0x94,
	0xc0, 0xde, 0xd2, 0xbe, 0x92, 0x86, 0x16, 0x08, 0x9f, 0xc2, 0xf1, 0x52, 0xa2, 0xb2, 0x24, 0x0f,
	0x65, 0x7a, 0x71, 0x8b, 0x33, 0x7c, 0xb4, 0x44, 0xd0, 0x98, 0x4c, 0xd1, 0x82, 0xf2, 0x38, 0x58,
	0xe6, 0x31, 0x16, 0x25, 0xb4, 0x60, 0x3c, 0x0e, 0x96, 0x79, 0x70, 0x27, 0xe5, 0x51, 0xce, 0x54,
	0x36, 0x6e, 0x38, 0x0d, 0xc6, 0xa3, 0x0c, 0x7d, 0x39, 0x12, 0x55, 0x65, 0x88, 0x16, 0x8b, 0x16,
	0x3e, 0x59, 0xbe, 0x88, 0x89, 0xf1, 0x5c, 0x43, 0x8b, 0x05, 0x5a, 0x01, 0x54, 0x54, 0x0a, 0x45,
	0x8b, 0xc5, 0xd9, 0x8a, 0x33, 0x15, 0x35, 0x85, 0x7e, 0x85, 0x4f, 0x96, 0xcb, 0x63, 0xd0, 0xc2,
	0x51, 0x2a, 0xa7, 0x2b, 0xab, 0x2e, 0x4d, 0x86, 0x34, 0xdd, 0x45, 0x65, 0x95, 0xff, 0x3a, 0xbd,
	0x15, 0xca, 0xe7, 0xfb, 0x70, 0x52, 0x2e, 0xb0, 0x28, 0x7d, 0x2d, 0x1b, 0x66, 0x1a, 0xd2, 0x1a,
	0xfc, 0x16, 0xba, 0x8a, 0xc6, 0x1b, 0x84, 0x3f, 0xb1, 0x1e, 0x74, 0x32, 0x83, 0xa2, 0xa1, 0x2d,
	0x8c, 0x60, 0x3b, 0x33, 0xdc, 0x0e, 0x35, 0x24, 0x14, 0x2c, 0x86, 0xa4, 0xa1, 0x0a, 0xde, 0xcd,
	0xed, 0x42, 0x53, 0x44, 0xd5, 0xa2, 0xe9, 0x7a, 0x4c, 0x1f, 0x17, 0x86, 0x9d, 0xcc, 0x34, 0x31,
	0x6e, 0x64, 0x1d, 0xed, 0x0f, 0x08, 0xb4, 0x29, 0x80, 0x9f, 0x7d, 0x00, 0xbb, 0xd9, 0xc2, 0x54,
	0x27, 0x86, 0x24, 0xea, 0xf4, 0x3d, 0x15, 0xcc, 0xba, 0xfc, 0x4b, 0xf9, 0x96, 0xca, 0x03, 0xde,
	0x83, 0x5e, 0xde, 0xac, 0x8d, 0x5e, 0xa1, 0x4a, 0x31, 0xf6, 0x56, 0xd5, 0x65, 0x51, 0xba, 0x41,
	0xcf, 0x06, 0x5f, 0x00, 0xd0, 0x4a, 0x88, 0x92, 0xa1, 0x4c, 0x54, 0xdc, 0x81, 0x26, 0x5d, 0xa9,
	0x13, 0xca, 0x0f, 0xa0, 0xa1, 0xc9, 0xfa, 0x58, 0xa1, 0x5b, 0xb6, 0xa0, 0x36, 0x94, 0xd5, 0x57,
	0xa8, 0x32, 0x30, 0xb9, 0x6a, 0xb0, 0x59, 0x3c, 0x85, 0xb5, 0xa0, 0x76, 0xa5, 0xa8, 0x43, 0x8e,
	0xb9, 0x55, 0xd9, 0x6f, 0x86, 0x99, 0x1a, 0x32, 0xad, 0x42, 0x07, 0x9a, 0xea, 0xc4, 0x64, 0x8b,
	0x2a, 0xde, 0x86, 0x96, 0x3a, 0xe1, 0x78, 0x54, 0xa3, 0x25, 0x93, 0x74, 0x59, 0x34, 0xe4, 0xc4,
	0x52, 0x1f, 0x7c, 0x01, 0x3d, 0x26, 0x94, 0xb9, 0xb4, 0xb6, 0xa1, 0xc5, 0x4d, 0xa3, 0x11, 0xda,
	0xc2, 0x3b, 0x00, 0x6c, 0x25, 0xab, 0x86, 0xfe, 0x0a, 0x09, 0x97, 0x7f, 0x68, 0x40, 0x57, 0xf2,
	0x3d, 0xd1, 0xf6, 0xa6, 0x24, 0xfa, 0xe0, 0xda, 0x04, 0xff, 0x02, 0xb0, 0x14, 0x11, 0x2b, 0x26,
	0x57, 0xd6, 0xdc, 0xb5, 0xe9, 0x77, 0xfb, 0xbd, 0x47, 0x30, 0x2e, 0x0e, 0xb4, 0x54, 0xca, 0x4e,
	0xb8, 0x4d, 0x9a, 0xf9, 0xfe, 0x2c, 0xd0, 0xc9, 0x3c, 0xbc, 0x71, 0xa2, 0xf3, 0x2d, 0x8a, 0x1f,
	0x12, 0x8f, 0x7c, 0x34, 0x5e, 0x84, 0x3d, 0x7e, 0xbe, 0x7c, 0x1f, 0x93, 0xc0, 0x49, 0x37, 0xd8,
	0x2f, 0x4f, 0x97, 0xeb, 0xb7, 0xe0, 0x29, 0x7c, 0xfc, 0x16, 0x3f, 0x87, 0x1e, 0xcf, 0x62, 0x74,
	0x99, 0xc2, 0x7b, 0xb9, 0x71, 0x6f, 0x3d, 0x92, 0x1f, 0xfe, 0x9d, 0x91, 0x5f, 0x02, 0xe2, 0x67,
	0x8a, 0x51, 0x98, 0x42, 0x51, 0x7e, 0xec, 0x5a, 0x8f, 0xe5, 0xa7, 0x7e, 0x04, 0x36, 0xbb, 0xf1,
	0xb1, 0x7b, 0x4f, 0x9c, 0xe2, 0x8d, 0x15, 0xa6, 0xb7, 0x4d, 0x37, 0xfe, 0x91, 0xf8, 0x9f, 0xc1,
	0xce, 0x6d, 0xe8, 0x50, 0xde, 0xd2, 0x88, 0xcd, 0x2b, 0x78, 0x27, 0xfb, 0xec, 0xb3, 0xc6, 0x7e,
	0x1c, 0x97, 0x70, 0xfe, 0x6e, 0xb8, 0x2f, 0xa1, 0x33, 0x7d, 0x3b, 0xfb, 0x4d, 0x9a, 0xe8, 0x6e,
	0x71, 0xc6, 0x18, 0x4f, 0xaf, 0x4f, 0x92, 0xb1, 0xa3, 0x3c, 0x9f, 0x9c, 0x6f, 0xbd, 0x6e, 0xb0,
	0x3f, 0xcf, 0xfc, 0xf4, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xd9, 0x9d, 0xda, 0xb4, 0x17,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CmlAclServiceClient is the client API for CmlAclService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmlAclServiceClient interface {
	//BASIC ACL规则相关的配置
	CreateBasicACLRule(ctx context.Context, in *BASIC_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteBasicACLRule(ctx context.Context, in *BASIC_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	//ADVANCE ACL规则相关的配置
	CreateExtendACLRule(ctx context.Context, in *ADVANCE_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteExtendACLRule(ctx context.Context, in *ADVANCE_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	//L2 ACL规则相关的配置
	CreateL2ACLRule(ctx context.Context, in *L2_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteL2ACLRule(ctx context.Context, in *L2_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	//ARP ACL规则相关的配置
	CreateArpACLRule(ctx context.Context, in *ARP_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteArpACLRule(ctx context.Context, in *ARP_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	//混合 ACL规则相关的配置
	CreateMixedACLRule(ctx context.Context, in *MIXED_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteMixedACLRule(ctx context.Context, in *MIXED_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	UpdateACLTable(ctx context.Context, in *ACL_TABLE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteACLTable(ctx context.Context, in *ACL_TABLE, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowACLRule(ctx context.Context, in *ACL_SHOW_MSG, opts ...grpc.CallOption) (*ALL_SHOW_RESPONSE, error)
}

type cmlAclServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmlAclServiceClient(cc grpc.ClientConnInterface) CmlAclServiceClient {
	return &cmlAclServiceClient{cc}
}

func (c *cmlAclServiceClient) CreateBasicACLRule(ctx context.Context, in *BASIC_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/CreateBasicACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) DeleteBasicACLRule(ctx context.Context, in *BASIC_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/DeleteBasicACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) CreateExtendACLRule(ctx context.Context, in *ADVANCE_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/CreateExtendACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) DeleteExtendACLRule(ctx context.Context, in *ADVANCE_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/DeleteExtendACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) CreateL2ACLRule(ctx context.Context, in *L2_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/CreateL2ACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) DeleteL2ACLRule(ctx context.Context, in *L2_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/DeleteL2ACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) CreateArpACLRule(ctx context.Context, in *ARP_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/CreateArpACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) DeleteArpACLRule(ctx context.Context, in *ARP_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/DeleteArpACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) CreateMixedACLRule(ctx context.Context, in *MIXED_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/CreateMixedACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) DeleteMixedACLRule(ctx context.Context, in *MIXED_ACLRULE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/DeleteMixedACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) UpdateACLTable(ctx context.Context, in *ACL_TABLE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/UpdateACLTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) DeleteACLTable(ctx context.Context, in *ACL_TABLE, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/DeleteACLTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlAclServiceClient) ShowACLRule(ctx context.Context, in *ACL_SHOW_MSG, opts ...grpc.CallOption) (*ALL_SHOW_RESPONSE, error) {
	out := new(ALL_SHOW_RESPONSE)
	err := c.cc.Invoke(ctx, "/cml.CmlAclService/ShowACLRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmlAclServiceServer is the server API for CmlAclService service.
type CmlAclServiceServer interface {
	//BASIC ACL规则相关的配置
	CreateBasicACLRule(context.Context, *BASIC_ACLRULE) (*CommonRespHdr, error)
	DeleteBasicACLRule(context.Context, *BASIC_ACLRULE) (*CommonRespHdr, error)
	//ADVANCE ACL规则相关的配置
	CreateExtendACLRule(context.Context, *ADVANCE_ACLRULE) (*CommonRespHdr, error)
	DeleteExtendACLRule(context.Context, *ADVANCE_ACLRULE) (*CommonRespHdr, error)
	//L2 ACL规则相关的配置
	CreateL2ACLRule(context.Context, *L2_ACLRULE) (*CommonRespHdr, error)
	DeleteL2ACLRule(context.Context, *L2_ACLRULE) (*CommonRespHdr, error)
	//ARP ACL规则相关的配置
	CreateArpACLRule(context.Context, *ARP_ACLRULE) (*CommonRespHdr, error)
	DeleteArpACLRule(context.Context, *ARP_ACLRULE) (*CommonRespHdr, error)
	//混合 ACL规则相关的配置
	CreateMixedACLRule(context.Context, *MIXED_ACLRULE) (*CommonRespHdr, error)
	DeleteMixedACLRule(context.Context, *MIXED_ACLRULE) (*CommonRespHdr, error)
	UpdateACLTable(context.Context, *ACL_TABLE) (*CommonRespHdr, error)
	DeleteACLTable(context.Context, *ACL_TABLE) (*CommonRespHdr, error)
	ShowACLRule(context.Context, *ACL_SHOW_MSG) (*ALL_SHOW_RESPONSE, error)
}

// UnimplementedCmlAclServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCmlAclServiceServer struct {
}

func (*UnimplementedCmlAclServiceServer) CreateBasicACLRule(ctx context.Context, req *BASIC_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasicACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) DeleteBasicACLRule(ctx context.Context, req *BASIC_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasicACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) CreateExtendACLRule(ctx context.Context, req *ADVANCE_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtendACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) DeleteExtendACLRule(ctx context.Context, req *ADVANCE_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtendACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) CreateL2ACLRule(ctx context.Context, req *L2_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL2ACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) DeleteL2ACLRule(ctx context.Context, req *L2_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteL2ACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) CreateArpACLRule(ctx context.Context, req *ARP_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArpACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) DeleteArpACLRule(ctx context.Context, req *ARP_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArpACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) CreateMixedACLRule(ctx context.Context, req *MIXED_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMixedACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) DeleteMixedACLRule(ctx context.Context, req *MIXED_ACLRULE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMixedACLRule not implemented")
}
func (*UnimplementedCmlAclServiceServer) UpdateACLTable(ctx context.Context, req *ACL_TABLE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateACLTable not implemented")
}
func (*UnimplementedCmlAclServiceServer) DeleteACLTable(ctx context.Context, req *ACL_TABLE) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteACLTable not implemented")
}
func (*UnimplementedCmlAclServiceServer) ShowACLRule(ctx context.Context, req *ACL_SHOW_MSG) (*ALL_SHOW_RESPONSE, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowACLRule not implemented")
}

func RegisterCmlAclServiceServer(s *grpc.Server, srv CmlAclServiceServer) {
	s.RegisterService(&_CmlAclService_serviceDesc, srv)
}

func _CmlAclService_CreateBasicACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BASIC_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).CreateBasicACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/CreateBasicACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).CreateBasicACLRule(ctx, req.(*BASIC_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_DeleteBasicACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BASIC_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).DeleteBasicACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/DeleteBasicACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).DeleteBasicACLRule(ctx, req.(*BASIC_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_CreateExtendACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ADVANCE_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).CreateExtendACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/CreateExtendACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).CreateExtendACLRule(ctx, req.(*ADVANCE_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_DeleteExtendACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ADVANCE_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).DeleteExtendACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/DeleteExtendACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).DeleteExtendACLRule(ctx, req.(*ADVANCE_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_CreateL2ACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(L2_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).CreateL2ACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/CreateL2ACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).CreateL2ACLRule(ctx, req.(*L2_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_DeleteL2ACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(L2_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).DeleteL2ACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/DeleteL2ACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).DeleteL2ACLRule(ctx, req.(*L2_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_CreateArpACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ARP_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).CreateArpACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/CreateArpACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).CreateArpACLRule(ctx, req.(*ARP_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_DeleteArpACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ARP_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).DeleteArpACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/DeleteArpACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).DeleteArpACLRule(ctx, req.(*ARP_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_CreateMixedACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MIXED_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).CreateMixedACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/CreateMixedACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).CreateMixedACLRule(ctx, req.(*MIXED_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_DeleteMixedACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MIXED_ACLRULE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).DeleteMixedACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/DeleteMixedACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).DeleteMixedACLRule(ctx, req.(*MIXED_ACLRULE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_UpdateACLTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACL_TABLE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).UpdateACLTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/UpdateACLTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).UpdateACLTable(ctx, req.(*ACL_TABLE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_DeleteACLTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACL_TABLE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).DeleteACLTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/DeleteACLTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).DeleteACLTable(ctx, req.(*ACL_TABLE))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlAclService_ShowACLRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACL_SHOW_MSG)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlAclServiceServer).ShowACLRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlAclService/ShowACLRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlAclServiceServer).ShowACLRule(ctx, req.(*ACL_SHOW_MSG))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmlAclService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cml.CmlAclService",
	HandlerType: (*CmlAclServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBasicACLRule",
			Handler:    _CmlAclService_CreateBasicACLRule_Handler,
		},
		{
			MethodName: "DeleteBasicACLRule",
			Handler:    _CmlAclService_DeleteBasicACLRule_Handler,
		},
		{
			MethodName: "CreateExtendACLRule",
			Handler:    _CmlAclService_CreateExtendACLRule_Handler,
		},
		{
			MethodName: "DeleteExtendACLRule",
			Handler:    _CmlAclService_DeleteExtendACLRule_Handler,
		},
		{
			MethodName: "CreateL2ACLRule",
			Handler:    _CmlAclService_CreateL2ACLRule_Handler,
		},
		{
			MethodName: "DeleteL2ACLRule",
			Handler:    _CmlAclService_DeleteL2ACLRule_Handler,
		},
		{
			MethodName: "CreateArpACLRule",
			Handler:    _CmlAclService_CreateArpACLRule_Handler,
		},
		{
			MethodName: "DeleteArpACLRule",
			Handler:    _CmlAclService_DeleteArpACLRule_Handler,
		},
		{
			MethodName: "CreateMixedACLRule",
			Handler:    _CmlAclService_CreateMixedACLRule_Handler,
		},
		{
			MethodName: "DeleteMixedACLRule",
			Handler:    _CmlAclService_DeleteMixedACLRule_Handler,
		},
		{
			MethodName: "UpdateACLTable",
			Handler:    _CmlAclService_UpdateACLTable_Handler,
		},
		{
			MethodName: "DeleteACLTable",
			Handler:    _CmlAclService_DeleteACLTable_Handler,
		},
		{
			MethodName: "ShowACLRule",
			Handler:    _CmlAclService_ShowACLRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "acl.proto",
}
