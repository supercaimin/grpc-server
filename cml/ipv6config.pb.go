// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipv6config.proto

package cml

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//ipv6地址配置信息
type Ipv6Addrcfg struct {
	V6Addr               string   `protobuf:"bytes,1,opt,name=v6addr,proto3" json:"v6addr,omitempty"`
	V6Mask               string   `protobuf:"bytes,2,opt,name=v6mask,proto3" json:"v6mask,omitempty"`
	V6Prefixlen          int32    `protobuf:"varint,3,opt,name=v6prefixlen,proto3" json:"v6prefixlen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ipv6Addrcfg) Reset()         { *m = Ipv6Addrcfg{} }
func (m *Ipv6Addrcfg) String() string { return proto.CompactTextString(m) }
func (*Ipv6Addrcfg) ProtoMessage()    {}
func (*Ipv6Addrcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f1bd5b93cbe2bed, []int{0}
}

func (m *Ipv6Addrcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6Addrcfg.Unmarshal(m, b)
}
func (m *Ipv6Addrcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6Addrcfg.Marshal(b, m, deterministic)
}
func (m *Ipv6Addrcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6Addrcfg.Merge(m, src)
}
func (m *Ipv6Addrcfg) XXX_Size() int {
	return xxx_messageInfo_Ipv6Addrcfg.Size(m)
}
func (m *Ipv6Addrcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6Addrcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6Addrcfg proto.InternalMessageInfo

func (m *Ipv6Addrcfg) GetV6Addr() string {
	if m != nil {
		return m.V6Addr
	}
	return ""
}

func (m *Ipv6Addrcfg) GetV6Mask() string {
	if m != nil {
		return m.V6Mask
	}
	return ""
}

func (m *Ipv6Addrcfg) GetV6Prefixlen() int32 {
	if m != nil {
		return m.V6Prefixlen
	}
	return 0
}

//nd ra(Router advertise)报文发送间隔
type Ndraintervalcfg struct {
	Maxinterval          int32    `protobuf:"varint,1,opt,name=maxinterval,proto3" json:"maxinterval,omitempty"`
	Mininterval          int32    `protobuf:"varint,2,opt,name=mininterval,proto3" json:"mininterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ndraintervalcfg) Reset()         { *m = Ndraintervalcfg{} }
func (m *Ndraintervalcfg) String() string { return proto.CompactTextString(m) }
func (*Ndraintervalcfg) ProtoMessage()    {}
func (*Ndraintervalcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f1bd5b93cbe2bed, []int{1}
}

func (m *Ndraintervalcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ndraintervalcfg.Unmarshal(m, b)
}
func (m *Ndraintervalcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ndraintervalcfg.Marshal(b, m, deterministic)
}
func (m *Ndraintervalcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ndraintervalcfg.Merge(m, src)
}
func (m *Ndraintervalcfg) XXX_Size() int {
	return xxx_messageInfo_Ndraintervalcfg.Size(m)
}
func (m *Ndraintervalcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Ndraintervalcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Ndraintervalcfg proto.InternalMessageInfo

func (m *Ndraintervalcfg) GetMaxinterval() int32 {
	if m != nil {
		return m.Maxinterval
	}
	return 0
}

func (m *Ndraintervalcfg) GetMininterval() int32 {
	if m != nil {
		return m.Mininterval
	}
	return 0
}

//ipv6接口下的配置
type Ipv6Ifcfg struct {
	Ifname               string           `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Ipv6Enable           int32            `protobuf:"varint,2,opt,name=ipv6enable,proto3" json:"ipv6enable,omitempty"`
	Ipv6Mtu              int32            `protobuf:"varint,3,opt,name=ipv6mtu,proto3" json:"ipv6mtu,omitempty"`
	V6Addr               *Ipv6Addrcfg     `protobuf:"bytes,4,opt,name=v6addr,proto3" json:"v6addr,omitempty"`
	Anycastaddr          *Ipv6Addrcfg     `protobuf:"bytes,5,opt,name=anycastaddr,proto3" json:"anycastaddr,omitempty"`
	Autolinklocal        int32            `protobuf:"varint,6,opt,name=autolinklocal,proto3" json:"autolinklocal,omitempty"`
	Cgaaddr              *Ipv6Addrcfg     `protobuf:"bytes,7,opt,name=cgaaddr,proto3" json:"cgaaddr,omitempty"`
	Euiaddr              *Ipv6Addrcfg     `protobuf:"bytes,8,opt,name=euiaddr,proto3" json:"euiaddr,omitempty"`
	Linklocaladdr        *Ipv6Addrcfg     `protobuf:"bytes,9,opt,name=linklocaladdr,proto3" json:"linklocaladdr,omitempty"`
	Caglinklocaladdr     *Ipv6Addrcfg     `protobuf:"bytes,10,opt,name=caglinklocaladdr,proto3" json:"caglinklocaladdr,omitempty"`
	Ndautocfgflag        int32            `protobuf:"varint,11,opt,name=ndautocfgflag,proto3" json:"ndautocfgflag,omitempty"`
	Ndautodetect         int32            `protobuf:"varint,12,opt,name=ndautodetect,proto3" json:"ndautodetect,omitempty"`
	Rainterval           *Ndraintervalcfg `protobuf:"bytes,13,opt,name=rainterval,proto3" json:"rainterval,omitempty"`
	Updatetime           int64            `protobuf:"varint,14,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Ipv6Ifcfg) Reset()         { *m = Ipv6Ifcfg{} }
func (m *Ipv6Ifcfg) String() string { return proto.CompactTextString(m) }
func (*Ipv6Ifcfg) ProtoMessage()    {}
func (*Ipv6Ifcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f1bd5b93cbe2bed, []int{2}
}

func (m *Ipv6Ifcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ipv6Ifcfg.Unmarshal(m, b)
}
func (m *Ipv6Ifcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ipv6Ifcfg.Marshal(b, m, deterministic)
}
func (m *Ipv6Ifcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ipv6Ifcfg.Merge(m, src)
}
func (m *Ipv6Ifcfg) XXX_Size() int {
	return xxx_messageInfo_Ipv6Ifcfg.Size(m)
}
func (m *Ipv6Ifcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Ipv6Ifcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Ipv6Ifcfg proto.InternalMessageInfo

func (m *Ipv6Ifcfg) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *Ipv6Ifcfg) GetIpv6Enable() int32 {
	if m != nil {
		return m.Ipv6Enable
	}
	return 0
}

func (m *Ipv6Ifcfg) GetIpv6Mtu() int32 {
	if m != nil {
		return m.Ipv6Mtu
	}
	return 0
}

func (m *Ipv6Ifcfg) GetV6Addr() *Ipv6Addrcfg {
	if m != nil {
		return m.V6Addr
	}
	return nil
}

func (m *Ipv6Ifcfg) GetAnycastaddr() *Ipv6Addrcfg {
	if m != nil {
		return m.Anycastaddr
	}
	return nil
}

func (m *Ipv6Ifcfg) GetAutolinklocal() int32 {
	if m != nil {
		return m.Autolinklocal
	}
	return 0
}

func (m *Ipv6Ifcfg) GetCgaaddr() *Ipv6Addrcfg {
	if m != nil {
		return m.Cgaaddr
	}
	return nil
}

func (m *Ipv6Ifcfg) GetEuiaddr() *Ipv6Addrcfg {
	if m != nil {
		return m.Euiaddr
	}
	return nil
}

func (m *Ipv6Ifcfg) GetLinklocaladdr() *Ipv6Addrcfg {
	if m != nil {
		return m.Linklocaladdr
	}
	return nil
}

func (m *Ipv6Ifcfg) GetCaglinklocaladdr() *Ipv6Addrcfg {
	if m != nil {
		return m.Caglinklocaladdr
	}
	return nil
}

func (m *Ipv6Ifcfg) GetNdautocfgflag() int32 {
	if m != nil {
		return m.Ndautocfgflag
	}
	return 0
}

func (m *Ipv6Ifcfg) GetNdautodetect() int32 {
	if m != nil {
		return m.Ndautodetect
	}
	return 0
}

func (m *Ipv6Ifcfg) GetRainterval() *Ndraintervalcfg {
	if m != nil {
		return m.Rainterval
	}
	return nil
}

func (m *Ipv6Ifcfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

func init() {
	proto.RegisterType((*Ipv6Addrcfg)(nil), "cml.ipv6addrcfg")
	proto.RegisterType((*Ndraintervalcfg)(nil), "cml.ndraintervalcfg")
	proto.RegisterType((*Ipv6Ifcfg)(nil), "cml.ipv6ifcfg")
}

func init() {
	proto.RegisterFile("ipv6config.proto", fileDescriptor_4f1bd5b93cbe2bed)
}

var fileDescriptor_4f1bd5b93cbe2bed = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0xc9, 0x74, 0xda, 0xd2, 0x93, 0xde, 0x64, 0x21, 0x14, 0x75, 0x81, 0xa2, 0x88, 0x45,
	0xc4, 0xa2, 0x12, 0x05, 0xba, 0x62, 0x37, 0x6c, 0x66, 0x9b, 0x11, 0x6b, 0xe4, 0x71, 0x6c, 0x8f,
	0x35, 0xbe, 0x44, 0xa9, 0x9b, 0x29, 0x0f, 0xc5, 0xb3, 0xf0, 0x4a, 0xc8, 0xce, 0xa5, 0x09, 0x28,
	0x0b, 0x96, 0xff, 0xaf, 0xef, 0xf7, 0xb9, 0xe8, 0x18, 0xb6, 0xa2, 0xa8, 0x8e, 0xc4, 0x68, 0x26,
	0xf8, 0xbe, 0x28, 0x8d, 0x35, 0x68, 0x42, 0x94, 0xdc, 0x6d, 0x08, 0xe3, 0xc4, 0x28, 0x65, 0x74,
	0xed, 0x26, 0x3f, 0x20, 0x74, 0x24, 0xce, 0xf3, 0x92, 0x30, 0x8e, 0xde, 0xc2, 0xac, 0x16, 0x51,
	0x10, 0x07, 0xe9, 0x22, 0x6b, 0x54, 0xed, 0x2b, 0x7c, 0x7a, 0x8e, 0x6e, 0x5a, 0xdf, 0x29, 0x14,
	0x43, 0x58, 0x1d, 0x8b, 0x92, 0x32, 0x71, 0x91, 0x54, 0x47, 0x93, 0x38, 0x48, 0xa7, 0x59, 0xdf,
	0x4a, 0xbe, 0xc3, 0x46, 0xe7, 0x25, 0x16, 0xda, 0xd2, 0xb2, 0xc2, 0xd2, 0x15, 0x89, 0x21, 0x54,
	0xf8, 0xd2, 0x3a, 0xbe, 0xd2, 0x34, 0xeb, 0x5b, 0x9e, 0x10, 0xba, 0x23, 0x6e, 0x1a, 0xe2, 0x6a,
	0x25, 0xbf, 0x6f, 0x61, 0xe1, 0x1a, 0x17, 0xac, 0x69, 0x5b, 0x30, 0x8d, 0x15, 0x6d, 0xdb, 0xae,
	0x15, 0x7a, 0x07, 0xe0, 0x20, 0xaa, 0xf1, 0xa3, 0xa4, 0xcd, 0x33, 0x3d, 0x07, 0x45, 0x30, 0x77,
	0x4a, 0xd9, 0x73, 0xd3, 0x7a, 0x2b, 0x51, 0xda, 0x2d, 0xe2, 0x36, 0x0e, 0xd2, 0xf0, 0xb0, 0xdd,
	0x13, 0x25, 0xf7, 0xbd, 0x55, 0x75, 0xab, 0x39, 0x40, 0x88, 0xf5, 0x4f, 0x82, 0x4f, 0xd6, 0xe3,
	0xd3, 0x11, 0xbc, 0x0f, 0xa1, 0xf7, 0xb0, 0xc2, 0x67, 0x6b, 0xa4, 0xd0, 0xcf, 0xd2, 0x10, 0x2c,
	0xa3, 0x99, 0xaf, 0x3e, 0x34, 0xd1, 0x07, 0x98, 0x13, 0x8e, 0xfd, 0xab, 0xf3, 0x91, 0x57, 0x5b,
	0xc0, 0xb1, 0xf4, 0x2c, 0x3c, 0xfb, 0x7a, 0x8c, 0x6d, 0x00, 0x74, 0x84, 0x55, 0x57, 0xc4, 0x27,
	0x16, 0x23, 0x89, 0x21, 0x86, 0xbe, 0xc2, 0x96, 0x60, 0x3e, 0x8c, 0xc2, 0x48, 0xf4, 0x1f, 0xd2,
	0xcd, 0xac, 0x73, 0x37, 0x20, 0x61, 0x9c, 0x49, 0xcc, 0xa3, 0xb0, 0x9e, 0x79, 0x60, 0xa2, 0x04,
	0x96, 0xb5, 0x91, 0x53, 0x4b, 0x89, 0x8d, 0x96, 0x1e, 0x1a, 0x78, 0xe8, 0x33, 0xc0, 0xf5, 0xa0,
	0xa2, 0x95, 0xef, 0xe0, 0x8d, 0xef, 0xe0, 0xaf, 0x4b, 0xcb, 0x7a, 0x9c, 0xbb, 0x85, 0x73, 0x91,
	0x63, 0x4b, 0xad, 0x50, 0x34, 0x5a, 0xc7, 0x41, 0x3a, 0xc9, 0x7a, 0xce, 0xe1, 0x57, 0x00, 0xeb,
	0x3b, 0x25, 0xdd, 0x10, 0x27, 0x5a, 0x56, 0x82, 0x50, 0xf4, 0x11, 0x96, 0x0f, 0xd4, 0xde, 0x17,
	0xd5, 0xf1, 0x9e, 0xdd, 0x31, 0x8e, 0xd6, 0xdd, 0x98, 0xfe, 0xec, 0x76, 0x1b, 0xaf, 0x09, 0xe3,
	0xa5, 0xd5, 0x42, 0x33, 0x93, 0xbc, 0x72, 0x91, 0x6f, 0x54, 0xfe, 0x57, 0xe4, 0x0b, 0xac, 0x1e,
	0x9e, 0xcc, 0xcb, 0x35, 0x53, 0x6f, 0xf3, 0xf4, 0x64, 0x5e, 0x08, 0xe3, 0x0e, 0xda, 0x5d, 0x9d,
	0x2e, 0xf6, 0x38, 0xf3, 0x1f, 0xf8, 0xd3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x6d, 0x3f,
	0x5b, 0xea, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Cmlipv6ServiceClient is the client API for Cmlipv6Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Cmlipv6ServiceClient interface {
	//ipv6在接口下的配置
	SetIpv6IfCfg(ctx context.Context, in *Ipv6Ifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelIpv6IfCfg(ctx context.Context, in *Ipv6Ifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	ShowIpv6IfCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
}

type cmlipv6ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmlipv6ServiceClient(cc grpc.ClientConnInterface) Cmlipv6ServiceClient {
	return &cmlipv6ServiceClient{cc}
}

func (c *cmlipv6ServiceClient) SetIpv6IfCfg(ctx context.Context, in *Ipv6Ifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlipv6service/SetIpv6IfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlipv6ServiceClient) DelIpv6IfCfg(ctx context.Context, in *Ipv6Ifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlipv6service/DelIpv6IfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlipv6ServiceClient) ShowIpv6IfCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlipv6service/ShowIpv6IfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Cmlipv6ServiceServer is the server API for Cmlipv6Service service.
type Cmlipv6ServiceServer interface {
	//ipv6在接口下的配置
	SetIpv6IfCfg(context.Context, *Ipv6Ifcfg) (*Cfgrtninfo, error)
	DelIpv6IfCfg(context.Context, *Ipv6Ifcfg) (*Cfgrtninfo, error)
	ShowIpv6IfCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
}

// UnimplementedCmlipv6ServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCmlipv6ServiceServer struct {
}

func (*UnimplementedCmlipv6ServiceServer) SetIpv6IfCfg(ctx context.Context, req *Ipv6Ifcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpv6IfCfg not implemented")
}
func (*UnimplementedCmlipv6ServiceServer) DelIpv6IfCfg(ctx context.Context, req *Ipv6Ifcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIpv6IfCfg not implemented")
}
func (*UnimplementedCmlipv6ServiceServer) ShowIpv6IfCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowIpv6IfCfg not implemented")
}

func RegisterCmlipv6ServiceServer(s *grpc.Server, srv Cmlipv6ServiceServer) {
	s.RegisterService(&_Cmlipv6Service_serviceDesc, srv)
}

func _Cmlipv6Service_SetIpv6IfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ipv6Ifcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Cmlipv6ServiceServer).SetIpv6IfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlipv6service/SetIpv6IfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Cmlipv6ServiceServer).SetIpv6IfCfg(ctx, req.(*Ipv6Ifcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlipv6Service_DelIpv6IfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ipv6Ifcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Cmlipv6ServiceServer).DelIpv6IfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlipv6service/DelIpv6IfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Cmlipv6ServiceServer).DelIpv6IfCfg(ctx, req.(*Ipv6Ifcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlipv6Service_ShowIpv6IfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Cmlipv6ServiceServer).ShowIpv6IfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlipv6service/ShowIpv6IfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Cmlipv6ServiceServer).ShowIpv6IfCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmlipv6Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cml.Cmlipv6service",
	HandlerType: (*Cmlipv6ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIpv6IfCfg",
			Handler:    _Cmlipv6Service_SetIpv6IfCfg_Handler,
		},
		{
			MethodName: "DelIpv6IfCfg",
			Handler:    _Cmlipv6Service_DelIpv6IfCfg_Handler,
		},
		{
			MethodName: "ShowIpv6IfCfg",
			Handler:    _Cmlipv6Service_ShowIpv6IfCfg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipv6config.proto",
}
