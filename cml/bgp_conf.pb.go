// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgp_conf.proto

package cml

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BGP_TYPE int32

const (
	BGP_TYPE_EBGP BGP_TYPE = 0
	BGP_TYPE_IBGP BGP_TYPE = 1
)

var BGP_TYPE_name = map[int32]string{
	0: "EBGP",
	1: "IBGP",
}

var BGP_TYPE_value = map[string]int32{
	"EBGP": 0,
	"IBGP": 1,
}

func (x BGP_TYPE) String() string {
	return proto.EnumName(BGP_TYPE_name, int32(x))
}

func (BGP_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{0}
}

type EnableGlobalBgp struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnableGlobalBgp) Reset()         { *m = EnableGlobalBgp{} }
func (m *EnableGlobalBgp) String() string { return proto.CompactTextString(m) }
func (*EnableGlobalBgp) ProtoMessage()    {}
func (*EnableGlobalBgp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{0}
}

func (m *EnableGlobalBgp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnableGlobalBgp.Unmarshal(m, b)
}
func (m *EnableGlobalBgp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnableGlobalBgp.Marshal(b, m, deterministic)
}
func (m *EnableGlobalBgp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnableGlobalBgp.Merge(m, src)
}
func (m *EnableGlobalBgp) XXX_Size() int {
	return xxx_messageInfo_EnableGlobalBgp.Size(m)
}
func (m *EnableGlobalBgp) XXX_DiscardUnknown() {
	xxx_messageInfo_EnableGlobalBgp.DiscardUnknown(m)
}

var xxx_messageInfo_EnableGlobalBgp proto.InternalMessageInfo

func (m *EnableGlobalBgp) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

//BGP实例相关消息定义
type BgpInst struct {
	InstId               int32    `protobuf:"varint,1,opt,name=inst_id,json=instId,proto3" json:"inst_id,omitempty"`
	InstName             string   `protobuf:"bytes,2,opt,name=inst_name,json=instName,proto3" json:"inst_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpInst) Reset()         { *m = BgpInst{} }
func (m *BgpInst) String() string { return proto.CompactTextString(m) }
func (*BgpInst) ProtoMessage()    {}
func (*BgpInst) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{1}
}

func (m *BgpInst) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpInst.Unmarshal(m, b)
}
func (m *BgpInst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpInst.Marshal(b, m, deterministic)
}
func (m *BgpInst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpInst.Merge(m, src)
}
func (m *BgpInst) XXX_Size() int {
	return xxx_messageInfo_BgpInst.Size(m)
}
func (m *BgpInst) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpInst.DiscardUnknown(m)
}

var xxx_messageInfo_BgpInst proto.InternalMessageInfo

func (m *BgpInst) GetInstId() int32 {
	if m != nil {
		return m.InstId
	}
	return 0
}

func (m *BgpInst) GetInstName() string {
	if m != nil {
		return m.InstName
	}
	return ""
}

type BgpInstResp struct {
	BgpInsts             []*BgpInst `protobuf:"bytes,1,rep,name=bgpInsts,proto3" json:"bgpInsts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BgpInstResp) Reset()         { *m = BgpInstResp{} }
func (m *BgpInstResp) String() string { return proto.CompactTextString(m) }
func (*BgpInstResp) ProtoMessage()    {}
func (*BgpInstResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{2}
}

func (m *BgpInstResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpInstResp.Unmarshal(m, b)
}
func (m *BgpInstResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpInstResp.Marshal(b, m, deterministic)
}
func (m *BgpInstResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpInstResp.Merge(m, src)
}
func (m *BgpInstResp) XXX_Size() int {
	return xxx_messageInfo_BgpInstResp.Size(m)
}
func (m *BgpInstResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpInstResp.DiscardUnknown(m)
}

var xxx_messageInfo_BgpInstResp proto.InternalMessageInfo

func (m *BgpInstResp) GetBgpInsts() []*BgpInst {
	if m != nil {
		return m.BgpInsts
	}
	return nil
}

type BgpBfdConf struct {
	BfdMinTx             int32    `protobuf:"varint,1,opt,name=bfd_min_tx,json=bfdMinTx,proto3" json:"bfd_min_tx,omitempty"`
	BfdMinRx             int32    `protobuf:"varint,2,opt,name=bfd_min_rx,json=bfdMinRx,proto3" json:"bfd_min_rx,omitempty"`
	BfdMultiplierTx      int32    `protobuf:"varint,3,opt,name=bfd_multiplier_tx,json=bfdMultiplierTx,proto3" json:"bfd_multiplier_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BgpBfdConf) Reset()         { *m = BgpBfdConf{} }
func (m *BgpBfdConf) String() string { return proto.CompactTextString(m) }
func (*BgpBfdConf) ProtoMessage()    {}
func (*BgpBfdConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{3}
}

func (m *BgpBfdConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpBfdConf.Unmarshal(m, b)
}
func (m *BgpBfdConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpBfdConf.Marshal(b, m, deterministic)
}
func (m *BgpBfdConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpBfdConf.Merge(m, src)
}
func (m *BgpBfdConf) XXX_Size() int {
	return xxx_messageInfo_BgpBfdConf.Size(m)
}
func (m *BgpBfdConf) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpBfdConf.DiscardUnknown(m)
}

var xxx_messageInfo_BgpBfdConf proto.InternalMessageInfo

func (m *BgpBfdConf) GetBfdMinTx() int32 {
	if m != nil {
		return m.BfdMinTx
	}
	return 0
}

func (m *BgpBfdConf) GetBfdMinRx() int32 {
	if m != nil {
		return m.BfdMinRx
	}
	return 0
}

func (m *BgpBfdConf) GetBfdMultiplierTx() int32 {
	if m != nil {
		return m.BfdMultiplierTx
	}
	return 0
}

//BGP对等体组相关消息定义
type PeerGroup struct {
	GroupName            string   `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Type                 BGP_TYPE `protobuf:"varint,2,opt,name=type,proto3,enum=cml.BGP_TYPE" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerGroup) Reset()         { *m = PeerGroup{} }
func (m *PeerGroup) String() string { return proto.CompactTextString(m) }
func (*PeerGroup) ProtoMessage()    {}
func (*PeerGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{4}
}

func (m *PeerGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerGroup.Unmarshal(m, b)
}
func (m *PeerGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerGroup.Marshal(b, m, deterministic)
}
func (m *PeerGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerGroup.Merge(m, src)
}
func (m *PeerGroup) XXX_Size() int {
	return xxx_messageInfo_PeerGroup.Size(m)
}
func (m *PeerGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerGroup.DiscardUnknown(m)
}

var xxx_messageInfo_PeerGroup proto.InternalMessageInfo

func (m *PeerGroup) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *PeerGroup) GetType() BGP_TYPE {
	if m != nil {
		return m.Type
	}
	return BGP_TYPE_EBGP
}

type PeerGroupResp struct {
	BgpPgs               []*PeerGroup `protobuf:"bytes,1,rep,name=bgpPgs,proto3" json:"bgpPgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PeerGroupResp) Reset()         { *m = PeerGroupResp{} }
func (m *PeerGroupResp) String() string { return proto.CompactTextString(m) }
func (*PeerGroupResp) ProtoMessage()    {}
func (*PeerGroupResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{5}
}

func (m *PeerGroupResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerGroupResp.Unmarshal(m, b)
}
func (m *PeerGroupResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerGroupResp.Marshal(b, m, deterministic)
}
func (m *PeerGroupResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerGroupResp.Merge(m, src)
}
func (m *PeerGroupResp) XXX_Size() int {
	return xxx_messageInfo_PeerGroupResp.Size(m)
}
func (m *PeerGroupResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerGroupResp.DiscardUnknown(m)
}

var xxx_messageInfo_PeerGroupResp proto.InternalMessageInfo

func (m *PeerGroupResp) GetBgpPgs() []*PeerGroup {
	if m != nil {
		return m.BgpPgs
	}
	return nil
}

//BGP实例相关消息定义
type BgpPeer struct {
	BgpInstName          string      `protobuf:"bytes,1,opt,name=bgp_inst_name,json=bgpInstName,proto3" json:"bgp_inst_name,omitempty"`
	Vrf                  int32       `protobuf:"varint,2,opt,name=vrf,proto3" json:"vrf,omitempty"`
	GroupName            string      `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	PeerIp               string      `protobuf:"bytes,4,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	AsNum                uint32      `protobuf:"varint,5,opt,name=as_num,json=asNum,proto3" json:"as_num,omitempty"`
	BfdConf              *BgpBfdConf `protobuf:"bytes,6,opt,name=bfd_conf,json=bfdConf,proto3" json:"bfd_conf,omitempty"`
	KeepaliveTimer       int32       `protobuf:"varint,7,opt,name=keepaliveTimer,proto3" json:"keepaliveTimer,omitempty"`
	HoldTimer            int32       `protobuf:"varint,8,opt,name=holdTimer,proto3" json:"holdTimer,omitempty"`
	MinHoldTimer         int32       `protobuf:"varint,9,opt,name=minHoldTimer,proto3" json:"minHoldTimer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BgpPeer) Reset()         { *m = BgpPeer{} }
func (m *BgpPeer) String() string { return proto.CompactTextString(m) }
func (*BgpPeer) ProtoMessage()    {}
func (*BgpPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{6}
}

func (m *BgpPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPeer.Unmarshal(m, b)
}
func (m *BgpPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPeer.Marshal(b, m, deterministic)
}
func (m *BgpPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPeer.Merge(m, src)
}
func (m *BgpPeer) XXX_Size() int {
	return xxx_messageInfo_BgpPeer.Size(m)
}
func (m *BgpPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPeer.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPeer proto.InternalMessageInfo

func (m *BgpPeer) GetBgpInstName() string {
	if m != nil {
		return m.BgpInstName
	}
	return ""
}

func (m *BgpPeer) GetVrf() int32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *BgpPeer) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *BgpPeer) GetPeerIp() string {
	if m != nil {
		return m.PeerIp
	}
	return ""
}

func (m *BgpPeer) GetAsNum() uint32 {
	if m != nil {
		return m.AsNum
	}
	return 0
}

func (m *BgpPeer) GetBfdConf() *BgpBfdConf {
	if m != nil {
		return m.BfdConf
	}
	return nil
}

func (m *BgpPeer) GetKeepaliveTimer() int32 {
	if m != nil {
		return m.KeepaliveTimer
	}
	return 0
}

func (m *BgpPeer) GetHoldTimer() int32 {
	if m != nil {
		return m.HoldTimer
	}
	return 0
}

func (m *BgpPeer) GetMinHoldTimer() int32 {
	if m != nil {
		return m.MinHoldTimer
	}
	return 0
}

type BgpPeerResp struct {
	BgpPeers             []*BgpPeer `protobuf:"bytes,1,rep,name=bgpPeers,proto3" json:"bgpPeers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BgpPeerResp) Reset()         { *m = BgpPeerResp{} }
func (m *BgpPeerResp) String() string { return proto.CompactTextString(m) }
func (*BgpPeerResp) ProtoMessage()    {}
func (*BgpPeerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{7}
}

func (m *BgpPeerResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BgpPeerResp.Unmarshal(m, b)
}
func (m *BgpPeerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BgpPeerResp.Marshal(b, m, deterministic)
}
func (m *BgpPeerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BgpPeerResp.Merge(m, src)
}
func (m *BgpPeerResp) XXX_Size() int {
	return xxx_messageInfo_BgpPeerResp.Size(m)
}
func (m *BgpPeerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BgpPeerResp.DiscardUnknown(m)
}

var xxx_messageInfo_BgpPeerResp proto.InternalMessageInfo

func (m *BgpPeerResp) GetBgpPeers() []*BgpPeer {
	if m != nil {
		return m.BgpPeers
	}
	return nil
}

type VPNInstance struct {
	BgpInstName          string   `protobuf:"bytes,1,opt,name=bgp_inst_name,json=bgpInstName,proto3" json:"bgp_inst_name,omitempty"`
	VpnInstName          string   `protobuf:"bytes,2,opt,name=vpn_inst_name,json=vpnInstName,proto3" json:"vpn_inst_name,omitempty"`
	VrfName              string   `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	Rd                   uint64   `protobuf:"varint,4,opt,name=rd,proto3" json:"rd,omitempty"`
	ExportRt             uint64   `protobuf:"varint,5,opt,name=export_rt,json=exportRt,proto3" json:"export_rt,omitempty"`
	ImportRts            []uint64 `protobuf:"varint,6,rep,packed,name=import_rts,json=importRts,proto3" json:"import_rts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VPNInstance) Reset()         { *m = VPNInstance{} }
func (m *VPNInstance) String() string { return proto.CompactTextString(m) }
func (*VPNInstance) ProtoMessage()    {}
func (*VPNInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{8}
}

func (m *VPNInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPNInstance.Unmarshal(m, b)
}
func (m *VPNInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPNInstance.Marshal(b, m, deterministic)
}
func (m *VPNInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPNInstance.Merge(m, src)
}
func (m *VPNInstance) XXX_Size() int {
	return xxx_messageInfo_VPNInstance.Size(m)
}
func (m *VPNInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_VPNInstance.DiscardUnknown(m)
}

var xxx_messageInfo_VPNInstance proto.InternalMessageInfo

func (m *VPNInstance) GetBgpInstName() string {
	if m != nil {
		return m.BgpInstName
	}
	return ""
}

func (m *VPNInstance) GetVpnInstName() string {
	if m != nil {
		return m.VpnInstName
	}
	return ""
}

func (m *VPNInstance) GetVrfName() string {
	if m != nil {
		return m.VrfName
	}
	return ""
}

func (m *VPNInstance) GetRd() uint64 {
	if m != nil {
		return m.Rd
	}
	return 0
}

func (m *VPNInstance) GetExportRt() uint64 {
	if m != nil {
		return m.ExportRt
	}
	return 0
}

func (m *VPNInstance) GetImportRts() []uint64 {
	if m != nil {
		return m.ImportRts
	}
	return nil
}

type VPNInstanceResp struct {
	VpnInsts             []*VPNInstance `protobuf:"bytes,1,rep,name=vpnInsts,proto3" json:"vpnInsts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VPNInstanceResp) Reset()         { *m = VPNInstanceResp{} }
func (m *VPNInstanceResp) String() string { return proto.CompactTextString(m) }
func (*VPNInstanceResp) ProtoMessage()    {}
func (*VPNInstanceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{9}
}

func (m *VPNInstanceResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VPNInstanceResp.Unmarshal(m, b)
}
func (m *VPNInstanceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VPNInstanceResp.Marshal(b, m, deterministic)
}
func (m *VPNInstanceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VPNInstanceResp.Merge(m, src)
}
func (m *VPNInstanceResp) XXX_Size() int {
	return xxx_messageInfo_VPNInstanceResp.Size(m)
}
func (m *VPNInstanceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VPNInstanceResp.DiscardUnknown(m)
}

var xxx_messageInfo_VPNInstanceResp proto.InternalMessageInfo

func (m *VPNInstanceResp) GetVpnInsts() []*VPNInstance {
	if m != nil {
		return m.VpnInsts
	}
	return nil
}

//EVPN实例配置
type EVPNInstance struct {
	VpnInstName          string   `protobuf:"bytes,1,opt,name=vpn_inst_name,json=vpnInstName,proto3" json:"vpn_inst_name,omitempty"`
	BdNum                int32    `protobuf:"varint,2,opt,name=bd_num,json=bdNum,proto3" json:"bd_num,omitempty"`
	L2Vnet               int32    `protobuf:"varint,3,opt,name=l2vnet,proto3" json:"l2vnet,omitempty"`
	ArpProxyEnabled      bool     `protobuf:"varint,4,opt,name=arp_proxy_enabled,json=arpProxyEnabled,proto3" json:"arp_proxy_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EVPNInstance) Reset()         { *m = EVPNInstance{} }
func (m *EVPNInstance) String() string { return proto.CompactTextString(m) }
func (*EVPNInstance) ProtoMessage()    {}
func (*EVPNInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{10}
}

func (m *EVPNInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVPNInstance.Unmarshal(m, b)
}
func (m *EVPNInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVPNInstance.Marshal(b, m, deterministic)
}
func (m *EVPNInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVPNInstance.Merge(m, src)
}
func (m *EVPNInstance) XXX_Size() int {
	return xxx_messageInfo_EVPNInstance.Size(m)
}
func (m *EVPNInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_EVPNInstance.DiscardUnknown(m)
}

var xxx_messageInfo_EVPNInstance proto.InternalMessageInfo

func (m *EVPNInstance) GetVpnInstName() string {
	if m != nil {
		return m.VpnInstName
	}
	return ""
}

func (m *EVPNInstance) GetBdNum() int32 {
	if m != nil {
		return m.BdNum
	}
	return 0
}

func (m *EVPNInstance) GetL2Vnet() int32 {
	if m != nil {
		return m.L2Vnet
	}
	return 0
}

func (m *EVPNInstance) GetArpProxyEnabled() bool {
	if m != nil {
		return m.ArpProxyEnabled
	}
	return false
}

type EVPNInstanceResp struct {
	EvpnInsts            []*EVPNInstance `protobuf:"bytes,1,rep,name=evpnInsts,proto3" json:"evpnInsts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EVPNInstanceResp) Reset()         { *m = EVPNInstanceResp{} }
func (m *EVPNInstanceResp) String() string { return proto.CompactTextString(m) }
func (*EVPNInstanceResp) ProtoMessage()    {}
func (*EVPNInstanceResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{11}
}

func (m *EVPNInstanceResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVPNInstanceResp.Unmarshal(m, b)
}
func (m *EVPNInstanceResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVPNInstanceResp.Marshal(b, m, deterministic)
}
func (m *EVPNInstanceResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVPNInstanceResp.Merge(m, src)
}
func (m *EVPNInstanceResp) XXX_Size() int {
	return xxx_messageInfo_EVPNInstanceResp.Size(m)
}
func (m *EVPNInstanceResp) XXX_DiscardUnknown() {
	xxx_messageInfo_EVPNInstanceResp.DiscardUnknown(m)
}

var xxx_messageInfo_EVPNInstanceResp proto.InternalMessageInfo

func (m *EVPNInstanceResp) GetEvpnInsts() []*EVPNInstance {
	if m != nil {
		return m.EvpnInsts
	}
	return nil
}

//vbdif接口
type VBDIF struct {
	VpnInstName          string   `protobuf:"bytes,1,opt,name=vpn_inst_name,json=vpnInstName,proto3" json:"vpn_inst_name,omitempty"`
	BdNum                int32    `protobuf:"varint,2,opt,name=bd_num,json=bdNum,proto3" json:"bd_num,omitempty"`
	BdifName             string   `protobuf:"bytes,3,opt,name=bdif_name,json=bdifName,proto3" json:"bdif_name,omitempty"`
	IpAddr               string   `protobuf:"bytes,4,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	MaskLen              int32    `protobuf:"varint,5,opt,name=mask_len,json=maskLen,proto3" json:"mask_len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VBDIF) Reset()         { *m = VBDIF{} }
func (m *VBDIF) String() string { return proto.CompactTextString(m) }
func (*VBDIF) ProtoMessage()    {}
func (*VBDIF) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{12}
}

func (m *VBDIF) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VBDIF.Unmarshal(m, b)
}
func (m *VBDIF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VBDIF.Marshal(b, m, deterministic)
}
func (m *VBDIF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VBDIF.Merge(m, src)
}
func (m *VBDIF) XXX_Size() int {
	return xxx_messageInfo_VBDIF.Size(m)
}
func (m *VBDIF) XXX_DiscardUnknown() {
	xxx_messageInfo_VBDIF.DiscardUnknown(m)
}

var xxx_messageInfo_VBDIF proto.InternalMessageInfo

func (m *VBDIF) GetVpnInstName() string {
	if m != nil {
		return m.VpnInstName
	}
	return ""
}

func (m *VBDIF) GetBdNum() int32 {
	if m != nil {
		return m.BdNum
	}
	return 0
}

func (m *VBDIF) GetBdifName() string {
	if m != nil {
		return m.BdifName
	}
	return ""
}

func (m *VBDIF) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *VBDIF) GetMaskLen() int32 {
	if m != nil {
		return m.MaskLen
	}
	return 0
}

type VBDIFList struct {
	Bdifs                []*VBDIF `protobuf:"bytes,1,rep,name=bdifs,proto3" json:"bdifs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VBDIFList) Reset()         { *m = VBDIFList{} }
func (m *VBDIFList) String() string { return proto.CompactTextString(m) }
func (*VBDIFList) ProtoMessage()    {}
func (*VBDIFList) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{13}
}

func (m *VBDIFList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VBDIFList.Unmarshal(m, b)
}
func (m *VBDIFList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VBDIFList.Marshal(b, m, deterministic)
}
func (m *VBDIFList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VBDIFList.Merge(m, src)
}
func (m *VBDIFList) XXX_Size() int {
	return xxx_messageInfo_VBDIFList.Size(m)
}
func (m *VBDIFList) XXX_DiscardUnknown() {
	xxx_messageInfo_VBDIFList.DiscardUnknown(m)
}

var xxx_messageInfo_VBDIFList proto.InternalMessageInfo

func (m *VBDIFList) GetBdifs() []*VBDIF {
	if m != nil {
		return m.Bdifs
	}
	return nil
}

//VLAN和EVPN实例绑定关系
type EVPNVlanBinding struct {
	VpnInstName          string   `protobuf:"bytes,1,opt,name=vpn_inst_name,json=vpnInstName,proto3" json:"vpn_inst_name,omitempty"`
	BdNum                int32    `protobuf:"varint,2,opt,name=bd_num,json=bdNum,proto3" json:"bd_num,omitempty"`
	VlanId               int32    `protobuf:"varint,3,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EVPNVlanBinding) Reset()         { *m = EVPNVlanBinding{} }
func (m *EVPNVlanBinding) String() string { return proto.CompactTextString(m) }
func (*EVPNVlanBinding) ProtoMessage()    {}
func (*EVPNVlanBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{14}
}

func (m *EVPNVlanBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVPNVlanBinding.Unmarshal(m, b)
}
func (m *EVPNVlanBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVPNVlanBinding.Marshal(b, m, deterministic)
}
func (m *EVPNVlanBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVPNVlanBinding.Merge(m, src)
}
func (m *EVPNVlanBinding) XXX_Size() int {
	return xxx_messageInfo_EVPNVlanBinding.Size(m)
}
func (m *EVPNVlanBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_EVPNVlanBinding.DiscardUnknown(m)
}

var xxx_messageInfo_EVPNVlanBinding proto.InternalMessageInfo

func (m *EVPNVlanBinding) GetVpnInstName() string {
	if m != nil {
		return m.VpnInstName
	}
	return ""
}

func (m *EVPNVlanBinding) GetBdNum() int32 {
	if m != nil {
		return m.BdNum
	}
	return 0
}

func (m *EVPNVlanBinding) GetVlanId() int32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

type EVPNVlanList struct {
	Vlans                []*EVPNVlanBinding `protobuf:"bytes,1,rep,name=vlans,proto3" json:"vlans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EVPNVlanList) Reset()         { *m = EVPNVlanList{} }
func (m *EVPNVlanList) String() string { return proto.CompactTextString(m) }
func (*EVPNVlanList) ProtoMessage()    {}
func (*EVPNVlanList) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{15}
}

func (m *EVPNVlanList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVPNVlanList.Unmarshal(m, b)
}
func (m *EVPNVlanList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVPNVlanList.Marshal(b, m, deterministic)
}
func (m *EVPNVlanList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVPNVlanList.Merge(m, src)
}
func (m *EVPNVlanList) XXX_Size() int {
	return xxx_messageInfo_EVPNVlanList.Size(m)
}
func (m *EVPNVlanList) XXX_DiscardUnknown() {
	xxx_messageInfo_EVPNVlanList.DiscardUnknown(m)
}

var xxx_messageInfo_EVPNVlanList proto.InternalMessageInfo

func (m *EVPNVlanList) GetVlans() []*EVPNVlanBinding {
	if m != nil {
		return m.Vlans
	}
	return nil
}

//端口和EVPN实例绑定关系
type EVPNPortBinding struct {
	VpnInstName          string   `protobuf:"bytes,1,opt,name=vpn_inst_name,json=vpnInstName,proto3" json:"vpn_inst_name,omitempty"`
	BdNum                int32    `protobuf:"varint,2,opt,name=bd_num,json=bdNum,proto3" json:"bd_num,omitempty"`
	PortName             string   `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	VlanId               int32    `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EVPNPortBinding) Reset()         { *m = EVPNPortBinding{} }
func (m *EVPNPortBinding) String() string { return proto.CompactTextString(m) }
func (*EVPNPortBinding) ProtoMessage()    {}
func (*EVPNPortBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{16}
}

func (m *EVPNPortBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVPNPortBinding.Unmarshal(m, b)
}
func (m *EVPNPortBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVPNPortBinding.Marshal(b, m, deterministic)
}
func (m *EVPNPortBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVPNPortBinding.Merge(m, src)
}
func (m *EVPNPortBinding) XXX_Size() int {
	return xxx_messageInfo_EVPNPortBinding.Size(m)
}
func (m *EVPNPortBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_EVPNPortBinding.DiscardUnknown(m)
}

var xxx_messageInfo_EVPNPortBinding proto.InternalMessageInfo

func (m *EVPNPortBinding) GetVpnInstName() string {
	if m != nil {
		return m.VpnInstName
	}
	return ""
}

func (m *EVPNPortBinding) GetBdNum() int32 {
	if m != nil {
		return m.BdNum
	}
	return 0
}

func (m *EVPNPortBinding) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

func (m *EVPNPortBinding) GetVlanId() int32 {
	if m != nil {
		return m.VlanId
	}
	return 0
}

type EVPNPortList struct {
	Ports                []*EVPNPortBinding `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EVPNPortList) Reset()         { *m = EVPNPortList{} }
func (m *EVPNPortList) String() string { return proto.CompactTextString(m) }
func (*EVPNPortList) ProtoMessage()    {}
func (*EVPNPortList) Descriptor() ([]byte, []int) {
	return fileDescriptor_73940b0829de9a52, []int{17}
}

func (m *EVPNPortList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EVPNPortList.Unmarshal(m, b)
}
func (m *EVPNPortList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EVPNPortList.Marshal(b, m, deterministic)
}
func (m *EVPNPortList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVPNPortList.Merge(m, src)
}
func (m *EVPNPortList) XXX_Size() int {
	return xxx_messageInfo_EVPNPortList.Size(m)
}
func (m *EVPNPortList) XXX_DiscardUnknown() {
	xxx_messageInfo_EVPNPortList.DiscardUnknown(m)
}

var xxx_messageInfo_EVPNPortList proto.InternalMessageInfo

func (m *EVPNPortList) GetPorts() []*EVPNPortBinding {
	if m != nil {
		return m.Ports
	}
	return nil
}

func init() {
	proto.RegisterEnum("cml.BGP_TYPE", BGP_TYPE_name, BGP_TYPE_value)
	proto.RegisterType((*EnableGlobalBgp)(nil), "cml.EnableGlobalBgp")
	proto.RegisterType((*BgpInst)(nil), "cml.BgpInst")
	proto.RegisterType((*BgpInstResp)(nil), "cml.BgpInstResp")
	proto.RegisterType((*BgpBfdConf)(nil), "cml.BgpBfdConf")
	proto.RegisterType((*PeerGroup)(nil), "cml.PeerGroup")
	proto.RegisterType((*PeerGroupResp)(nil), "cml.PeerGroupResp")
	proto.RegisterType((*BgpPeer)(nil), "cml.BgpPeer")
	proto.RegisterType((*BgpPeerResp)(nil), "cml.BgpPeerResp")
	proto.RegisterType((*VPNInstance)(nil), "cml.VPNInstance")
	proto.RegisterType((*VPNInstanceResp)(nil), "cml.VPNInstanceResp")
	proto.RegisterType((*EVPNInstance)(nil), "cml.EVPNInstance")
	proto.RegisterType((*EVPNInstanceResp)(nil), "cml.EVPNInstanceResp")
	proto.RegisterType((*VBDIF)(nil), "cml.VBDIF")
	proto.RegisterType((*VBDIFList)(nil), "cml.VBDIFList")
	proto.RegisterType((*EVPNVlanBinding)(nil), "cml.EVPNVlanBinding")
	proto.RegisterType((*EVPNVlanList)(nil), "cml.EVPNVlanList")
	proto.RegisterType((*EVPNPortBinding)(nil), "cml.EVPNPortBinding")
	proto.RegisterType((*EVPNPortList)(nil), "cml.EVPNPortList")
}

func init() {
	proto.RegisterFile("bgp_conf.proto", fileDescriptor_73940b0829de9a52)
}

var fileDescriptor_73940b0829de9a52 = []byte{
	// 1143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0xad, 0x27, 0xaf, 0xac, 0x87, 0xa7, 0x71, 0xad, 0xc6, 0x69, 0xa1, 0xce, 0x22, 0x50,
	0xdd, 0xd6, 0x06, 0x1c, 0xa0, 0x4e, 0x02, 0x14, 0x69, 0xa5, 0xa8, 0x8e, 0x80, 0xc4, 0x10, 0x68,
	0xd7, 0x40, 0x57, 0x04, 0x29, 0x8e, 0x64, 0x22, 0xe4, 0x70, 0x30, 0xa4, 0x15, 0x65, 0xdb, 0x7d,
	0x57, 0xfd, 0x85, 0x7e, 0x46, 0xff, 0xa4, 0x3f, 0x53, 0xcc, 0x0c, 0x49, 0x91, 0x7a, 0x24, 0xb6,
	0x93, 0x9d, 0xe6, 0x3e, 0x66, 0xce, 0x39, 0xf7, 0xf2, 0x5e, 0x08, 0x1a, 0xf6, 0x94, 0x99, 0xe3,
	0x80, 0x4e, 0x8e, 0x18, 0x0f, 0xa2, 0x00, 0x15, 0xc6, 0xbe, 0xf7, 0xb0, 0x35, 0x0e, 0x7c, 0xdf,
	0x8c, 0xde, 0x33, 0x12, 0x2a, 0x33, 0xfe, 0x1e, 0x9a, 0x03, 0x6a, 0xd9, 0x1e, 0x39, 0xf3, 0x02,
	0xdb, 0xf2, 0x7a, 0x53, 0x86, 0xda, 0x50, 0x21, 0xd2, 0xe4, 0xb4, 0xb5, 0x8e, 0xd6, 0xad, 0x1a,
	0xc9, 0x11, 0xbf, 0x80, 0x4a, 0x6f, 0xca, 0x86, 0x34, 0x8c, 0xd0, 0x3e, 0x54, 0x5c, 0x1a, 0x46,
	0xa6, 0xab, 0x82, 0x4a, 0x46, 0x59, 0x1c, 0x87, 0x0e, 0x3a, 0x00, 0x5d, 0x3a, 0xa8, 0xe5, 0x93,
	0xf6, 0x76, 0x47, 0xeb, 0xea, 0x46, 0x55, 0x18, 0xce, 0x2d, 0x9f, 0xe0, 0x53, 0xa8, 0xc5, 0x17,
	0x18, 0x24, 0x64, 0xa8, 0x0b, 0x55, 0x5b, 0x1d, 0xc3, 0xb6, 0xd6, 0x29, 0x74, 0x6b, 0x27, 0x3b,
	0x47, 0x63, 0xdf, 0x3b, 0x4a, 0x62, 0x52, 0x2f, 0x8e, 0x00, 0x7a, 0x53, 0xd6, 0x9b, 0x38, 0xfd,
	0x80, 0x4e, 0xd0, 0x23, 0x00, 0x7b, 0xe2, 0x98, 0xbe, 0x4b, 0xcd, 0x68, 0x1e, 0xbf, 0x5f, 0xb5,
	0x27, 0xce, 0x1b, 0x97, 0x5e, 0xce, 0xb3, 0x5e, 0x3e, 0x97, 0x10, 0x52, 0xaf, 0x31, 0x47, 0x87,
	0xb0, 0x2b, 0xbd, 0x37, 0x5e, 0xe4, 0x32, 0xcf, 0x25, 0x5c, 0x5c, 0x51, 0x90, 0x41, 0x4d, 0x11,
	0x94, 0xda, 0x2f, 0xe7, 0xf8, 0x0d, 0xe8, 0x23, 0x42, 0xf8, 0x19, 0x0f, 0x6e, 0x18, 0xfa, 0x1a,
	0x60, 0x2a, 0x7e, 0x28, 0x66, 0x9a, 0x64, 0xa6, 0x4b, 0x8b, 0xa0, 0x86, 0xbe, 0x85, 0xa2, 0xd0,
	0x55, 0xbe, 0xd7, 0x38, 0xa9, 0x2b, 0x1e, 0x67, 0x23, 0xf3, 0xf2, 0x8f, 0xd1, 0xc0, 0x90, 0x2e,
	0x7c, 0x0a, 0xf5, 0xf4, 0x3a, 0xc9, 0xff, 0x31, 0x94, 0xed, 0x29, 0x1b, 0x4d, 0x13, 0xf6, 0x0d,
	0x99, 0xb5, 0x88, 0x89, 0xbd, 0xf8, 0x9f, 0x6d, 0x29, 0xbc, 0x70, 0x20, 0x0c, 0x75, 0x51, 0xd9,
	0x85, 0xc6, 0x0a, 0x49, 0x2d, 0x96, 0x4a, 0x62, 0x69, 0x41, 0x61, 0xc6, 0x27, 0x31, 0x75, 0xf1,
	0x73, 0x09, 0x7c, 0x61, 0x19, 0xfc, 0x3e, 0x54, 0x18, 0x21, 0xdc, 0x74, 0x59, 0xbb, 0x28, 0x7d,
	0x65, 0x71, 0x1c, 0x32, 0xb4, 0x07, 0x65, 0x2b, 0x34, 0xe9, 0x8d, 0xdf, 0x2e, 0x75, 0xb4, 0x6e,
	0xdd, 0x28, 0x59, 0xe1, 0xf9, 0x8d, 0x8f, 0x0e, 0x41, 0x08, 0x2a, 0xdb, 0xab, 0x5d, 0xee, 0x68,
	0xdd, 0xda, 0x49, 0x33, 0x29, 0x5c, 0x5c, 0x23, 0xa3, 0x62, 0xc7, 0xc5, 0x7a, 0x0c, 0x8d, 0xb7,
	0x84, 0x30, 0xcb, 0x73, 0x67, 0xe4, 0xd2, 0xf5, 0x09, 0x6f, 0x57, 0x24, 0xae, 0x25, 0x2b, 0x7a,
	0x04, 0xfa, 0x75, 0xe0, 0x39, 0x2a, 0xa4, 0x2a, 0x43, 0x16, 0x06, 0x84, 0x61, 0xc7, 0x77, 0xe9,
	0xab, 0x34, 0x40, 0x97, 0x01, 0x39, 0x5b, 0xdc, 0x5d, 0x42, 0xa5, 0x4c, 0x77, 0x89, 0xe3, 0x4a,
	0x77, 0xc9, 0x98, 0xd4, 0x8b, 0xff, 0xd5, 0xa0, 0x76, 0x35, 0x3a, 0x17, 0xfa, 0x59, 0x74, 0x4c,
	0x6e, 0xa5, 0x31, 0x86, 0xfa, 0x8c, 0x51, 0x73, 0xb9, 0xd7, 0x6b, 0x33, 0x46, 0xd3, 0x98, 0xaf,
	0xa0, 0x3a, 0xe3, 0x93, 0xac, 0xe6, 0x95, 0x19, 0x9f, 0x48, 0x57, 0x03, 0xb6, 0xb9, 0x23, 0xc5,
	0x2e, 0x1a, 0xdb, 0x5c, 0x7e, 0x36, 0x64, 0xce, 0x02, 0x1e, 0x99, 0x3c, 0x92, 0x5a, 0x17, 0x8d,
	0xaa, 0x32, 0x18, 0x91, 0xa8, 0x9e, 0xeb, 0xc7, 0xce, 0xb0, 0x5d, 0xee, 0x14, 0xba, 0x45, 0x43,
	0x57, 0x16, 0x23, 0x0a, 0xf1, 0x0b, 0x68, 0x66, 0xd0, 0x4b, 0xee, 0x3f, 0x40, 0x35, 0x06, 0x92,
	0x70, 0x6f, 0x49, 0xee, 0xd9, 0xb8, 0x34, 0x02, 0xff, 0xa5, 0xc1, 0xce, 0x60, 0x49, 0x80, 0x3c,
	0x39, 0x6d, 0x95, 0xdc, 0x1e, 0x94, 0x6d, 0x47, 0xb6, 0x86, 0xea, 0xb3, 0x92, 0xed, 0x88, 0xd6,
	0xf8, 0x12, 0xca, 0xde, 0xc9, 0x8c, 0x92, 0x28, 0xfe, 0xa8, 0xe2, 0x93, 0xf8, 0xee, 0x2c, 0xce,
	0x4c, 0xc6, 0x83, 0xf9, 0x7b, 0x33, 0x99, 0x2f, 0x45, 0x39, 0x5f, 0x9a, 0x16, 0x67, 0x23, 0x61,
	0x1f, 0xc4, 0x73, 0xa6, 0x0f, 0xad, 0xc1, 0x32, 0xa3, 0x63, 0xd0, 0xc9, 0x12, 0xa5, 0x5d, 0x49,
	0x29, 0x17, 0xb9, 0x88, 0xc1, 0x7f, 0x6b, 0x50, 0xba, 0xea, 0xbd, 0x1c, 0xfe, 0xf6, 0x29, 0x6c,
	0x0e, 0x40, 0xb7, 0x1d, 0x37, 0x57, 0xc2, 0xaa, 0x30, 0x24, 0x5f, 0x8d, 0xcb, 0x4c, 0xcb, 0x71,
	0x78, 0xf2, 0xd5, 0xb8, 0xec, 0x57, 0xc7, 0xe1, 0xa2, 0xee, 0xbe, 0x15, 0xbe, 0x35, 0x3d, 0x42,
	0x65, 0x2d, 0x4b, 0x46, 0x45, 0x9c, 0x5f, 0x13, 0x8a, 0x7f, 0x04, 0x5d, 0x82, 0x7a, 0xed, 0x86,
	0x11, 0xea, 0x40, 0x49, 0x5c, 0x96, 0xf0, 0x01, 0x55, 0x22, 0xe1, 0x36, 0x94, 0x03, 0x13, 0x68,
	0x0a, 0x7e, 0x57, 0x9e, 0x45, 0x7b, 0x2e, 0x75, 0x5c, 0x3a, 0xfd, 0x14, 0x36, 0xfb, 0x50, 0x99,
	0x79, 0x16, 0x15, 0x43, 0x3b, 0x2e, 0x8e, 0x38, 0x0e, 0x1d, 0xfc, 0x5c, 0xd5, 0x5f, 0x3c, 0x23,
	0x81, 0x1d, 0x42, 0x49, 0x78, 0x12, 0x60, 0x0f, 0x52, 0xa1, 0x33, 0x40, 0x0c, 0x15, 0x82, 0xff,
	0xd4, 0x14, 0xc6, 0x51, 0xc0, 0xa3, 0xcf, 0x80, 0xf1, 0x00, 0x74, 0xd9, 0xe9, 0x59, 0xc5, 0x85,
	0x21, 0x51, 0x3c, 0x21, 0x50, 0x5c, 0x47, 0x40, 0x60, 0x48, 0x08, 0x88, 0xa4, 0x55, 0x02, 0x19,
	0x94, 0x86, 0x0a, 0x39, 0xfc, 0x06, 0xaa, 0xc9, 0xa0, 0x46, 0x55, 0x28, 0x0e, 0x7a, 0x67, 0xa3,
	0xd6, 0x96, 0xf8, 0x35, 0x14, 0xbf, 0xb4, 0x93, 0xff, 0x76, 0xa0, 0xde, 0xf7, 0xc5, 0x6a, 0xbc,
	0x20, 0x7c, 0xe6, 0x8e, 0x09, 0xfa, 0x19, 0x9a, 0xe9, 0xba, 0xbc, 0x78, 0xe7, 0x46, 0xe3, 0x6b,
	0x14, 0xbf, 0x90, 0x5f, 0xa5, 0x0f, 0x91, 0xb4, 0xf6, 0x03, 0xdf, 0x0f, 0xa8, 0xe8, 0xe2, 0x57,
	0x0e, 0xc7, 0x5b, 0xe8, 0x09, 0xd4, 0xfb, 0x9c, 0x58, 0x11, 0x49, 0x96, 0x69, 0x6e, 0xeb, 0x6d,
	0x4e, 0x7a, 0x49, 0x3c, 0x72, 0xb7, 0xa4, 0x63, 0xa8, 0x5d, 0x5c, 0x07, 0xef, 0xd6, 0xa7, 0xb4,
	0x72, 0xbb, 0x96, 0x84, 0x0c, 0x6f, 0xa1, 0xa7, 0xd0, 0x4a, 0xa1, 0xa9, 0x3d, 0xc4, 0xd0, 0xd2,
	0x56, 0xda, 0xf0, 0xd4, 0x53, 0x68, 0xa5, 0xf8, 0xee, 0x96, 0xf9, 0x13, 0x34, 0x62, 0x90, 0x1f,
	0xce, 0xcb, 0xed, 0xce, 0x25, 0x19, 0xe5, 0x6a, 0xcc, 0x8d, 0xf7, 0xcd, 0x32, 0xfe, 0xce, 0x9c,
	0xbb, 0x27, 0xe5, 0xb8, 0xdd, 0x2a, 0x69, 0xa1, 0xfd, 0x9a, 0x94, 0x56, 0x6e, 0x13, 0x29, 0x3e,
	0xa7, 0x09, 0x9f, 0x78, 0xa0, 0xa1, 0x95, 0x91, 0xbd, 0xe1, 0xa5, 0xd3, 0x84, 0xd3, 0x3d, 0x12,
	0x15, 0xaf, 0xbb, 0x27, 0x4a, 0x6e, 0x9b, 0xd3, 0x1e, 0xac, 0x6c, 0x1b, 0xc5, 0xf1, 0x19, 0x34,
	0x14, 0xc7, 0x64, 0x6a, 0xa3, 0xd5, 0x21, 0xbe, 0xe1, 0xcd, 0x67, 0xd0, 0x50, 0x2c, 0xef, 0x95,
	0xaa, 0x78, 0xde, 0x3d, 0xf5, 0x39, 0xec, 0x08, 0xa6, 0x1f, 0x4a, 0xdc, 0x5b, 0x5d, 0x43, 0x8a,
	0xec, 0x31, 0xd4, 0xe2, 0x82, 0x8a, 0x61, 0x8e, 0x32, 0xe3, 0x7d, 0x73, 0xcb, 0xc4, 0xf5, 0xb8,
	0x65, 0xc2, 0x77, 0xa0, 0xcb, 0x3a, 0xac, 0x84, 0x37, 0x16, 0xbf, 0xc5, 0x3c, 0xc4, 0x5b, 0xa8,
	0x0f, 0x7b, 0x0b, 0xe5, 0xb3, 0xfb, 0x64, 0xed, 0x70, 0xdf, 0xf0, 0x5e, 0x1f, 0xf6, 0x16, 0x42,
	0xde, 0xf7, 0x92, 0x5f, 0xe0, 0x8b, 0x44, 0xd2, 0x8f, 0x5f, 0xb1, 0x9b, 0xb3, 0xae, 0xe3, 0x92,
	0xdd, 0x3b, 0x6b, 0xe7, 0xfc, 0x6d, 0xb8, 0xdc, 0xf7, 0x92, 0x0c, 0x97, 0x8f, 0x5f, 0xb1, 0x9b,
	0xb3, 0x2a, 0x2e, 0x76, 0x59, 0xfe, 0x0f, 0x7b, 0xf2, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3,
	0xdd, 0x0f, 0x5e, 0xb0, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CmlBgpServiceClient is the client API for CmlBgpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmlBgpServiceClient interface {
	//使能BGP
	GlobalBgpSwitch(ctx context.Context, in *EnableGlobalBgp, opts ...grpc.CallOption) (*CommonRespHdr, error)
	//BGP实例相关配置
	CreateBgpInst(ctx context.Context, in *BgpInst, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteBgpInst(ctx context.Context, in *BgpInst, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowBgpInst(ctx context.Context, in *BgpInst, opts ...grpc.CallOption) (*BgpInstResp, error)
	//BGP Peer group相关配置
	CreateBgpPeerGrp(ctx context.Context, in *PeerGroup, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteBgpPeerGrp(ctx context.Context, in *PeerGroup, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowBgpPeerGrp(ctx context.Context, in *PeerGroup, opts ...grpc.CallOption) (*PeerGroupResp, error)
	//BGP Peer group相关配置
	CreateBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*CommonRespHdr, error)
	UpdateBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*BgpPeerResp, error)
	//VPN实例创建
	CreateVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error)
	UpdateVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*VPNInstanceResp, error)
	//EVPN相关配置
	CreateEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error)
	UpdateEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*EVPNInstanceResp, error)
	//Vbdif相关配置
	CreateVbdif(ctx context.Context, in *VBDIF, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteVbdif(ctx context.Context, in *VBDIF, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowVbdif(ctx context.Context, in *VBDIF, opts ...grpc.CallOption) (*VBDIFList, error)
	//EVPN VLAN实例配置关系
	CreateEVPNVlanBinding(ctx context.Context, in *EVPNVlanBinding, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteEVPNVlanBinding(ctx context.Context, in *EVPNVlanBinding, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowEVPNVlanBinding(ctx context.Context, in *EVPNVlanBinding, opts ...grpc.CallOption) (*EVPNVlanList, error)
	//EVPN Port实例配置关系
	CreateEVPNPortBinding(ctx context.Context, in *EVPNPortBinding, opts ...grpc.CallOption) (*CommonRespHdr, error)
	DeleteEVPNPortBinding(ctx context.Context, in *EVPNPortBinding, opts ...grpc.CallOption) (*CommonRespHdr, error)
	ShowEVPNPortBinding(ctx context.Context, in *EVPNPortBinding, opts ...grpc.CallOption) (*EVPNPortList, error)
}

type cmlBgpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmlBgpServiceClient(cc grpc.ClientConnInterface) CmlBgpServiceClient {
	return &cmlBgpServiceClient{cc}
}

func (c *cmlBgpServiceClient) GlobalBgpSwitch(ctx context.Context, in *EnableGlobalBgp, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/GlobalBgpSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateBgpInst(ctx context.Context, in *BgpInst, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateBgpInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteBgpInst(ctx context.Context, in *BgpInst, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteBgpInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowBgpInst(ctx context.Context, in *BgpInst, opts ...grpc.CallOption) (*BgpInstResp, error) {
	out := new(BgpInstResp)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowBgpInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateBgpPeerGrp(ctx context.Context, in *PeerGroup, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateBgpPeerGrp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteBgpPeerGrp(ctx context.Context, in *PeerGroup, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteBgpPeerGrp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowBgpPeerGrp(ctx context.Context, in *PeerGroup, opts ...grpc.CallOption) (*PeerGroupResp, error) {
	out := new(PeerGroupResp)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowBgpPeerGrp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateBgpPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) UpdateBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/UpdateBgpPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteBgpPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowBgpPeer(ctx context.Context, in *BgpPeer, opts ...grpc.CallOption) (*BgpPeerResp, error) {
	out := new(BgpPeerResp)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowBgpPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) UpdateVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/UpdateVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowVPNInst(ctx context.Context, in *VPNInstance, opts ...grpc.CallOption) (*VPNInstanceResp, error) {
	out := new(VPNInstanceResp)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateEVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) UpdateEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/UpdateEVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteEVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowEVPNInst(ctx context.Context, in *EVPNInstance, opts ...grpc.CallOption) (*EVPNInstanceResp, error) {
	out := new(EVPNInstanceResp)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowEVPNInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateVbdif(ctx context.Context, in *VBDIF, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateVbdif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteVbdif(ctx context.Context, in *VBDIF, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteVbdif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowVbdif(ctx context.Context, in *VBDIF, opts ...grpc.CallOption) (*VBDIFList, error) {
	out := new(VBDIFList)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowVbdif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateEVPNVlanBinding(ctx context.Context, in *EVPNVlanBinding, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateEVPNVlanBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteEVPNVlanBinding(ctx context.Context, in *EVPNVlanBinding, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteEVPNVlanBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowEVPNVlanBinding(ctx context.Context, in *EVPNVlanBinding, opts ...grpc.CallOption) (*EVPNVlanList, error) {
	out := new(EVPNVlanList)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowEVPNVlanBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) CreateEVPNPortBinding(ctx context.Context, in *EVPNPortBinding, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/CreateEVPNPortBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) DeleteEVPNPortBinding(ctx context.Context, in *EVPNPortBinding, opts ...grpc.CallOption) (*CommonRespHdr, error) {
	out := new(CommonRespHdr)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/DeleteEVPNPortBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlBgpServiceClient) ShowEVPNPortBinding(ctx context.Context, in *EVPNPortBinding, opts ...grpc.CallOption) (*EVPNPortList, error) {
	out := new(EVPNPortList)
	err := c.cc.Invoke(ctx, "/cml.CmlBgpService/ShowEVPNPortBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmlBgpServiceServer is the server API for CmlBgpService service.
type CmlBgpServiceServer interface {
	//使能BGP
	GlobalBgpSwitch(context.Context, *EnableGlobalBgp) (*CommonRespHdr, error)
	//BGP实例相关配置
	CreateBgpInst(context.Context, *BgpInst) (*CommonRespHdr, error)
	DeleteBgpInst(context.Context, *BgpInst) (*CommonRespHdr, error)
	ShowBgpInst(context.Context, *BgpInst) (*BgpInstResp, error)
	//BGP Peer group相关配置
	CreateBgpPeerGrp(context.Context, *PeerGroup) (*CommonRespHdr, error)
	DeleteBgpPeerGrp(context.Context, *PeerGroup) (*CommonRespHdr, error)
	ShowBgpPeerGrp(context.Context, *PeerGroup) (*PeerGroupResp, error)
	//BGP Peer group相关配置
	CreateBgpPeer(context.Context, *BgpPeer) (*CommonRespHdr, error)
	UpdateBgpPeer(context.Context, *BgpPeer) (*CommonRespHdr, error)
	DeleteBgpPeer(context.Context, *BgpPeer) (*CommonRespHdr, error)
	ShowBgpPeer(context.Context, *BgpPeer) (*BgpPeerResp, error)
	//VPN实例创建
	CreateVPNInst(context.Context, *VPNInstance) (*CommonRespHdr, error)
	UpdateVPNInst(context.Context, *VPNInstance) (*CommonRespHdr, error)
	DeleteVPNInst(context.Context, *VPNInstance) (*CommonRespHdr, error)
	ShowVPNInst(context.Context, *VPNInstance) (*VPNInstanceResp, error)
	//EVPN相关配置
	CreateEVPNInst(context.Context, *EVPNInstance) (*CommonRespHdr, error)
	UpdateEVPNInst(context.Context, *EVPNInstance) (*CommonRespHdr, error)
	DeleteEVPNInst(context.Context, *EVPNInstance) (*CommonRespHdr, error)
	ShowEVPNInst(context.Context, *EVPNInstance) (*EVPNInstanceResp, error)
	//Vbdif相关配置
	CreateVbdif(context.Context, *VBDIF) (*CommonRespHdr, error)
	DeleteVbdif(context.Context, *VBDIF) (*CommonRespHdr, error)
	ShowVbdif(context.Context, *VBDIF) (*VBDIFList, error)
	//EVPN VLAN实例配置关系
	CreateEVPNVlanBinding(context.Context, *EVPNVlanBinding) (*CommonRespHdr, error)
	DeleteEVPNVlanBinding(context.Context, *EVPNVlanBinding) (*CommonRespHdr, error)
	ShowEVPNVlanBinding(context.Context, *EVPNVlanBinding) (*EVPNVlanList, error)
	//EVPN Port实例配置关系
	CreateEVPNPortBinding(context.Context, *EVPNPortBinding) (*CommonRespHdr, error)
	DeleteEVPNPortBinding(context.Context, *EVPNPortBinding) (*CommonRespHdr, error)
	ShowEVPNPortBinding(context.Context, *EVPNPortBinding) (*EVPNPortList, error)
}

// UnimplementedCmlBgpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCmlBgpServiceServer struct {
}

func (*UnimplementedCmlBgpServiceServer) GlobalBgpSwitch(ctx context.Context, req *EnableGlobalBgp) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalBgpSwitch not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateBgpInst(ctx context.Context, req *BgpInst) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgpInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteBgpInst(ctx context.Context, req *BgpInst) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgpInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowBgpInst(ctx context.Context, req *BgpInst) (*BgpInstResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBgpInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateBgpPeerGrp(ctx context.Context, req *PeerGroup) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgpPeerGrp not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteBgpPeerGrp(ctx context.Context, req *PeerGroup) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgpPeerGrp not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowBgpPeerGrp(ctx context.Context, req *PeerGroup) (*PeerGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBgpPeerGrp not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateBgpPeer(ctx context.Context, req *BgpPeer) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBgpPeer not implemented")
}
func (*UnimplementedCmlBgpServiceServer) UpdateBgpPeer(ctx context.Context, req *BgpPeer) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBgpPeer not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteBgpPeer(ctx context.Context, req *BgpPeer) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBgpPeer not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowBgpPeer(ctx context.Context, req *BgpPeer) (*BgpPeerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBgpPeer not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateVPNInst(ctx context.Context, req *VPNInstance) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) UpdateVPNInst(ctx context.Context, req *VPNInstance) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteVPNInst(ctx context.Context, req *VPNInstance) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowVPNInst(ctx context.Context, req *VPNInstance) (*VPNInstanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateEVPNInst(ctx context.Context, req *EVPNInstance) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) UpdateEVPNInst(ctx context.Context, req *EVPNInstance) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteEVPNInst(ctx context.Context, req *EVPNInstance) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowEVPNInst(ctx context.Context, req *EVPNInstance) (*EVPNInstanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowEVPNInst not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateVbdif(ctx context.Context, req *VBDIF) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVbdif not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteVbdif(ctx context.Context, req *VBDIF) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVbdif not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowVbdif(ctx context.Context, req *VBDIF) (*VBDIFList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVbdif not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateEVPNVlanBinding(ctx context.Context, req *EVPNVlanBinding) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEVPNVlanBinding not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteEVPNVlanBinding(ctx context.Context, req *EVPNVlanBinding) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEVPNVlanBinding not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowEVPNVlanBinding(ctx context.Context, req *EVPNVlanBinding) (*EVPNVlanList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowEVPNVlanBinding not implemented")
}
func (*UnimplementedCmlBgpServiceServer) CreateEVPNPortBinding(ctx context.Context, req *EVPNPortBinding) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEVPNPortBinding not implemented")
}
func (*UnimplementedCmlBgpServiceServer) DeleteEVPNPortBinding(ctx context.Context, req *EVPNPortBinding) (*CommonRespHdr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEVPNPortBinding not implemented")
}
func (*UnimplementedCmlBgpServiceServer) ShowEVPNPortBinding(ctx context.Context, req *EVPNPortBinding) (*EVPNPortList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowEVPNPortBinding not implemented")
}

func RegisterCmlBgpServiceServer(s *grpc.Server, srv CmlBgpServiceServer) {
	s.RegisterService(&_CmlBgpService_serviceDesc, srv)
}

func _CmlBgpService_GlobalBgpSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableGlobalBgp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).GlobalBgpSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/GlobalBgpSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).GlobalBgpSwitch(ctx, req.(*EnableGlobalBgp))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateBgpInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateBgpInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateBgpInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateBgpInst(ctx, req.(*BgpInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteBgpInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteBgpInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteBgpInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteBgpInst(ctx, req.(*BgpInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowBgpInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpInst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowBgpInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowBgpInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowBgpInst(ctx, req.(*BgpInst))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateBgpPeerGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateBgpPeerGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateBgpPeerGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateBgpPeerGrp(ctx, req.(*PeerGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteBgpPeerGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteBgpPeerGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteBgpPeerGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteBgpPeerGrp(ctx, req.(*PeerGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowBgpPeerGrp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowBgpPeerGrp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowBgpPeerGrp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowBgpPeerGrp(ctx, req.(*PeerGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateBgpPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateBgpPeer(ctx, req.(*BgpPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_UpdateBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).UpdateBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/UpdateBgpPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).UpdateBgpPeer(ctx, req.(*BgpPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteBgpPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteBgpPeer(ctx, req.(*BgpPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowBgpPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowBgpPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowBgpPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowBgpPeer(ctx, req.(*BgpPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateVPNInst(ctx, req.(*VPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_UpdateVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).UpdateVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/UpdateVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).UpdateVPNInst(ctx, req.(*VPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteVPNInst(ctx, req.(*VPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowVPNInst(ctx, req.(*VPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateEVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateEVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateEVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateEVPNInst(ctx, req.(*EVPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_UpdateEVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).UpdateEVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/UpdateEVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).UpdateEVPNInst(ctx, req.(*EVPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteEVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteEVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteEVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteEVPNInst(ctx, req.(*EVPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowEVPNInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowEVPNInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowEVPNInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowEVPNInst(ctx, req.(*EVPNInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateVbdif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VBDIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateVbdif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateVbdif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateVbdif(ctx, req.(*VBDIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteVbdif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VBDIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteVbdif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteVbdif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteVbdif(ctx, req.(*VBDIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowVbdif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VBDIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowVbdif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowVbdif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowVbdif(ctx, req.(*VBDIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateEVPNVlanBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNVlanBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateEVPNVlanBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateEVPNVlanBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateEVPNVlanBinding(ctx, req.(*EVPNVlanBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteEVPNVlanBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNVlanBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteEVPNVlanBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteEVPNVlanBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteEVPNVlanBinding(ctx, req.(*EVPNVlanBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowEVPNVlanBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNVlanBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowEVPNVlanBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowEVPNVlanBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowEVPNVlanBinding(ctx, req.(*EVPNVlanBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_CreateEVPNPortBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNPortBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).CreateEVPNPortBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/CreateEVPNPortBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).CreateEVPNPortBinding(ctx, req.(*EVPNPortBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_DeleteEVPNPortBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNPortBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).DeleteEVPNPortBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/DeleteEVPNPortBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).DeleteEVPNPortBinding(ctx, req.(*EVPNPortBinding))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmlBgpService_ShowEVPNPortBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EVPNPortBinding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlBgpServiceServer).ShowEVPNPortBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.CmlBgpService/ShowEVPNPortBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlBgpServiceServer).ShowEVPNPortBinding(ctx, req.(*EVPNPortBinding))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmlBgpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cml.CmlBgpService",
	HandlerType: (*CmlBgpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GlobalBgpSwitch",
			Handler:    _CmlBgpService_GlobalBgpSwitch_Handler,
		},
		{
			MethodName: "CreateBgpInst",
			Handler:    _CmlBgpService_CreateBgpInst_Handler,
		},
		{
			MethodName: "DeleteBgpInst",
			Handler:    _CmlBgpService_DeleteBgpInst_Handler,
		},
		{
			MethodName: "ShowBgpInst",
			Handler:    _CmlBgpService_ShowBgpInst_Handler,
		},
		{
			MethodName: "CreateBgpPeerGrp",
			Handler:    _CmlBgpService_CreateBgpPeerGrp_Handler,
		},
		{
			MethodName: "DeleteBgpPeerGrp",
			Handler:    _CmlBgpService_DeleteBgpPeerGrp_Handler,
		},
		{
			MethodName: "ShowBgpPeerGrp",
			Handler:    _CmlBgpService_ShowBgpPeerGrp_Handler,
		},
		{
			MethodName: "CreateBgpPeer",
			Handler:    _CmlBgpService_CreateBgpPeer_Handler,
		},
		{
			MethodName: "UpdateBgpPeer",
			Handler:    _CmlBgpService_UpdateBgpPeer_Handler,
		},
		{
			MethodName: "DeleteBgpPeer",
			Handler:    _CmlBgpService_DeleteBgpPeer_Handler,
		},
		{
			MethodName: "ShowBgpPeer",
			Handler:    _CmlBgpService_ShowBgpPeer_Handler,
		},
		{
			MethodName: "CreateVPNInst",
			Handler:    _CmlBgpService_CreateVPNInst_Handler,
		},
		{
			MethodName: "UpdateVPNInst",
			Handler:    _CmlBgpService_UpdateVPNInst_Handler,
		},
		{
			MethodName: "DeleteVPNInst",
			Handler:    _CmlBgpService_DeleteVPNInst_Handler,
		},
		{
			MethodName: "ShowVPNInst",
			Handler:    _CmlBgpService_ShowVPNInst_Handler,
		},
		{
			MethodName: "CreateEVPNInst",
			Handler:    _CmlBgpService_CreateEVPNInst_Handler,
		},
		{
			MethodName: "UpdateEVPNInst",
			Handler:    _CmlBgpService_UpdateEVPNInst_Handler,
		},
		{
			MethodName: "DeleteEVPNInst",
			Handler:    _CmlBgpService_DeleteEVPNInst_Handler,
		},
		{
			MethodName: "ShowEVPNInst",
			Handler:    _CmlBgpService_ShowEVPNInst_Handler,
		},
		{
			MethodName: "CreateVbdif",
			Handler:    _CmlBgpService_CreateVbdif_Handler,
		},
		{
			MethodName: "DeleteVbdif",
			Handler:    _CmlBgpService_DeleteVbdif_Handler,
		},
		{
			MethodName: "ShowVbdif",
			Handler:    _CmlBgpService_ShowVbdif_Handler,
		},
		{
			MethodName: "CreateEVPNVlanBinding",
			Handler:    _CmlBgpService_CreateEVPNVlanBinding_Handler,
		},
		{
			MethodName: "DeleteEVPNVlanBinding",
			Handler:    _CmlBgpService_DeleteEVPNVlanBinding_Handler,
		},
		{
			MethodName: "ShowEVPNVlanBinding",
			Handler:    _CmlBgpService_ShowEVPNVlanBinding_Handler,
		},
		{
			MethodName: "CreateEVPNPortBinding",
			Handler:    _CmlBgpService_CreateEVPNPortBinding_Handler,
		},
		{
			MethodName: "DeleteEVPNPortBinding",
			Handler:    _CmlBgpService_DeleteEVPNPortBinding_Handler,
		},
		{
			MethodName: "ShowEVPNPortBinding",
			Handler:    _CmlBgpService_ShowEVPNPortBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bgp_conf.proto",
}
