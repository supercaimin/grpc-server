// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xstp-config.proto

package cml

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//生成树优先级
type Stppriority struct {
	Instanceid           int32    `protobuf:"varint,1,opt,name=instanceid,proto3" json:"instanceid,omitempty"`
	Priority             int32    `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stppriority) Reset()         { *m = Stppriority{} }
func (m *Stppriority) String() string { return proto.CompactTextString(m) }
func (*Stppriority) ProtoMessage()    {}
func (*Stppriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_7067cc7159e23e63, []int{0}
}

func (m *Stppriority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stppriority.Unmarshal(m, b)
}
func (m *Stppriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stppriority.Marshal(b, m, deterministic)
}
func (m *Stppriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stppriority.Merge(m, src)
}
func (m *Stppriority) XXX_Size() int {
	return xxx_messageInfo_Stppriority.Size(m)
}
func (m *Stppriority) XXX_DiscardUnknown() {
	xxx_messageInfo_Stppriority.DiscardUnknown(m)
}

var xxx_messageInfo_Stppriority proto.InternalMessageInfo

func (m *Stppriority) GetInstanceid() int32 {
	if m != nil {
		return m.Instanceid
	}
	return 0
}

func (m *Stppriority) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

//根桥角色
type Stprootrole struct {
	Instanceid           int32    `protobuf:"varint,1,opt,name=instanceid,proto3" json:"instanceid,omitempty"`
	Role                 string   `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stprootrole) Reset()         { *m = Stprootrole{} }
func (m *Stprootrole) String() string { return proto.CompactTextString(m) }
func (*Stprootrole) ProtoMessage()    {}
func (*Stprootrole) Descriptor() ([]byte, []int) {
	return fileDescriptor_7067cc7159e23e63, []int{1}
}

func (m *Stprootrole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stprootrole.Unmarshal(m, b)
}
func (m *Stprootrole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stprootrole.Marshal(b, m, deterministic)
}
func (m *Stprootrole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stprootrole.Merge(m, src)
}
func (m *Stprootrole) XXX_Size() int {
	return xxx_messageInfo_Stprootrole.Size(m)
}
func (m *Stprootrole) XXX_DiscardUnknown() {
	xxx_messageInfo_Stprootrole.DiscardUnknown(m)
}

var xxx_messageInfo_Stprootrole proto.InternalMessageInfo

func (m *Stprootrole) GetInstanceid() int32 {
	if m != nil {
		return m.Instanceid
	}
	return 0
}

func (m *Stprootrole) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

//xstp global config
type Xstpglobalcfg struct {
	Bridgemac            string       `protobuf:"bytes,1,opt,name=bridgemac,proto3" json:"bridgemac,omitempty"`
	Bpduprotect          int32        `protobuf:"varint,2,opt,name=bpduprotect,proto3" json:"bpduprotect,omitempty"`
	Bridgediameter       int32        `protobuf:"varint,3,opt,name=bridgediameter,proto3" json:"bridgediameter,omitempty"`
	Convergemode         int32        `protobuf:"varint,4,opt,name=convergemode,proto3" json:"convergemode,omitempty"`
	Edgeportenable       int32        `protobuf:"varint,5,opt,name=edgeportenable,proto3" json:"edgeportenable,omitempty"`
	Stpenable            int32        `protobuf:"varint,6,opt,name=stpenable,proto3" json:"stpenable,omitempty"`
	Stpflushenable       int32        `protobuf:"varint,7,opt,name=stpflushenable,proto3" json:"stpflushenable,omitempty"`
	Mstpmaxhop           int32        `protobuf:"varint,8,opt,name=mstpmaxhop,proto3" json:"mstpmaxhop,omitempty"`
	Stpmode              string       `protobuf:"bytes,9,opt,name=stpmode,proto3" json:"stpmode,omitempty"`
	Coststandard         string       `protobuf:"bytes,10,opt,name=coststandard,proto3" json:"coststandard,omitempty"`
	Priority             *Stppriority `protobuf:"bytes,11,opt,name=priority,proto3" json:"priority,omitempty"`
	Regionconfigact      int32        `protobuf:"varint,12,opt,name=regionconfigact,proto3" json:"regionconfigact,omitempty"`
	Rootrole             *Stprootrole `protobuf:"bytes,13,opt,name=rootrole,proto3" json:"rootrole,omitempty"`
	Forwarddelay         int32        `protobuf:"varint,14,opt,name=forwarddelay,proto3" json:"forwarddelay,omitempty"`
	Hellotimer           int32        `protobuf:"varint,15,opt,name=hellotimer,proto3" json:"hellotimer,omitempty"`
	Timermaxage          int32        `protobuf:"varint,16,opt,name=timermaxage,proto3" json:"timermaxage,omitempty"`
	Timerfactor          int32        `protobuf:"varint,17,opt,name=timerfactor,proto3" json:"timerfactor,omitempty"`
	Translimit           int32        `protobuf:"varint,18,opt,name=translimit,proto3" json:"translimit,omitempty"`
	Updatetime           int64        `protobuf:"varint,19,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Xstpglobalcfg) Reset()         { *m = Xstpglobalcfg{} }
func (m *Xstpglobalcfg) String() string { return proto.CompactTextString(m) }
func (*Xstpglobalcfg) ProtoMessage()    {}
func (*Xstpglobalcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7067cc7159e23e63, []int{2}
}

func (m *Xstpglobalcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xstpglobalcfg.Unmarshal(m, b)
}
func (m *Xstpglobalcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xstpglobalcfg.Marshal(b, m, deterministic)
}
func (m *Xstpglobalcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xstpglobalcfg.Merge(m, src)
}
func (m *Xstpglobalcfg) XXX_Size() int {
	return xxx_messageInfo_Xstpglobalcfg.Size(m)
}
func (m *Xstpglobalcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Xstpglobalcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Xstpglobalcfg proto.InternalMessageInfo

func (m *Xstpglobalcfg) GetBridgemac() string {
	if m != nil {
		return m.Bridgemac
	}
	return ""
}

func (m *Xstpglobalcfg) GetBpduprotect() int32 {
	if m != nil {
		return m.Bpduprotect
	}
	return 0
}

func (m *Xstpglobalcfg) GetBridgediameter() int32 {
	if m != nil {
		return m.Bridgediameter
	}
	return 0
}

func (m *Xstpglobalcfg) GetConvergemode() int32 {
	if m != nil {
		return m.Convergemode
	}
	return 0
}

func (m *Xstpglobalcfg) GetEdgeportenable() int32 {
	if m != nil {
		return m.Edgeportenable
	}
	return 0
}

func (m *Xstpglobalcfg) GetStpenable() int32 {
	if m != nil {
		return m.Stpenable
	}
	return 0
}

func (m *Xstpglobalcfg) GetStpflushenable() int32 {
	if m != nil {
		return m.Stpflushenable
	}
	return 0
}

func (m *Xstpglobalcfg) GetMstpmaxhop() int32 {
	if m != nil {
		return m.Mstpmaxhop
	}
	return 0
}

func (m *Xstpglobalcfg) GetStpmode() string {
	if m != nil {
		return m.Stpmode
	}
	return ""
}

func (m *Xstpglobalcfg) GetCoststandard() string {
	if m != nil {
		return m.Coststandard
	}
	return ""
}

func (m *Xstpglobalcfg) GetPriority() *Stppriority {
	if m != nil {
		return m.Priority
	}
	return nil
}

func (m *Xstpglobalcfg) GetRegionconfigact() int32 {
	if m != nil {
		return m.Regionconfigact
	}
	return 0
}

func (m *Xstpglobalcfg) GetRootrole() *Stprootrole {
	if m != nil {
		return m.Rootrole
	}
	return nil
}

func (m *Xstpglobalcfg) GetForwarddelay() int32 {
	if m != nil {
		return m.Forwarddelay
	}
	return 0
}

func (m *Xstpglobalcfg) GetHellotimer() int32 {
	if m != nil {
		return m.Hellotimer
	}
	return 0
}

func (m *Xstpglobalcfg) GetTimermaxage() int32 {
	if m != nil {
		return m.Timermaxage
	}
	return 0
}

func (m *Xstpglobalcfg) GetTimerfactor() int32 {
	if m != nil {
		return m.Timerfactor
	}
	return 0
}

func (m *Xstpglobalcfg) GetTranslimit() int32 {
	if m != nil {
		return m.Translimit
	}
	return 0
}

func (m *Xstpglobalcfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//mstp域配置
type Xstpregioncfg struct {
	Regionname           string   `protobuf:"bytes,1,opt,name=regionname,proto3" json:"regionname,omitempty"`
	Instanceid           int32    `protobuf:"varint,2,opt,name=instanceid,proto3" json:"instanceid,omitempty"`
	Vlanlist             string   `protobuf:"bytes,3,opt,name=vlanlist,proto3" json:"vlanlist,omitempty"`
	Revisionlevel        int32    `protobuf:"varint,4,opt,name=revisionlevel,proto3" json:"revisionlevel,omitempty"`
	Bpduprotect          int32    `protobuf:"varint,5,opt,name=bpduprotect,proto3" json:"bpduprotect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Xstpregioncfg) Reset()         { *m = Xstpregioncfg{} }
func (m *Xstpregioncfg) String() string { return proto.CompactTextString(m) }
func (*Xstpregioncfg) ProtoMessage()    {}
func (*Xstpregioncfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7067cc7159e23e63, []int{3}
}

func (m *Xstpregioncfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xstpregioncfg.Unmarshal(m, b)
}
func (m *Xstpregioncfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xstpregioncfg.Marshal(b, m, deterministic)
}
func (m *Xstpregioncfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xstpregioncfg.Merge(m, src)
}
func (m *Xstpregioncfg) XXX_Size() int {
	return xxx_messageInfo_Xstpregioncfg.Size(m)
}
func (m *Xstpregioncfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Xstpregioncfg.DiscardUnknown(m)
}

var xxx_messageInfo_Xstpregioncfg proto.InternalMessageInfo

func (m *Xstpregioncfg) GetRegionname() string {
	if m != nil {
		return m.Regionname
	}
	return ""
}

func (m *Xstpregioncfg) GetInstanceid() int32 {
	if m != nil {
		return m.Instanceid
	}
	return 0
}

func (m *Xstpregioncfg) GetVlanlist() string {
	if m != nil {
		return m.Vlanlist
	}
	return ""
}

func (m *Xstpregioncfg) GetRevisionlevel() int32 {
	if m != nil {
		return m.Revisionlevel
	}
	return 0
}

func (m *Xstpregioncfg) GetBpduprotect() int32 {
	if m != nil {
		return m.Bpduprotect
	}
	return 0
}

//接口下instaceid cost
type Xstpcost struct {
	Instanceid           int32    `protobuf:"varint,1,opt,name=instanceid,proto3" json:"instanceid,omitempty"`
	Cost                 int32    `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Xstpcost) Reset()         { *m = Xstpcost{} }
func (m *Xstpcost) String() string { return proto.CompactTextString(m) }
func (*Xstpcost) ProtoMessage()    {}
func (*Xstpcost) Descriptor() ([]byte, []int) {
	return fileDescriptor_7067cc7159e23e63, []int{4}
}

func (m *Xstpcost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xstpcost.Unmarshal(m, b)
}
func (m *Xstpcost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xstpcost.Marshal(b, m, deterministic)
}
func (m *Xstpcost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xstpcost.Merge(m, src)
}
func (m *Xstpcost) XXX_Size() int {
	return xxx_messageInfo_Xstpcost.Size(m)
}
func (m *Xstpcost) XXX_DiscardUnknown() {
	xxx_messageInfo_Xstpcost.DiscardUnknown(m)
}

var xxx_messageInfo_Xstpcost proto.InternalMessageInfo

func (m *Xstpcost) GetInstanceid() int32 {
	if m != nil {
		return m.Instanceid
	}
	return 0
}

func (m *Xstpcost) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

//端口下stp的相关配置
type Xstpportcfg struct {
	Ifname               string       `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Bpdufilter           int32        `protobuf:"varint,2,opt,name=bpdufilter,proto3" json:"bpdufilter,omitempty"`
	Stpcost              *Xstpcost    `protobuf:"bytes,3,opt,name=stpcost,proto3" json:"stpcost,omitempty"`
	Edgeport             int32        `protobuf:"varint,4,opt,name=edgeport,proto3" json:"edgeport,omitempty"`
	Stpenable            int32        `protobuf:"varint,5,opt,name=stpenable,proto3" json:"stpenable,omitempty"`
	Loopprotect          int32        `protobuf:"varint,6,opt,name=loopprotect,proto3" json:"loopprotect,omitempty"`
	Portpriority         *Stppriority `protobuf:"bytes,7,opt,name=portpriority,proto3" json:"portpriority,omitempty"`
	Rootprotect          int32        `protobuf:"varint,8,opt,name=rootprotect,proto3" json:"rootprotect,omitempty"`
	Translimit           int32        `protobuf:"varint,9,opt,name=translimit,proto3" json:"translimit,omitempty"`
	Updatetime           int64        `protobuf:"varint,10,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Xstpportcfg) Reset()         { *m = Xstpportcfg{} }
func (m *Xstpportcfg) String() string { return proto.CompactTextString(m) }
func (*Xstpportcfg) ProtoMessage()    {}
func (*Xstpportcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7067cc7159e23e63, []int{5}
}

func (m *Xstpportcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xstpportcfg.Unmarshal(m, b)
}
func (m *Xstpportcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xstpportcfg.Marshal(b, m, deterministic)
}
func (m *Xstpportcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xstpportcfg.Merge(m, src)
}
func (m *Xstpportcfg) XXX_Size() int {
	return xxx_messageInfo_Xstpportcfg.Size(m)
}
func (m *Xstpportcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Xstpportcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Xstpportcfg proto.InternalMessageInfo

func (m *Xstpportcfg) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *Xstpportcfg) GetBpdufilter() int32 {
	if m != nil {
		return m.Bpdufilter
	}
	return 0
}

func (m *Xstpportcfg) GetStpcost() *Xstpcost {
	if m != nil {
		return m.Stpcost
	}
	return nil
}

func (m *Xstpportcfg) GetEdgeport() int32 {
	if m != nil {
		return m.Edgeport
	}
	return 0
}

func (m *Xstpportcfg) GetStpenable() int32 {
	if m != nil {
		return m.Stpenable
	}
	return 0
}

func (m *Xstpportcfg) GetLoopprotect() int32 {
	if m != nil {
		return m.Loopprotect
	}
	return 0
}

func (m *Xstpportcfg) GetPortpriority() *Stppriority {
	if m != nil {
		return m.Portpriority
	}
	return nil
}

func (m *Xstpportcfg) GetRootprotect() int32 {
	if m != nil {
		return m.Rootprotect
	}
	return 0
}

func (m *Xstpportcfg) GetTranslimit() int32 {
	if m != nil {
		return m.Translimit
	}
	return 0
}

func (m *Xstpportcfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//stp,mstp的动作配置
type Xstpmcheck struct {
	Ifname               int32    `protobuf:"varint,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Checkact             int32    `protobuf:"varint,2,opt,name=checkact,proto3" json:"checkact,omitempty"`
	Updatetime           int64    `protobuf:"varint,3,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Xstpmcheck) Reset()         { *m = Xstpmcheck{} }
func (m *Xstpmcheck) String() string { return proto.CompactTextString(m) }
func (*Xstpmcheck) ProtoMessage()    {}
func (*Xstpmcheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_7067cc7159e23e63, []int{6}
}

func (m *Xstpmcheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Xstpmcheck.Unmarshal(m, b)
}
func (m *Xstpmcheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Xstpmcheck.Marshal(b, m, deterministic)
}
func (m *Xstpmcheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Xstpmcheck.Merge(m, src)
}
func (m *Xstpmcheck) XXX_Size() int {
	return xxx_messageInfo_Xstpmcheck.Size(m)
}
func (m *Xstpmcheck) XXX_DiscardUnknown() {
	xxx_messageInfo_Xstpmcheck.DiscardUnknown(m)
}

var xxx_messageInfo_Xstpmcheck proto.InternalMessageInfo

func (m *Xstpmcheck) GetIfname() int32 {
	if m != nil {
		return m.Ifname
	}
	return 0
}

func (m *Xstpmcheck) GetCheckact() int32 {
	if m != nil {
		return m.Checkact
	}
	return 0
}

func (m *Xstpmcheck) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

func init() {
	proto.RegisterType((*Stppriority)(nil), "cml.stppriority")
	proto.RegisterType((*Stprootrole)(nil), "cml.stprootrole")
	proto.RegisterType((*Xstpglobalcfg)(nil), "cml.xstpglobalcfg")
	proto.RegisterType((*Xstpregioncfg)(nil), "cml.xstpregioncfg")
	proto.RegisterType((*Xstpcost)(nil), "cml.xstpcost")
	proto.RegisterType((*Xstpportcfg)(nil), "cml.xstpportcfg")
	proto.RegisterType((*Xstpmcheck)(nil), "cml.xstpmcheck")
}

func init() {
	proto.RegisterFile("xstp-config.proto", fileDescriptor_7067cc7159e23e63)
}

var fileDescriptor_7067cc7159e23e63 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0x26, 0x4d, 0xd3, 0x26, 0x4e, 0xf3, 0x53, 0x23, 0x21, 0x2b, 0x42, 0x28, 0x5a, 0x21, 0xc8,
	0x01, 0x7a, 0x28, 0x7f, 0xea, 0x05, 0xa9, 0x2a, 0x12, 0xe2, 0x80, 0x84, 0xb6, 0x17, 0x8e, 0x38,
	0x5e, 0xef, 0xc6, 0xc2, 0x5e, 0xaf, 0xbc, 0x6e, 0xda, 0xbe, 0x0d, 0xef, 0x80, 0x78, 0x21, 0x9e,
	0x04, 0x8d, 0xbd, 0xff, 0x2d, 0x6a, 0xe1, 0x96, 0xf9, 0xfc, 0xcd, 0x37, 0xe3, 0xf1, 0x37, 0x59,
	0x74, 0x78, 0x95, 0xdb, 0xec, 0x25, 0xd3, 0x69, 0x2c, 0x92, 0xa3, 0xcc, 0x68, 0xab, 0x71, 0x9f,
	0x29, 0xb9, 0x98, 0xb1, 0x38, 0x61, 0x5a, 0x29, 0x9d, 0x7a, 0x34, 0xf8, 0x84, 0xc6, 0xb9, 0xcd,
	0x32, 0x23, 0xb4, 0x11, 0xf6, 0x1a, 0x3f, 0x41, 0x48, 0xa4, 0xb9, 0xa5, 0x29, 0xe3, 0x22, 0x22,
	0xbd, 0x65, 0x6f, 0x35, 0x08, 0x1b, 0x08, 0x5e, 0xa0, 0x61, 0xc9, 0x25, 0x3b, 0xee, 0xb4, 0x8a,
	0x83, 0x53, 0x27, 0x65, 0xb4, 0xb6, 0x46, 0x4b, 0x7e, 0xa7, 0x14, 0x46, 0xbb, 0xc0, 0x73, 0x32,
	0xa3, 0xd0, 0xfd, 0x0e, 0x7e, 0x0d, 0xd0, 0x04, 0x3a, 0x4f, 0xa4, 0x5e, 0x53, 0xc9, 0xe2, 0x04,
	0x3f, 0x46, 0xa3, 0xb5, 0x11, 0x51, 0xc2, 0x15, 0x65, 0x4e, 0x64, 0x14, 0xd6, 0x00, 0x5e, 0xa2,
	0xf1, 0x3a, 0x8b, 0x2e, 0xe0, 0x2a, 0x9c, 0xd9, 0xa2, 0xa3, 0x26, 0x84, 0x9f, 0xa1, 0xa9, 0xa7,
	0x47, 0x82, 0x2a, 0x6e, 0xb9, 0x21, 0x7d, 0x47, 0xea, 0xa0, 0x38, 0x40, 0x07, 0x4c, 0xa7, 0x5b,
	0x6e, 0x12, 0xae, 0x74, 0xc4, 0xc9, 0xae, 0x63, 0xb5, 0x30, 0xd0, 0xe2, 0x51, 0xc2, 0x33, 0x6d,
	0x2c, 0x4f, 0xe9, 0x5a, 0x72, 0x32, 0xf0, 0x5a, 0x6d, 0x14, 0x7a, 0xce, 0x6d, 0x56, 0x50, 0xf6,
	0x1c, 0xa5, 0x06, 0x40, 0x25, 0xb7, 0x59, 0x2c, 0x2f, 0xf2, 0x4d, 0x41, 0xd9, 0xf7, 0x2a, 0x6d,
	0x14, 0xe6, 0xa7, 0x72, 0x9b, 0x29, 0x7a, 0xb5, 0xd1, 0x19, 0x19, 0xfa, 0xf9, 0xd5, 0x08, 0x26,
	0x68, 0x1f, 0x02, 0x68, 0x76, 0xe4, 0xe6, 0x52, 0x86, 0xfe, 0x2e, 0xb9, 0x85, 0x49, 0x47, 0xd4,
	0x44, 0x04, 0xb9, 0xe3, 0x16, 0x86, 0x5f, 0x34, 0x1e, 0x72, 0xbc, 0xec, 0xad, 0xc6, 0xc7, 0xf3,
	0x23, 0xa6, 0xe4, 0x51, 0xc3, 0x0c, 0xf5, 0xd3, 0xe2, 0x15, 0x9a, 0x19, 0x9e, 0x08, 0x9d, 0x7a,
	0x47, 0x51, 0x66, 0xc9, 0x81, 0x6b, 0xa8, 0x0b, 0x83, 0x6e, 0xe9, 0x00, 0x32, 0x69, 0xeb, 0x96,
	0x78, 0x58, 0x31, 0xa0, 0xd3, 0x58, 0x9b, 0x4b, 0x6a, 0xa2, 0x88, 0x4b, 0x7a, 0x4d, 0xa6, 0x7e,
	0xea, 0x4d, 0x0c, 0xe6, 0xb0, 0xe1, 0x52, 0x6a, 0x2b, 0x14, 0x37, 0x64, 0xe6, 0xe7, 0x50, 0x23,
	0xe0, 0x01, 0xf7, 0x43, 0xd1, 0x2b, 0x9a, 0x70, 0x32, 0xf7, 0x1e, 0x68, 0x40, 0x15, 0x23, 0xa6,
	0xcc, 0x6a, 0x43, 0x0e, 0x1b, 0x0c, 0x0f, 0x41, 0x0d, 0x6b, 0x68, 0x9a, 0x4b, 0xa1, 0x84, 0x25,
	0xd8, 0xd7, 0xa8, 0x11, 0x38, 0xbf, 0xc8, 0x22, 0x6a, 0x39, 0x24, 0x91, 0x87, 0xcb, 0xde, 0xaa,
	0x1f, 0x36, 0x90, 0xe0, 0x67, 0xcf, 0xfb, 0xb6, 0x98, 0x46, 0x9c, 0x40, 0x86, 0x0f, 0x52, 0xaa,
	0x78, 0x61, 0xdc, 0x06, 0xd2, 0xd9, 0x8e, 0x9d, 0xdb, 0x16, 0x6d, 0x2b, 0x69, 0x2a, 0x45, 0x6e,
	0x9d, 0x63, 0x47, 0x61, 0x15, 0xe3, 0xa7, 0x68, 0x62, 0xf8, 0x56, 0xe4, 0x42, 0xa7, 0x92, 0x6f,
	0xb9, 0x2c, 0xcc, 0xda, 0x06, 0xbb, 0xbb, 0x31, 0xb8, 0xb1, 0x1b, 0xc1, 0x7b, 0x34, 0x84, 0xa6,
	0xc1, 0x17, 0xf7, 0xd9, 0x56, 0xe0, 0x15, 0x9d, 0xba, 0xdf, 0xc1, 0xef, 0x1d, 0x34, 0x06, 0x01,
	0xb0, 0x3e, 0xdc, 0xf9, 0x11, 0xda, 0x13, 0x71, 0xe3, 0xbe, 0x45, 0x04, 0xda, 0x50, 0x36, 0x16,
	0x12, 0xf6, 0xaf, 0xb8, 0x6b, 0x8d, 0xe0, 0xe7, 0xce, 0xc9, 0x4e, 0xbe, 0xef, 0x2c, 0x33, 0x71,
	0x96, 0x29, 0x7b, 0x0b, 0xcb, 0x53, 0x18, 0x4a, 0xb9, 0x6a, 0xc5, 0x9d, 0xab, 0xb8, 0xbd, 0x74,
	0x83, 0xee, 0xd2, 0x2d, 0xd1, 0x58, 0x6a, 0x9d, 0x95, 0xc3, 0xf0, 0x4b, 0xd9, 0x84, 0xf0, 0x6b,
	0x74, 0x00, 0x3a, 0xd5, 0x52, 0xec, 0xff, 0x65, 0x29, 0x5a, 0x2c, 0xd0, 0x05, 0x33, 0x97, 0xba,
	0x7e, 0x4b, 0x9b, 0x50, 0xc7, 0x5a, 0xa3, 0x3b, 0xac, 0x85, 0x6e, 0x58, 0xeb, 0x1b, 0x42, 0x30,
	0x08, 0xc5, 0x36, 0x9c, 0x7d, 0xef, 0x8c, 0x78, 0x50, 0x8d, 0x78, 0x81, 0x86, 0x8e, 0x40, 0xab,
	0x7f, 0xc1, 0x2a, 0xee, 0x54, 0xe8, 0x77, 0x2b, 0x1c, 0xff, 0xe8, 0xa3, 0xe9, 0x99, 0x92, 0x50,
	0x25, 0xe7, 0x66, 0x2b, 0x18, 0xc7, 0x6f, 0xd0, 0xf4, 0x9c, 0xdb, 0xaf, 0xb9, 0xcd, 0xbe, 0x68,
	0x63, 0xcf, 0xe2, 0x04, 0xcf, 0xab, 0x27, 0x29, 0x5e, 0x7b, 0x31, 0x73, 0x08, 0x8b, 0x13, 0x63,
	0x53, 0x91, 0xc6, 0x3a, 0x78, 0x00, 0x69, 0x1f, 0xb8, 0xfc, 0xe7, 0xb4, 0x77, 0x68, 0x76, 0xbe,
	0xd1, 0x97, 0x37, 0xf3, 0xf2, 0x8d, 0xbe, 0x64, 0x71, 0x02, 0xb4, 0x45, 0x8d, 0xd4, 0x89, 0x27,
	0x68, 0x5e, 0xb4, 0xf9, 0xd1, 0x7d, 0x30, 0x20, 0x13, 0x57, 0x15, 0xab, 0x8f, 0xc8, 0x6d, 0x35,
	0x4f, 0xd0, 0xbc, 0x68, 0xf5, 0x3f, 0x52, 0x0f, 0xcb, 0x76, 0xeb, 0xdc, 0xfb, 0x35, 0xfc, 0xb6,
	0x6a, 0xf8, 0xb3, 0x7b, 0x9e, 0x53, 0x66, 0xf1, 0xac, 0xaa, 0xea, 0xdf, 0xf8, 0x96, 0x92, 0xeb,
	0x3d, 0xf7, 0xb1, 0x7e, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x3b, 0xfc, 0x1c, 0xd7, 0x07,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CmlxstpserviceClient is the client API for Cmlxstpservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmlxstpserviceClient interface {
	//xstp在接口下的配置
	SetXstpPortCfg(ctx context.Context, in *Xstpportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelXstpPortCfg(ctx context.Context, in *Xstpportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	ShowXstpPortCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
	//xstp全局相关配置
	SetXstpGlobalCfg(ctx context.Context, in *Xstpglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelXstpGlobalCfg(ctx context.Context, in *Xstpglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	ShowXstpGlobalCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
	//xstp mcheck动作
	SetXstpMcheckAct(ctx context.Context, in *Xstpmcheck, opts ...grpc.CallOption) (*Cfgrtninfo, error)
}

type cmlxstpserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmlxstpserviceClient(cc grpc.ClientConnInterface) CmlxstpserviceClient {
	return &cmlxstpserviceClient{cc}
}

func (c *cmlxstpserviceClient) SetXstpPortCfg(ctx context.Context, in *Xstpportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlxstpservice/SetXstpPortCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlxstpserviceClient) DelXstpPortCfg(ctx context.Context, in *Xstpportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlxstpservice/DelXstpPortCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlxstpserviceClient) ShowXstpPortCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlxstpservice/ShowXstpPortCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlxstpserviceClient) SetXstpGlobalCfg(ctx context.Context, in *Xstpglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlxstpservice/SetXstpGlobalCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlxstpserviceClient) DelXstpGlobalCfg(ctx context.Context, in *Xstpglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlxstpservice/DelXstpGlobalCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlxstpserviceClient) ShowXstpGlobalCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlxstpservice/ShowXstpGlobalCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlxstpserviceClient) SetXstpMcheckAct(ctx context.Context, in *Xstpmcheck, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlxstpservice/SetXstpMcheckAct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmlxstpserviceServer is the server API for Cmlxstpservice service.
type CmlxstpserviceServer interface {
	//xstp在接口下的配置
	SetXstpPortCfg(context.Context, *Xstpportcfg) (*Cfgrtninfo, error)
	DelXstpPortCfg(context.Context, *Xstpportcfg) (*Cfgrtninfo, error)
	ShowXstpPortCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
	//xstp全局相关配置
	SetXstpGlobalCfg(context.Context, *Xstpglobalcfg) (*Cfgrtninfo, error)
	DelXstpGlobalCfg(context.Context, *Xstpglobalcfg) (*Cfgrtninfo, error)
	ShowXstpGlobalCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
	//xstp mcheck动作
	SetXstpMcheckAct(context.Context, *Xstpmcheck) (*Cfgrtninfo, error)
}

// UnimplementedCmlxstpserviceServer can be embedded to have forward compatible implementations.
type UnimplementedCmlxstpserviceServer struct {
}

func (*UnimplementedCmlxstpserviceServer) SetXstpPortCfg(ctx context.Context, req *Xstpportcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetXstpPortCfg not implemented")
}
func (*UnimplementedCmlxstpserviceServer) DelXstpPortCfg(ctx context.Context, req *Xstpportcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelXstpPortCfg not implemented")
}
func (*UnimplementedCmlxstpserviceServer) ShowXstpPortCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowXstpPortCfg not implemented")
}
func (*UnimplementedCmlxstpserviceServer) SetXstpGlobalCfg(ctx context.Context, req *Xstpglobalcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetXstpGlobalCfg not implemented")
}
func (*UnimplementedCmlxstpserviceServer) DelXstpGlobalCfg(ctx context.Context, req *Xstpglobalcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelXstpGlobalCfg not implemented")
}
func (*UnimplementedCmlxstpserviceServer) ShowXstpGlobalCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowXstpGlobalCfg not implemented")
}
func (*UnimplementedCmlxstpserviceServer) SetXstpMcheckAct(ctx context.Context, req *Xstpmcheck) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetXstpMcheckAct not implemented")
}

func RegisterCmlxstpserviceServer(s *grpc.Server, srv CmlxstpserviceServer) {
	s.RegisterService(&_Cmlxstpservice_serviceDesc, srv)
}

func _Cmlxstpservice_SetXstpPortCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xstpportcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlxstpserviceServer).SetXstpPortCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlxstpservice/SetXstpPortCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlxstpserviceServer).SetXstpPortCfg(ctx, req.(*Xstpportcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlxstpservice_DelXstpPortCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xstpportcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlxstpserviceServer).DelXstpPortCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlxstpservice/DelXstpPortCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlxstpserviceServer).DelXstpPortCfg(ctx, req.(*Xstpportcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlxstpservice_ShowXstpPortCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlxstpserviceServer).ShowXstpPortCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlxstpservice/ShowXstpPortCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlxstpserviceServer).ShowXstpPortCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlxstpservice_SetXstpGlobalCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xstpglobalcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlxstpserviceServer).SetXstpGlobalCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlxstpservice/SetXstpGlobalCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlxstpserviceServer).SetXstpGlobalCfg(ctx, req.(*Xstpglobalcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlxstpservice_DelXstpGlobalCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xstpglobalcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlxstpserviceServer).DelXstpGlobalCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlxstpservice/DelXstpGlobalCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlxstpserviceServer).DelXstpGlobalCfg(ctx, req.(*Xstpglobalcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlxstpservice_ShowXstpGlobalCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlxstpserviceServer).ShowXstpGlobalCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlxstpservice/ShowXstpGlobalCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlxstpserviceServer).ShowXstpGlobalCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlxstpservice_SetXstpMcheckAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xstpmcheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlxstpserviceServer).SetXstpMcheckAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlxstpservice/SetXstpMcheckAct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlxstpserviceServer).SetXstpMcheckAct(ctx, req.(*Xstpmcheck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmlxstpservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cml.Cmlxstpservice",
	HandlerType: (*CmlxstpserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetXstpPortCfg",
			Handler:    _Cmlxstpservice_SetXstpPortCfg_Handler,
		},
		{
			MethodName: "DelXstpPortCfg",
			Handler:    _Cmlxstpservice_DelXstpPortCfg_Handler,
		},
		{
			MethodName: "ShowXstpPortCfg",
			Handler:    _Cmlxstpservice_ShowXstpPortCfg_Handler,
		},
		{
			MethodName: "SetXstpGlobalCfg",
			Handler:    _Cmlxstpservice_SetXstpGlobalCfg_Handler,
		},
		{
			MethodName: "DelXstpGlobalCfg",
			Handler:    _Cmlxstpservice_DelXstpGlobalCfg_Handler,
		},
		{
			MethodName: "ShowXstpGlobalCfg",
			Handler:    _Cmlxstpservice_ShowXstpGlobalCfg_Handler,
		},
		{
			MethodName: "SetXstpMcheckAct",
			Handler:    _Cmlxstpservice_SetXstpMcheckAct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xstp-config.proto",
}
