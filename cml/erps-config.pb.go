// Code generated by protoc-gen-go. DO NOT EDIT.
// source: erps-config.proto

package cml

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//erps 全局配置
type Erpsglobalcfg struct {
	Ringid               int32    `protobuf:"varint,1,opt,name=ringid,proto3" json:"ringid,omitempty"`
	Controlvlan          int32    `protobuf:"varint,2,opt,name=controlvlan,proto3" json:"controlvlan,omitempty"`
	Descripstr           string   `protobuf:"bytes,3,opt,name=descripstr,proto3" json:"descripstr,omitempty"`
	Guardtimer           int32    `protobuf:"varint,4,opt,name=guardtimer,proto3" json:"guardtimer,omitempty"`
	Holdofftimer         int32    `protobuf:"varint,5,opt,name=holdofftimer,proto3" json:"holdofftimer,omitempty"`
	Protectinstance      string   `protobuf:"bytes,6,opt,name=protectinstance,proto3" json:"protectinstance,omitempty"`
	Rapsmel              int32    `protobuf:"varint,7,opt,name=rapsmel,proto3" json:"rapsmel,omitempty"`
	Revertiveenable      int32    `protobuf:"varint,8,opt,name=revertiveenable,proto3" json:"revertiveenable,omitempty"`
	Subring              int32    `protobuf:"varint,9,opt,name=subring,proto3" json:"subring,omitempty"`
	Tcnotifyinstance     string   `protobuf:"bytes,10,opt,name=tcnotifyinstance,proto3" json:"tcnotifyinstance,omitempty"`
	Tcprotecinterval     int32    `protobuf:"varint,11,opt,name=tcprotecinterval,proto3" json:"tcprotecinterval,omitempty"`
	Version              int32    `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`
	Wtrtimer             int32    `protobuf:"varint,13,opt,name=wtrtimer,proto3" json:"wtrtimer,omitempty"`
	Updatetime           int64    `protobuf:"varint,14,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Erpsglobalcfg) Reset()         { *m = Erpsglobalcfg{} }
func (m *Erpsglobalcfg) String() string { return proto.CompactTextString(m) }
func (*Erpsglobalcfg) ProtoMessage()    {}
func (*Erpsglobalcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb38abfc1d3891d, []int{0}
}

func (m *Erpsglobalcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erpsglobalcfg.Unmarshal(m, b)
}
func (m *Erpsglobalcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erpsglobalcfg.Marshal(b, m, deterministic)
}
func (m *Erpsglobalcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erpsglobalcfg.Merge(m, src)
}
func (m *Erpsglobalcfg) XXX_Size() int {
	return xxx_messageInfo_Erpsglobalcfg.Size(m)
}
func (m *Erpsglobalcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Erpsglobalcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Erpsglobalcfg proto.InternalMessageInfo

func (m *Erpsglobalcfg) GetRingid() int32 {
	if m != nil {
		return m.Ringid
	}
	return 0
}

func (m *Erpsglobalcfg) GetControlvlan() int32 {
	if m != nil {
		return m.Controlvlan
	}
	return 0
}

func (m *Erpsglobalcfg) GetDescripstr() string {
	if m != nil {
		return m.Descripstr
	}
	return ""
}

func (m *Erpsglobalcfg) GetGuardtimer() int32 {
	if m != nil {
		return m.Guardtimer
	}
	return 0
}

func (m *Erpsglobalcfg) GetHoldofftimer() int32 {
	if m != nil {
		return m.Holdofftimer
	}
	return 0
}

func (m *Erpsglobalcfg) GetProtectinstance() string {
	if m != nil {
		return m.Protectinstance
	}
	return ""
}

func (m *Erpsglobalcfg) GetRapsmel() int32 {
	if m != nil {
		return m.Rapsmel
	}
	return 0
}

func (m *Erpsglobalcfg) GetRevertiveenable() int32 {
	if m != nil {
		return m.Revertiveenable
	}
	return 0
}

func (m *Erpsglobalcfg) GetSubring() int32 {
	if m != nil {
		return m.Subring
	}
	return 0
}

func (m *Erpsglobalcfg) GetTcnotifyinstance() string {
	if m != nil {
		return m.Tcnotifyinstance
	}
	return ""
}

func (m *Erpsglobalcfg) GetTcprotecinterval() int32 {
	if m != nil {
		return m.Tcprotecinterval
	}
	return 0
}

func (m *Erpsglobalcfg) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Erpsglobalcfg) GetWtrtimer() int32 {
	if m != nil {
		return m.Wtrtimer
	}
	return 0
}

func (m *Erpsglobalcfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//接口ring配置
type Ringrolecfg struct {
	Ringid               int32    `protobuf:"varint,1,opt,name=ringid,proto3" json:"ringid,omitempty"`
	Role                 string   `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ringrolecfg) Reset()         { *m = Ringrolecfg{} }
func (m *Ringrolecfg) String() string { return proto.CompactTextString(m) }
func (*Ringrolecfg) ProtoMessage()    {}
func (*Ringrolecfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb38abfc1d3891d, []int{1}
}

func (m *Ringrolecfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ringrolecfg.Unmarshal(m, b)
}
func (m *Ringrolecfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ringrolecfg.Marshal(b, m, deterministic)
}
func (m *Ringrolecfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ringrolecfg.Merge(m, src)
}
func (m *Ringrolecfg) XXX_Size() int {
	return xxx_messageInfo_Ringrolecfg.Size(m)
}
func (m *Ringrolecfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Ringrolecfg.DiscardUnknown(m)
}

var xxx_messageInfo_Ringrolecfg proto.InternalMessageInfo

func (m *Ringrolecfg) GetRingid() int32 {
	if m != nil {
		return m.Ringid
	}
	return 0
}

func (m *Ringrolecfg) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

//端口下erps的相关配置
type Erpsportcfg struct {
	Ifname               string       `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Ringrole             *Ringrolecfg `protobuf:"bytes,2,opt,name=ringrole,proto3" json:"ringrole,omitempty"`
	Updatetime           int64        `protobuf:"varint,3,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Erpsportcfg) Reset()         { *m = Erpsportcfg{} }
func (m *Erpsportcfg) String() string { return proto.CompactTextString(m) }
func (*Erpsportcfg) ProtoMessage()    {}
func (*Erpsportcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb38abfc1d3891d, []int{2}
}

func (m *Erpsportcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erpsportcfg.Unmarshal(m, b)
}
func (m *Erpsportcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erpsportcfg.Marshal(b, m, deterministic)
}
func (m *Erpsportcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erpsportcfg.Merge(m, src)
}
func (m *Erpsportcfg) XXX_Size() int {
	return xxx_messageInfo_Erpsportcfg.Size(m)
}
func (m *Erpsportcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Erpsportcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Erpsportcfg proto.InternalMessageInfo

func (m *Erpsportcfg) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *Erpsportcfg) GetRingrole() *Ringrolecfg {
	if m != nil {
		return m.Ringrole
	}
	return nil
}

func (m *Erpsportcfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//erps ring act
type Erpsact struct {
	Ringid               int32    `protobuf:"varint,1,opt,name=ringid,proto3" json:"ringid,omitempty"`
	Ifname               string   `protobuf:"bytes,2,opt,name=ifname,proto3" json:"ifname,omitempty"`
	Clearact             int32    `protobuf:"varint,3,opt,name=clearact,proto3" json:"clearact,omitempty"`
	Switchmode           int32    `protobuf:"varint,4,opt,name=switchmode,proto3" json:"switchmode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Erpsact) Reset()         { *m = Erpsact{} }
func (m *Erpsact) String() string { return proto.CompactTextString(m) }
func (*Erpsact) ProtoMessage()    {}
func (*Erpsact) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb38abfc1d3891d, []int{3}
}

func (m *Erpsact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Erpsact.Unmarshal(m, b)
}
func (m *Erpsact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Erpsact.Marshal(b, m, deterministic)
}
func (m *Erpsact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Erpsact.Merge(m, src)
}
func (m *Erpsact) XXX_Size() int {
	return xxx_messageInfo_Erpsact.Size(m)
}
func (m *Erpsact) XXX_DiscardUnknown() {
	xxx_messageInfo_Erpsact.DiscardUnknown(m)
}

var xxx_messageInfo_Erpsact proto.InternalMessageInfo

func (m *Erpsact) GetRingid() int32 {
	if m != nil {
		return m.Ringid
	}
	return 0
}

func (m *Erpsact) GetIfname() string {
	if m != nil {
		return m.Ifname
	}
	return ""
}

func (m *Erpsact) GetClearact() int32 {
	if m != nil {
		return m.Clearact
	}
	return 0
}

func (m *Erpsact) GetSwitchmode() int32 {
	if m != nil {
		return m.Switchmode
	}
	return 0
}

func init() {
	proto.RegisterType((*Erpsglobalcfg)(nil), "cml.erpsglobalcfg")
	proto.RegisterType((*Ringrolecfg)(nil), "cml.ringrolecfg")
	proto.RegisterType((*Erpsportcfg)(nil), "cml.erpsportcfg")
	proto.RegisterType((*Erpsact)(nil), "cml.erpsact")
}

func init() {
	proto.RegisterFile("erps-config.proto", fileDescriptor_bbb38abfc1d3891d)
}

var fileDescriptor_bbb38abfc1d3891d = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xd1, 0x6e, 0xda, 0x30,
	0x14, 0x1d, 0x4d, 0x5b, 0xe0, 0x42, 0x81, 0xfa, 0x61, 0xb2, 0x78, 0x98, 0x10, 0x4f, 0x68, 0xea,
	0x78, 0xe8, 0x54, 0x4d, 0x7d, 0x9c, 0xda, 0x69, 0xaf, 0x53, 0xfa, 0x05, 0xc6, 0xb9, 0x0e, 0x96,
	0x1c, 0x3b, 0xb2, 0x4d, 0xd0, 0x7e, 0x64, 0x3f, 0xb8, 0x1f, 0x99, 0xec, 0x04, 0x08, 0xd0, 0x6d,
	0xda, 0xde, 0x38, 0xc7, 0xe7, 0xdc, 0x73, 0xb8, 0x4e, 0x02, 0xb7, 0x68, 0x4b, 0xf7, 0x81, 0x1b,
	0x2d, 0x64, 0xbe, 0x2c, 0xad, 0xf1, 0x86, 0x24, 0xbc, 0x50, 0xd3, 0x31, 0x17, 0x39, 0x37, 0x45,
	0x61, 0x74, 0xcd, 0xce, 0x7f, 0x26, 0x70, 0x13, 0xb4, 0xb9, 0x32, 0x2b, 0xa6, 0xb8, 0xc8, 0xc9,
	0x5b, 0xb8, 0xb6, 0x52, 0xe7, 0x32, 0xa3, 0x9d, 0x59, 0x67, 0x71, 0x95, 0x36, 0x88, 0xcc, 0x60,
	0xc0, 0x8d, 0xf6, 0xd6, 0xa8, 0x4a, 0x31, 0x4d, 0x2f, 0xe2, 0x61, 0x9b, 0x22, 0xef, 0x00, 0x32,
	0x74, 0xdc, 0xca, 0xd2, 0x79, 0x4b, 0x93, 0x59, 0x67, 0xd1, 0x4f, 0x5b, 0x4c, 0x38, 0xcf, 0x37,
	0xcc, 0x66, 0x5e, 0x16, 0x68, 0xe9, 0x65, 0x1c, 0xd0, 0x62, 0xc8, 0x1c, 0x86, 0x6b, 0xa3, 0x32,
	0x23, 0x44, 0xad, 0xb8, 0x8a, 0x8a, 0x23, 0x8e, 0x2c, 0x60, 0x1c, 0x8a, 0x23, 0xf7, 0x52, 0x3b,
	0xcf, 0x34, 0x47, 0x7a, 0x1d, 0x83, 0x4e, 0x69, 0x42, 0xa1, 0x6b, 0x59, 0xe9, 0x0a, 0x54, 0xb4,
	0x1b, 0x07, 0xed, 0x60, 0x98, 0x61, 0xb1, 0x42, 0xeb, 0x65, 0x85, 0xa8, 0xd9, 0x4a, 0x21, 0xed,
	0x45, 0xc5, 0x29, 0x1d, 0x66, 0xb8, 0xcd, 0x2a, 0x2c, 0x80, 0xf6, 0xeb, 0x19, 0x0d, 0x24, 0xef,
	0x61, 0xe2, 0xb9, 0x36, 0x5e, 0x8a, 0xef, 0xfb, 0x22, 0x10, 0x8b, 0x9c, 0xf1, 0xb5, 0xb6, 0xae,
	0x27, 0xb5, 0x47, 0x5b, 0x31, 0x45, 0x07, 0x71, 0xdc, 0x19, 0x1f, 0x12, 0x2b, 0xb4, 0x4e, 0x1a,
	0x4d, 0x87, 0x75, 0x62, 0x03, 0xc9, 0x14, 0x7a, 0x5b, 0x6f, 0xeb, 0xcd, 0xdc, 0xc4, 0xa3, 0x3d,
	0x0e, 0x9b, 0xdd, 0x94, 0x19, 0xf3, 0x18, 0x20, 0x1d, 0xcd, 0x3a, 0x8b, 0x24, 0x6d, 0x31, 0xf3,
	0x47, 0x18, 0x84, 0xd6, 0xd6, 0x28, 0xfc, 0xd3, 0x15, 0x13, 0xb8, 0x0c, 0x92, 0x78, 0xb7, 0xfd,
	0x34, 0xfe, 0x9e, 0x3b, 0x18, 0x84, 0xe7, 0xa3, 0x34, 0xd6, 0x37, 0x56, 0x29, 0x34, 0x2b, 0x30,
	0x5a, 0xfb, 0x69, 0x83, 0xc8, 0x1d, 0xf4, 0x76, 0x09, 0xd1, 0x3e, 0xb8, 0x9f, 0x2c, 0x79, 0xa1,
	0x96, 0xad, 0xd8, 0x74, 0xaf, 0x38, 0xe9, 0x9b, 0x9c, 0xf5, 0xdd, 0x40, 0x37, 0x84, 0x32, 0xee,
	0x7f, 0xdb, 0xf5, 0x50, 0xe4, 0xe2, 0xa8, 0xc8, 0x14, 0x7a, 0x5c, 0x21, 0xb3, 0x8c, 0xfb, 0x38,
	0xf8, 0x2a, 0xdd, 0xe3, 0x10, 0xeb, 0xb6, 0xd2, 0xf3, 0x75, 0x61, 0x32, 0xdc, 0x3d, 0x80, 0x07,
	0xe6, 0xfe, 0x47, 0x02, 0xa3, 0xa7, 0x42, 0x85, 0x68, 0x87, 0xb6, 0x92, 0x1c, 0xc9, 0x23, 0x4c,
	0x5e, 0xd0, 0x7f, 0xb1, 0xa5, 0xfb, 0x1a, 0xdf, 0x90, 0x27, 0x91, 0x13, 0x12, 0xff, 0xd9, 0xd1,
	0x5b, 0x33, 0x1d, 0x47, 0x8e, 0x8b, 0xdc, 0x7a, 0x2d, 0xb5, 0x30, 0xf3, 0x37, 0xc1, 0xfa, 0x8c,
	0xea, 0x3f, 0xad, 0xb7, 0x2f, 0x6b, 0xb3, 0x3d, 0xf6, 0xd6, 0x0b, 0x75, 0x6b, 0xb3, 0xe5, 0x22,
	0x0f, 0xc2, 0xe9, 0x81, 0x39, 0x58, 0x1f, 0x60, 0xd4, 0x14, 0xfe, 0x66, 0xac, 0x3f, 0xf8, 0x5a,
	0x97, 0xf8, 0x5a, 0xe2, 0x03, 0x8c, 0x9a, 0xb2, 0xff, 0x64, 0xfb, 0x04, 0xe3, 0x5d, 0xd1, 0x63,
	0xdf, 0xdf, 0x6a, 0xde, 0x41, 0xff, 0xd9, 0x04, 0xdb, 0x67, 0xee, 0xc9, 0x70, 0x1f, 0xc5, 0xb8,
	0x7f, 0x25, 0x66, 0x75, 0x1d, 0x3f, 0x56, 0x1f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xca, 0x02,
	0xb6, 0xd3, 0xd7, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CmlerpsserviceClient is the client API for Cmlerpsservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmlerpsserviceClient interface {
	//erps全局配置
	SetErpsGlobalCfg(ctx context.Context, in *Erpsglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelErpsGlobalCfg(ctx context.Context, in *Erpsglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	//show返回配置信息,在客户端组织数据显示
	ShowErpsGlobalCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
	//erps在接口下的配置
	SetErpsPortCfg(ctx context.Context, in *Erpsportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelErpsPortCfg(ctx context.Context, in *Erpsportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	//show返回配置信息,在客户端组织数据显示
	ShowErpsPortCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
	//erps的动作执行命令
	DoErpsAct(ctx context.Context, in *Erpsact, opts ...grpc.CallOption) (*Cfgrtninfo, error)
}

type cmlerpsserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmlerpsserviceClient(cc grpc.ClientConnInterface) CmlerpsserviceClient {
	return &cmlerpsserviceClient{cc}
}

func (c *cmlerpsserviceClient) SetErpsGlobalCfg(ctx context.Context, in *Erpsglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlerpsservice/SetErpsGlobalCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlerpsserviceClient) DelErpsGlobalCfg(ctx context.Context, in *Erpsglobalcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlerpsservice/DelErpsGlobalCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlerpsserviceClient) ShowErpsGlobalCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlerpsservice/ShowErpsGlobalCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlerpsserviceClient) SetErpsPortCfg(ctx context.Context, in *Erpsportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlerpsservice/SetErpsPortCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlerpsserviceClient) DelErpsPortCfg(ctx context.Context, in *Erpsportcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlerpsservice/DelErpsPortCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlerpsserviceClient) ShowErpsPortCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlerpsservice/ShowErpsPortCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlerpsserviceClient) DoErpsAct(ctx context.Context, in *Erpsact, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlerpsservice/DoErpsAct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmlerpsserviceServer is the server API for Cmlerpsservice service.
type CmlerpsserviceServer interface {
	//erps全局配置
	SetErpsGlobalCfg(context.Context, *Erpsglobalcfg) (*Cfgrtninfo, error)
	DelErpsGlobalCfg(context.Context, *Erpsglobalcfg) (*Cfgrtninfo, error)
	//show返回配置信息,在客户端组织数据显示
	ShowErpsGlobalCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
	//erps在接口下的配置
	SetErpsPortCfg(context.Context, *Erpsportcfg) (*Cfgrtninfo, error)
	DelErpsPortCfg(context.Context, *Erpsportcfg) (*Cfgrtninfo, error)
	//show返回配置信息,在客户端组织数据显示
	ShowErpsPortCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
	//erps的动作执行命令
	DoErpsAct(context.Context, *Erpsact) (*Cfgrtninfo, error)
}

// UnimplementedCmlerpsserviceServer can be embedded to have forward compatible implementations.
type UnimplementedCmlerpsserviceServer struct {
}

func (*UnimplementedCmlerpsserviceServer) SetErpsGlobalCfg(ctx context.Context, req *Erpsglobalcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetErpsGlobalCfg not implemented")
}
func (*UnimplementedCmlerpsserviceServer) DelErpsGlobalCfg(ctx context.Context, req *Erpsglobalcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelErpsGlobalCfg not implemented")
}
func (*UnimplementedCmlerpsserviceServer) ShowErpsGlobalCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowErpsGlobalCfg not implemented")
}
func (*UnimplementedCmlerpsserviceServer) SetErpsPortCfg(ctx context.Context, req *Erpsportcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetErpsPortCfg not implemented")
}
func (*UnimplementedCmlerpsserviceServer) DelErpsPortCfg(ctx context.Context, req *Erpsportcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelErpsPortCfg not implemented")
}
func (*UnimplementedCmlerpsserviceServer) ShowErpsPortCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowErpsPortCfg not implemented")
}
func (*UnimplementedCmlerpsserviceServer) DoErpsAct(ctx context.Context, req *Erpsact) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoErpsAct not implemented")
}

func RegisterCmlerpsserviceServer(s *grpc.Server, srv CmlerpsserviceServer) {
	s.RegisterService(&_Cmlerpsservice_serviceDesc, srv)
}

func _Cmlerpsservice_SetErpsGlobalCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erpsglobalcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlerpsserviceServer).SetErpsGlobalCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlerpsservice/SetErpsGlobalCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlerpsserviceServer).SetErpsGlobalCfg(ctx, req.(*Erpsglobalcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlerpsservice_DelErpsGlobalCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erpsglobalcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlerpsserviceServer).DelErpsGlobalCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlerpsservice/DelErpsGlobalCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlerpsserviceServer).DelErpsGlobalCfg(ctx, req.(*Erpsglobalcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlerpsservice_ShowErpsGlobalCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlerpsserviceServer).ShowErpsGlobalCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlerpsservice/ShowErpsGlobalCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlerpsserviceServer).ShowErpsGlobalCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlerpsservice_SetErpsPortCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erpsportcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlerpsserviceServer).SetErpsPortCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlerpsservice/SetErpsPortCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlerpsserviceServer).SetErpsPortCfg(ctx, req.(*Erpsportcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlerpsservice_DelErpsPortCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erpsportcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlerpsserviceServer).DelErpsPortCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlerpsservice/DelErpsPortCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlerpsserviceServer).DelErpsPortCfg(ctx, req.(*Erpsportcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlerpsservice_ShowErpsPortCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlerpsserviceServer).ShowErpsPortCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlerpsservice/ShowErpsPortCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlerpsserviceServer).ShowErpsPortCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlerpsservice_DoErpsAct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Erpsact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlerpsserviceServer).DoErpsAct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlerpsservice/DoErpsAct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlerpsserviceServer).DoErpsAct(ctx, req.(*Erpsact))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmlerpsservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cml.Cmlerpsservice",
	HandlerType: (*CmlerpsserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetErpsGlobalCfg",
			Handler:    _Cmlerpsservice_SetErpsGlobalCfg_Handler,
		},
		{
			MethodName: "DelErpsGlobalCfg",
			Handler:    _Cmlerpsservice_DelErpsGlobalCfg_Handler,
		},
		{
			MethodName: "ShowErpsGlobalCfg",
			Handler:    _Cmlerpsservice_ShowErpsGlobalCfg_Handler,
		},
		{
			MethodName: "SetErpsPortCfg",
			Handler:    _Cmlerpsservice_SetErpsPortCfg_Handler,
		},
		{
			MethodName: "DelErpsPortCfg",
			Handler:    _Cmlerpsservice_DelErpsPortCfg_Handler,
		},
		{
			MethodName: "ShowErpsPortCfg",
			Handler:    _Cmlerpsservice_ShowErpsPortCfg_Handler,
		},
		{
			MethodName: "DoErpsAct",
			Handler:    _Cmlerpsservice_DoErpsAct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "erps-config.proto",
}
