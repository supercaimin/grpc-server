// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comm_types.proto

package cml

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IP_ADDR_TYPE int32

const (
	IP_ADDR_TYPE_IPV4 IP_ADDR_TYPE = 0
	IP_ADDR_TYPE_IPV6 IP_ADDR_TYPE = 1
)

var IP_ADDR_TYPE_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}

var IP_ADDR_TYPE_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x IP_ADDR_TYPE) String() string {
	return proto.EnumName(IP_ADDR_TYPE_name, int32(x))
}

func (IP_ADDR_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{0}
}

type DATAOP int32

const (
	DATAOP_READ   DATAOP = 0
	DATAOP_ADD    DATAOP = 1
	DATAOP_UPDATE DATAOP = 2
	DATAOP_DEL    DATAOP = 3
)

var DATAOP_name = map[int32]string{
	0: "READ",
	1: "ADD",
	2: "UPDATE",
	3: "DEL",
}

var DATAOP_value = map[string]int32{
	"READ":   0,
	"ADD":    1,
	"UPDATE": 2,
	"DEL":    3,
}

func (x DATAOP) String() string {
	return proto.EnumName(DATAOP_name, int32(x))
}

func (DATAOP) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{1}
}

//系统的IP_Proto定义
type IP_PROTO int32

const (
	IP_PROTO_UNKNOWN   IP_PROTO = 0
	IP_PROTO_ICMP      IP_PROTO = 1
	IP_PROTO_IGMP      IP_PROTO = 2
	IP_PROTO_TCP       IP_PROTO = 6
	IP_PROTO_UDP       IP_PROTO = 17
	IP_PROTO_DCCP      IP_PROTO = 33
	IP_PROTO_RSVP      IP_PROTO = 46
	IP_PROTO_GRE       IP_PROTO = 47
	IP_PROTO_IPSEC_ESP IP_PROTO = 50
	IP_PROTO_IPSEC_AH  IP_PROTO = 51
	IP_PROTO_EIGRP     IP_PROTO = 88
	IP_PROTO_OSPF      IP_PROTO = 89
	IP_PROTO_L2TP      IP_PROTO = 115
	IP_PROTO_SCTP      IP_PROTO = 132
	IP_PROTO_HIP       IP_PROTO = 139
)

var IP_PROTO_name = map[int32]string{
	0:   "UNKNOWN",
	1:   "ICMP",
	2:   "IGMP",
	6:   "TCP",
	17:  "UDP",
	33:  "DCCP",
	46:  "RSVP",
	47:  "GRE",
	50:  "IPSEC_ESP",
	51:  "IPSEC_AH",
	88:  "EIGRP",
	89:  "OSPF",
	115: "L2TP",
	132: "SCTP",
	139: "HIP",
}

var IP_PROTO_value = map[string]int32{
	"UNKNOWN":   0,
	"ICMP":      1,
	"IGMP":      2,
	"TCP":       6,
	"UDP":       17,
	"DCCP":      33,
	"RSVP":      46,
	"GRE":       47,
	"IPSEC_ESP": 50,
	"IPSEC_AH":  51,
	"EIGRP":     88,
	"OSPF":      89,
	"L2TP":      115,
	"SCTP":      132,
	"HIP":       139,
}

func (x IP_PROTO) String() string {
	return proto.EnumName(IP_PROTO_name, int32(x))
}

func (IP_PROTO) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{2}
}

//Protocols to manage a given device
type MGMT_PROTO int32

const (
	MGMT_PROTO_PROTO_UNKNOW MGMT_PROTO = 0
	MGMT_PROTO_gRPC         MGMT_PROTO = 1
	MGMT_PROTO_OVSDB        MGMT_PROTO = 2
	MGMT_PROTO_NETConf      MGMT_PROTO = 3
	MGMT_PROTO_RESTful      MGMT_PROTO = 4
	MGMT_PROTO_SNMPv2       MGMT_PROTO = 5
	MGMT_PROTO_SNMPv3       MGMT_PROTO = 6
)

var MGMT_PROTO_name = map[int32]string{
	0: "PROTO_UNKNOW",
	1: "gRPC",
	2: "OVSDB",
	3: "NETConf",
	4: "RESTful",
	5: "SNMPv2",
	6: "SNMPv3",
}

var MGMT_PROTO_value = map[string]int32{
	"PROTO_UNKNOW": 0,
	"gRPC":         1,
	"OVSDB":        2,
	"NETConf":      3,
	"RESTful":      4,
	"SNMPv2":       5,
	"SNMPv3":       6,
}

func (x MGMT_PROTO) String() string {
	return proto.EnumName(MGMT_PROTO_name, int32(x))
}

func (MGMT_PROTO) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{3}
}

//Overlay Tunnel/VPN Type, in datacenter it's typically one of these vxlan tunnels
type TUNNEL_TYPE int32

const (
	TUNNEL_TYPE_SSL              TUNNEL_TYPE = 0
	TUNNEL_TYPE_VXLAN            TUNNEL_TYPE = 1
	TUNNEL_TYPE_VXLAN_GPE        TUNNEL_TYPE = 2
	TUNNEL_TYPE_GENEVE           TUNNEL_TYPE = 3
	TUNNEL_TYPE_IPSEC            TUNNEL_TYPE = 4
	TUNNEL_TYPE_VXLAN_OVER_IPSEC TUNNEL_TYPE = 5
	TUNNEL_TYPE_MPLS             TUNNEL_TYPE = 6
	TUNNEL_TYPE_VXLAN_OVE_SSL    TUNNEL_TYPE = 7
)

var TUNNEL_TYPE_name = map[int32]string{
	0: "SSL",
	1: "VXLAN",
	2: "VXLAN_GPE",
	3: "GENEVE",
	4: "IPSEC",
	5: "VXLAN_OVER_IPSEC",
	6: "MPLS",
	7: "VXLAN_OVE_SSL",
}

var TUNNEL_TYPE_value = map[string]int32{
	"SSL":              0,
	"VXLAN":            1,
	"VXLAN_GPE":        2,
	"GENEVE":           3,
	"IPSEC":            4,
	"VXLAN_OVER_IPSEC": 5,
	"MPLS":             6,
	"VXLAN_OVE_SSL":    7,
}

func (x TUNNEL_TYPE) String() string {
	return proto.EnumName(TUNNEL_TYPE_name, int32(x))
}

func (TUNNEL_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{4}
}

type NetworkType int32

const (
	NetworkType_NETWORK_UNKNOW    NetworkType = 0
	NetworkType_NETWORK_VLAN      NetworkType = 1
	NetworkType_NETWORK_VXLAN     NetworkType = 2
	NetworkType_NETWORK_VXLAN_GPE NetworkType = 3
	NetworkType_NETWORK_GENEVE    NetworkType = 4
	NetworkType_NETWORK_SR_UDP    NetworkType = 5
)

var NetworkType_name = map[int32]string{
	0: "NETWORK_UNKNOW",
	1: "NETWORK_VLAN",
	2: "NETWORK_VXLAN",
	3: "NETWORK_VXLAN_GPE",
	4: "NETWORK_GENEVE",
	5: "NETWORK_SR_UDP",
}

var NetworkType_value = map[string]int32{
	"NETWORK_UNKNOW":    0,
	"NETWORK_VLAN":      1,
	"NETWORK_VXLAN":     2,
	"NETWORK_VXLAN_GPE": 3,
	"NETWORK_GENEVE":    4,
	"NETWORK_SR_UDP":    5,
}

func (x NetworkType) String() string {
	return proto.EnumName(NetworkType_name, int32(x))
}

func (NetworkType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{5}
}

//网络接口类型
type IF_TYPE int32

const (
	IF_TYPE_IF_UNKNOW IF_TYPE = 0
	IF_TYPE_IF_PHY    IF_TYPE = 1
	IF_TYPE_IF_VLAN   IF_TYPE = 2
	IF_TYPE_IF_VXLAN  IF_TYPE = 3
	IF_TYPE_IF_MPLS   IF_TYPE = 4
)

var IF_TYPE_name = map[int32]string{
	0: "IF_UNKNOW",
	1: "IF_PHY",
	2: "IF_VLAN",
	3: "IF_VXLAN",
	4: "IF_MPLS",
}

var IF_TYPE_value = map[string]int32{
	"IF_UNKNOW": 0,
	"IF_PHY":    1,
	"IF_VLAN":   2,
	"IF_VXLAN":  3,
	"IF_MPLS":   4,
}

func (x IF_TYPE) String() string {
	return proto.EnumName(IF_TYPE_name, int32(x))
}

func (IF_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{6}
}

//Status of Device, port, link
type RES_STATE int32

const (
	RES_STATE_UP   RES_STATE = 0
	RES_STATE_DOWN RES_STATE = 1
)

var RES_STATE_name = map[int32]string{
	0: "UP",
	1: "DOWN",
}

var RES_STATE_value = map[string]int32{
	"UP":   0,
	"DOWN": 1,
}

func (x RES_STATE) String() string {
	return proto.EnumName(RES_STATE_name, int32(x))
}

func (RES_STATE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{7}
}

//Direction of ACL, Flow
type DIRECTION int32

const (
	DIRECTION_INGRESS DIRECTION = 0
	DIRECTION_EGRESS  DIRECTION = 1
)

var DIRECTION_name = map[int32]string{
	0: "INGRESS",
	1: "EGRESS",
}

var DIRECTION_value = map[string]int32{
	"INGRESS": 0,
	"EGRESS":  1,
}

func (x DIRECTION) String() string {
	return proto.EnumName(DIRECTION_name, int32(x))
}

func (DIRECTION) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{8}
}

//操作维护相关消息定义，包括对账，统计相关消息
type DEV_TABLE int32

const (
	DEV_TABLE_DATA_ALL                 DEV_TABLE = 0
	DEV_TABLE_PORT                     DEV_TABLE = 1
	DEV_TABLE_INTERFACE                DEV_TABLE = 2
	DEV_TABLE_LOOPBACK_INTF            DEV_TABLE = 3
	DEV_TABLE_VLAN                     DEV_TABLE = 4
	DEV_TABLE_VLAN_MEMBER              DEV_TABLE = 5
	DEV_TABLE_LAG                      DEV_TABLE = 6
	DEV_TABLE_LAG_MEMBER               DEV_TABLE = 7
	DEV_TABLE_SWITCH                   DEV_TABLE = 8
	DEV_TABLE_VRF                      DEV_TABLE = 9
	DEV_TABLE_VNET                     DEV_TABLE = 10
	DEV_TABLE_STATIC_HOST              DEV_TABLE = 20
	DEV_TABLE_STATIC_ARP               DEV_TABLE = 21
	DEV_TABLE_STATIC_ROUTE             DEV_TABLE = 22
	DEV_TABLE_ACL_PROFILE              DEV_TABLE = 23
	DEV_TABLE_ACL_RULE                 DEV_TABLE = 24
	DEV_TABLE_ACL_BINDING              DEV_TABLE = 25
	DEV_TABLE_DHCP_SERVER              DEV_TABLE = 30
	DEV_TABLE_NTP_SERVER               DEV_TABLE = 31
	DEV_TABLE_SYSLOG_SERVER            DEV_TABLE = 32
	DEV_TABLE_BGP_NEIGHBOR             DEV_TABLE = 33
	DEV_TABLE_DEVICE_NEIGHBOR          DEV_TABLE = 34
	DEV_TABLE_DEVICE_NEIGHBOR_METADATA DEV_TABLE = 35
	DEV_TABLE_MIRROR_SESSION           DEV_TABLE = 36
	//QoS相关配置项
	DEV_TABLE_QUEUE                              DEV_TABLE = 50
	DEV_TABLE_PFC_WD                             DEV_TABLE = 51
	DEV_TABLE_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP DEV_TABLE = 52
	DEV_TABLE_TC_TO_PRIORITY_GROUP_MAP           DEV_TABLE = 53
	DEV_TABLE_MAP_PFC_PRIORITY_TO_QUEUE          DEV_TABLE = 54
	DEV_TABLE_TC_TO_QUEUE_MAP                    DEV_TABLE = 55
	DEV_TABLE_DSCP_TO_TC_MAP                     DEV_TABLE = 56
	DEV_TABLE_PORT_QOS_MAP                       DEV_TABLE = 57
	DEV_TABLE_DOT1P_TO_TC_MAP                    DEV_TABLE = 58
	DEV_TABLE_SCHEDULER                          DEV_TABLE = 60
	DEV_TABLE_WRED_PROFILE                       DEV_TABLE = 61
	DEV_TABLE_BUFFER_POOL                        DEV_TABLE = 62
	DEV_TABLE_BUFFER_PROFILE                     DEV_TABLE = 63
	DEV_TABLE_BUFFER_QUEUE                       DEV_TABLE = 64
	DEV_TABLE_BUFFER_PG                          DEV_TABLE = 65
	DEV_TABLE_BUFFER_PORT_INGRESS_PROFILE_LIST   DEV_TABLE = 66
	DEV_TABLE_BUFFER_PORT_EGRESS_PROFILE_LIST    DEV_TABLE = 67
	DEV_TABLE_POLICER                            DEV_TABLE = 68
	DEV_TABLE_VXLAN_TUNNEL                       DEV_TABLE = 70
	DEV_TABLE_VXLAN_TUNNEL_MAP                   DEV_TABLE = 71
	DEV_TABLE_NEIGH                              DEV_TABLE = 72
	DEV_TABLE_VNET_ROUTE                         DEV_TABLE = 73
	DEV_TABLE_VNET_ROUTE_TUNNEL                  DEV_TABLE = 74
	DEV_TABLE_PASS_THROUGH_ROUTE_TABLE           DEV_TABLE = 75
	DEV_TABLE_FLEX_COUNTER_TABLE                 DEV_TABLE = 80
	DEV_TABLE_WATERMARK_TABLE                    DEV_TABLE = 81
	DEV_TABLE_WARM_RESTART                       DEV_TABLE = 100
	DEV_TABLE_CRM                                DEV_TABLE = 101
)

var DEV_TABLE_name = map[int32]string{
	0:   "DATA_ALL",
	1:   "PORT",
	2:   "INTERFACE",
	3:   "LOOPBACK_INTF",
	4:   "VLAN",
	5:   "VLAN_MEMBER",
	6:   "LAG",
	7:   "LAG_MEMBER",
	8:   "SWITCH",
	9:   "VRF",
	10:  "VNET",
	20:  "STATIC_HOST",
	21:  "STATIC_ARP",
	22:  "STATIC_ROUTE",
	23:  "ACL_PROFILE",
	24:  "ACL_RULE",
	25:  "ACL_BINDING",
	30:  "DHCP_SERVER",
	31:  "NTP_SERVER",
	32:  "SYSLOG_SERVER",
	33:  "BGP_NEIGHBOR",
	34:  "DEVICE_NEIGHBOR",
	35:  "DEVICE_NEIGHBOR_METADATA",
	36:  "MIRROR_SESSION",
	50:  "QUEUE",
	51:  "PFC_WD",
	52:  "PFC_PRIORITY_TO_PRIORITY_GROUP_MAP",
	53:  "TC_TO_PRIORITY_GROUP_MAP",
	54:  "MAP_PFC_PRIORITY_TO_QUEUE",
	55:  "TC_TO_QUEUE_MAP",
	56:  "DSCP_TO_TC_MAP",
	57:  "PORT_QOS_MAP",
	58:  "DOT1P_TO_TC_MAP",
	60:  "SCHEDULER",
	61:  "WRED_PROFILE",
	62:  "BUFFER_POOL",
	63:  "BUFFER_PROFILE",
	64:  "BUFFER_QUEUE",
	65:  "BUFFER_PG",
	66:  "BUFFER_PORT_INGRESS_PROFILE_LIST",
	67:  "BUFFER_PORT_EGRESS_PROFILE_LIST",
	68:  "POLICER",
	70:  "VXLAN_TUNNEL",
	71:  "VXLAN_TUNNEL_MAP",
	72:  "NEIGH",
	73:  "VNET_ROUTE",
	74:  "VNET_ROUTE_TUNNEL",
	75:  "PASS_THROUGH_ROUTE_TABLE",
	80:  "FLEX_COUNTER_TABLE",
	81:  "WATERMARK_TABLE",
	100: "WARM_RESTART",
	101: "CRM",
}

var DEV_TABLE_value = map[string]int32{
	"DATA_ALL":                           0,
	"PORT":                               1,
	"INTERFACE":                          2,
	"LOOPBACK_INTF":                      3,
	"VLAN":                               4,
	"VLAN_MEMBER":                        5,
	"LAG":                                6,
	"LAG_MEMBER":                         7,
	"SWITCH":                             8,
	"VRF":                                9,
	"VNET":                               10,
	"STATIC_HOST":                        20,
	"STATIC_ARP":                         21,
	"STATIC_ROUTE":                       22,
	"ACL_PROFILE":                        23,
	"ACL_RULE":                           24,
	"ACL_BINDING":                        25,
	"DHCP_SERVER":                        30,
	"NTP_SERVER":                         31,
	"SYSLOG_SERVER":                      32,
	"BGP_NEIGHBOR":                       33,
	"DEVICE_NEIGHBOR":                    34,
	"DEVICE_NEIGHBOR_METADATA":           35,
	"MIRROR_SESSION":                     36,
	"QUEUE":                              50,
	"PFC_WD":                             51,
	"PFC_PRIORITY_TO_PRIORITY_GROUP_MAP": 52,
	"TC_TO_PRIORITY_GROUP_MAP":           53,
	"MAP_PFC_PRIORITY_TO_QUEUE":          54,
	"TC_TO_QUEUE_MAP":                    55,
	"DSCP_TO_TC_MAP":                     56,
	"PORT_QOS_MAP":                       57,
	"DOT1P_TO_TC_MAP":                    58,
	"SCHEDULER":                          60,
	"WRED_PROFILE":                       61,
	"BUFFER_POOL":                        62,
	"BUFFER_PROFILE":                     63,
	"BUFFER_QUEUE":                       64,
	"BUFFER_PG":                          65,
	"BUFFER_PORT_INGRESS_PROFILE_LIST":   66,
	"BUFFER_PORT_EGRESS_PROFILE_LIST":    67,
	"POLICER":                            68,
	"VXLAN_TUNNEL":                       70,
	"VXLAN_TUNNEL_MAP":                   71,
	"NEIGH":                              72,
	"VNET_ROUTE":                         73,
	"VNET_ROUTE_TUNNEL":                  74,
	"PASS_THROUGH_ROUTE_TABLE":           75,
	"FLEX_COUNTER_TABLE":                 80,
	"WATERMARK_TABLE":                    81,
	"WARM_RESTART":                       100,
	"CRM":                                101,
}

func (x DEV_TABLE) String() string {
	return proto.EnumName(DEV_TABLE_name, int32(x))
}

func (DEV_TABLE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{9}
}

//common type for ARP/host, for a arp/host query request, there should only exist either ip or macaddr
type HostArp struct {
	Vrf                  int32    `protobuf:"varint,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	Vnet                 int32    `protobuf:"varint,2,opt,name=vnet,proto3" json:"vnet,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	MacAddr              uint64   `protobuf:"varint,4,opt,name=macAddr,proto3" json:"macAddr,omitempty"`
	IsLocal              bool     `protobuf:"varint,5,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	TunIp                string   `protobuf:"bytes,6,opt,name=tun_ip,json=tunIp,proto3" json:"tun_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HostArp) Reset()         { *m = HostArp{} }
func (m *HostArp) String() string { return proto.CompactTextString(m) }
func (*HostArp) ProtoMessage()    {}
func (*HostArp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{0}
}

func (m *HostArp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostArp.Unmarshal(m, b)
}
func (m *HostArp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostArp.Marshal(b, m, deterministic)
}
func (m *HostArp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostArp.Merge(m, src)
}
func (m *HostArp) XXX_Size() int {
	return xxx_messageInfo_HostArp.Size(m)
}
func (m *HostArp) XXX_DiscardUnknown() {
	xxx_messageInfo_HostArp.DiscardUnknown(m)
}

var xxx_messageInfo_HostArp proto.InternalMessageInfo

func (m *HostArp) GetVrf() int32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *HostArp) GetVnet() int32 {
	if m != nil {
		return m.Vnet
	}
	return 0
}

func (m *HostArp) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *HostArp) GetMacAddr() uint64 {
	if m != nil {
		return m.MacAddr
	}
	return 0
}

func (m *HostArp) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

func (m *HostArp) GetTunIp() string {
	if m != nil {
		return m.TunIp
	}
	return ""
}

type HostArpList struct {
	Hosts                []*HostArp `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HostArpList) Reset()         { *m = HostArpList{} }
func (m *HostArpList) String() string { return proto.CompactTextString(m) }
func (*HostArpList) ProtoMessage()    {}
func (*HostArpList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{1}
}

func (m *HostArpList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostArpList.Unmarshal(m, b)
}
func (m *HostArpList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostArpList.Marshal(b, m, deterministic)
}
func (m *HostArpList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostArpList.Merge(m, src)
}
func (m *HostArpList) XXX_Size() int {
	return xxx_messageInfo_HostArpList.Size(m)
}
func (m *HostArpList) XXX_DiscardUnknown() {
	xxx_messageInfo_HostArpList.DiscardUnknown(m)
}

var xxx_messageInfo_HostArpList proto.InternalMessageInfo

func (m *HostArpList) GetHosts() []*HostArp {
	if m != nil {
		return m.Hosts
	}
	return nil
}

//Version struct for software
type SoftwareVersion struct {
	Major                int32    `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor                int32    `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Patch                int32    `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SoftwareVersion) Reset()         { *m = SoftwareVersion{} }
func (m *SoftwareVersion) String() string { return proto.CompactTextString(m) }
func (*SoftwareVersion) ProtoMessage()    {}
func (*SoftwareVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{2}
}

func (m *SoftwareVersion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SoftwareVersion.Unmarshal(m, b)
}
func (m *SoftwareVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SoftwareVersion.Marshal(b, m, deterministic)
}
func (m *SoftwareVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SoftwareVersion.Merge(m, src)
}
func (m *SoftwareVersion) XXX_Size() int {
	return xxx_messageInfo_SoftwareVersion.Size(m)
}
func (m *SoftwareVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_SoftwareVersion.DiscardUnknown(m)
}

var xxx_messageInfo_SoftwareVersion proto.InternalMessageInfo

func (m *SoftwareVersion) GetMajor() int32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *SoftwareVersion) GetMinor() int32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *SoftwareVersion) GetPatch() int32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

//Common Request Message for some RPC request without actual input parameters
type CommonReqMsg struct {
	Generation           uint32   `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonReqMsg) Reset()         { *m = CommonReqMsg{} }
func (m *CommonReqMsg) String() string { return proto.CompactTextString(m) }
func (*CommonReqMsg) ProtoMessage()    {}
func (*CommonReqMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{3}
}

func (m *CommonReqMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonReqMsg.Unmarshal(m, b)
}
func (m *CommonReqMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonReqMsg.Marshal(b, m, deterministic)
}
func (m *CommonReqMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonReqMsg.Merge(m, src)
}
func (m *CommonReqMsg) XXX_Size() int {
	return xxx_messageInfo_CommonReqMsg.Size(m)
}
func (m *CommonReqMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonReqMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CommonReqMsg proto.InternalMessageInfo

func (m *CommonReqMsg) GetGeneration() uint32 {
	if m != nil {
		return m.Generation
	}
	return 0
}

//common Message Header for RPC response
type CommonRespHdr struct {
	RetCode              RESULT   `protobuf:"varint,1,opt,name=retCode,proto3,enum=cml.RESULT" json:"retCode,omitempty"`
	Desc                 string   `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	ServerTime           uint64   `protobuf:"varint,3,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonRespHdr) Reset()         { *m = CommonRespHdr{} }
func (m *CommonRespHdr) String() string { return proto.CompactTextString(m) }
func (*CommonRespHdr) ProtoMessage()    {}
func (*CommonRespHdr) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{4}
}

func (m *CommonRespHdr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommonRespHdr.Unmarshal(m, b)
}
func (m *CommonRespHdr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommonRespHdr.Marshal(b, m, deterministic)
}
func (m *CommonRespHdr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRespHdr.Merge(m, src)
}
func (m *CommonRespHdr) XXX_Size() int {
	return xxx_messageInfo_CommonRespHdr.Size(m)
}
func (m *CommonRespHdr) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRespHdr.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRespHdr proto.InternalMessageInfo

func (m *CommonRespHdr) GetRetCode() RESULT {
	if m != nil {
		return m.RetCode
	}
	return RESULT_SUCCESS
}

func (m *CommonRespHdr) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CommonRespHdr) GetServerTime() uint64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

//Single Route Entry for static routes
type RouteEntry struct {
	Vrf                  int32    `protobuf:"varint,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	Subnet               string   `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
	PrefixLen            int32    `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Metric               int32    `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`
	IsLocal              bool     `protobuf:"varint,5,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	Nexthops             []string `protobuf:"bytes,6,rep,name=nexthops,proto3" json:"nexthops,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteEntry) Reset()         { *m = RouteEntry{} }
func (m *RouteEntry) String() string { return proto.CompactTextString(m) }
func (*RouteEntry) ProtoMessage()    {}
func (*RouteEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{5}
}

func (m *RouteEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteEntry.Unmarshal(m, b)
}
func (m *RouteEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteEntry.Marshal(b, m, deterministic)
}
func (m *RouteEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteEntry.Merge(m, src)
}
func (m *RouteEntry) XXX_Size() int {
	return xxx_messageInfo_RouteEntry.Size(m)
}
func (m *RouteEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RouteEntry proto.InternalMessageInfo

func (m *RouteEntry) GetVrf() int32 {
	if m != nil {
		return m.Vrf
	}
	return 0
}

func (m *RouteEntry) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *RouteEntry) GetPrefixLen() int32 {
	if m != nil {
		return m.PrefixLen
	}
	return 0
}

func (m *RouteEntry) GetMetric() int32 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *RouteEntry) GetIsLocal() bool {
	if m != nil {
		return m.IsLocal
	}
	return false
}

func (m *RouteEntry) GetNexthops() []string {
	if m != nil {
		return m.Nexthops
	}
	return nil
}

//路由表详情
type DeviceRouteEntries struct {
	Num                  int32         `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Routes               []*RouteEntry `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DeviceRouteEntries) Reset()         { *m = DeviceRouteEntries{} }
func (m *DeviceRouteEntries) String() string { return proto.CompactTextString(m) }
func (*DeviceRouteEntries) ProtoMessage()    {}
func (*DeviceRouteEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{6}
}

func (m *DeviceRouteEntries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRouteEntries.Unmarshal(m, b)
}
func (m *DeviceRouteEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRouteEntries.Marshal(b, m, deterministic)
}
func (m *DeviceRouteEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRouteEntries.Merge(m, src)
}
func (m *DeviceRouteEntries) XXX_Size() int {
	return xxx_messageInfo_DeviceRouteEntries.Size(m)
}
func (m *DeviceRouteEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRouteEntries.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRouteEntries proto.InternalMessageInfo

func (m *DeviceRouteEntries) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *DeviceRouteEntries) GetRoutes() []*RouteEntry {
	if m != nil {
		return m.Routes
	}
	return nil
}

//device port description
type DevicePort struct {
	PortId               uint32    `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Name                 string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 IF_TYPE   `protobuf:"varint,3,opt,name=type,proto3,enum=cml.IF_TYPE" json:"type,omitempty"`
	NetType              IF_TYPE   `protobuf:"varint,4,opt,name=netType,proto3,enum=cml.IF_TYPE" json:"netType,omitempty"`
	State                RES_STATE `protobuf:"varint,5,opt,name=state,proto3,enum=cml.RES_STATE" json:"state,omitempty"`
	CurSpeed             uint32    `protobuf:"varint,6,opt,name=cur_speed,json=curSpeed,proto3" json:"cur_speed,omitempty"`
	MaxSpeed             uint32    `protobuf:"varint,7,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty"`
	UpdateAt             uint64    `protobuf:"varint,8,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DevicePort) Reset()         { *m = DevicePort{} }
func (m *DevicePort) String() string { return proto.CompactTextString(m) }
func (*DevicePort) ProtoMessage()    {}
func (*DevicePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{7}
}

func (m *DevicePort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicePort.Unmarshal(m, b)
}
func (m *DevicePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicePort.Marshal(b, m, deterministic)
}
func (m *DevicePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePort.Merge(m, src)
}
func (m *DevicePort) XXX_Size() int {
	return xxx_messageInfo_DevicePort.Size(m)
}
func (m *DevicePort) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePort.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePort proto.InternalMessageInfo

func (m *DevicePort) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *DevicePort) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DevicePort) GetType() IF_TYPE {
	if m != nil {
		return m.Type
	}
	return IF_TYPE_IF_UNKNOW
}

func (m *DevicePort) GetNetType() IF_TYPE {
	if m != nil {
		return m.NetType
	}
	return IF_TYPE_IF_UNKNOW
}

func (m *DevicePort) GetState() RES_STATE {
	if m != nil {
		return m.State
	}
	return RES_STATE_UP
}

func (m *DevicePort) GetCurSpeed() uint32 {
	if m != nil {
		return m.CurSpeed
	}
	return 0
}

func (m *DevicePort) GetMaxSpeed() uint32 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *DevicePort) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

//Port description for given device
type PortDescription struct {
	DeviceId             []byte        `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	PortNum              uint32        `protobuf:"varint,2,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty"`
	Ports                []*DevicePort `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PortDescription) Reset()         { *m = PortDescription{} }
func (m *PortDescription) String() string { return proto.CompactTextString(m) }
func (*PortDescription) ProtoMessage()    {}
func (*PortDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{8}
}

func (m *PortDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortDescription.Unmarshal(m, b)
}
func (m *PortDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortDescription.Marshal(b, m, deterministic)
}
func (m *PortDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortDescription.Merge(m, src)
}
func (m *PortDescription) XXX_Size() int {
	return xxx_messageInfo_PortDescription.Size(m)
}
func (m *PortDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_PortDescription.DiscardUnknown(m)
}

var xxx_messageInfo_PortDescription proto.InternalMessageInfo

func (m *PortDescription) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *PortDescription) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *PortDescription) GetPorts() []*DevicePort {
	if m != nil {
		return m.Ports
	}
	return nil
}

//Tunnel的定义，一般用于上报Tunnel信息，配置Tunnel时一般不需要指定源IP
type Tunnel struct {
	DeviceId             []byte      `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	TunSrcIp             string      `protobuf:"bytes,2,opt,name=tun_src_ip,json=tunSrcIp,proto3" json:"tun_src_ip,omitempty"`
	TunDstIp             string      `protobuf:"bytes,3,opt,name=tun_dst_ip,json=tunDstIp,proto3" json:"tun_dst_ip,omitempty"`
	Type                 TUNNEL_TYPE `protobuf:"varint,4,opt,name=type,proto3,enum=cml.TUNNEL_TYPE" json:"type,omitempty"`
	LogicalPortid        uint32      `protobuf:"varint,5,opt,name=logical_portid,json=logicalPortid,proto3" json:"logical_portid,omitempty"`
	BfdEnabled           bool        `protobuf:"varint,7,opt,name=bfd_enabled,json=bfdEnabled,proto3" json:"bfd_enabled,omitempty"`
	DetectDuration       int32       `protobuf:"varint,8,opt,name=detect_duration,json=detectDuration,proto3" json:"detect_duration,omitempty"`
	DeadCount            int32       `protobuf:"varint,9,opt,name=dead_count,json=deadCount,proto3" json:"dead_count,omitempty"`
	UpdateAt             uint64      `protobuf:"varint,10,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Tunnel) Reset()         { *m = Tunnel{} }
func (m *Tunnel) String() string { return proto.CompactTextString(m) }
func (*Tunnel) ProtoMessage()    {}
func (*Tunnel) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{9}
}

func (m *Tunnel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tunnel.Unmarshal(m, b)
}
func (m *Tunnel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tunnel.Marshal(b, m, deterministic)
}
func (m *Tunnel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tunnel.Merge(m, src)
}
func (m *Tunnel) XXX_Size() int {
	return xxx_messageInfo_Tunnel.Size(m)
}
func (m *Tunnel) XXX_DiscardUnknown() {
	xxx_messageInfo_Tunnel.DiscardUnknown(m)
}

var xxx_messageInfo_Tunnel proto.InternalMessageInfo

func (m *Tunnel) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *Tunnel) GetTunSrcIp() string {
	if m != nil {
		return m.TunSrcIp
	}
	return ""
}

func (m *Tunnel) GetTunDstIp() string {
	if m != nil {
		return m.TunDstIp
	}
	return ""
}

func (m *Tunnel) GetType() TUNNEL_TYPE {
	if m != nil {
		return m.Type
	}
	return TUNNEL_TYPE_SSL
}

func (m *Tunnel) GetLogicalPortid() uint32 {
	if m != nil {
		return m.LogicalPortid
	}
	return 0
}

func (m *Tunnel) GetBfdEnabled() bool {
	if m != nil {
		return m.BfdEnabled
	}
	return false
}

func (m *Tunnel) GetDetectDuration() int32 {
	if m != nil {
		return m.DetectDuration
	}
	return 0
}

func (m *Tunnel) GetDeadCount() int32 {
	if m != nil {
		return m.DeadCount
	}
	return 0
}

func (m *Tunnel) GetUpdateAt() uint64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

type TunnelList struct {
	TunList              []*Tunnel `protobuf:"bytes,1,rep,name=tun_list,json=tunList,proto3" json:"tun_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TunnelList) Reset()         { *m = TunnelList{} }
func (m *TunnelList) String() string { return proto.CompactTextString(m) }
func (*TunnelList) ProtoMessage()    {}
func (*TunnelList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{10}
}

func (m *TunnelList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelList.Unmarshal(m, b)
}
func (m *TunnelList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelList.Marshal(b, m, deterministic)
}
func (m *TunnelList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelList.Merge(m, src)
}
func (m *TunnelList) XXX_Size() int {
	return xxx_messageInfo_TunnelList.Size(m)
}
func (m *TunnelList) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelList.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelList proto.InternalMessageInfo

func (m *TunnelList) GetTunList() []*Tunnel {
	if m != nil {
		return m.TunList
	}
	return nil
}

//端口统计，设备上报给控制节点，管理界面可以读取
type PortStats struct {
	PortId               uint32   `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	StatsTime            uint64   `protobuf:"varint,2,opt,name=statsTime,proto3" json:"statsTime,omitempty"`
	RecvPackets          uint64   `protobuf:"varint,3,opt,name=recvPackets,proto3" json:"recvPackets,omitempty"`
	RecvBytes            uint64   `protobuf:"varint,4,opt,name=recvBytes,proto3" json:"recvBytes,omitempty"`
	RecvErrorPackets     uint64   `protobuf:"varint,5,opt,name=recvErrorPackets,proto3" json:"recvErrorPackets,omitempty"`
	SentPackets          uint64   `protobuf:"varint,6,opt,name=SentPackets,proto3" json:"SentPackets,omitempty"`
	SentBytes            uint64   `protobuf:"varint,7,opt,name=sentBytes,proto3" json:"sentBytes,omitempty"`
	SentErrorPackets     uint64   `protobuf:"varint,8,opt,name=sentErrorPackets,proto3" json:"sentErrorPackets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PortStats) Reset()         { *m = PortStats{} }
func (m *PortStats) String() string { return proto.CompactTextString(m) }
func (*PortStats) ProtoMessage()    {}
func (*PortStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{11}
}

func (m *PortStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortStats.Unmarshal(m, b)
}
func (m *PortStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortStats.Marshal(b, m, deterministic)
}
func (m *PortStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortStats.Merge(m, src)
}
func (m *PortStats) XXX_Size() int {
	return xxx_messageInfo_PortStats.Size(m)
}
func (m *PortStats) XXX_DiscardUnknown() {
	xxx_messageInfo_PortStats.DiscardUnknown(m)
}

var xxx_messageInfo_PortStats proto.InternalMessageInfo

func (m *PortStats) GetPortId() uint32 {
	if m != nil {
		return m.PortId
	}
	return 0
}

func (m *PortStats) GetStatsTime() uint64 {
	if m != nil {
		return m.StatsTime
	}
	return 0
}

func (m *PortStats) GetRecvPackets() uint64 {
	if m != nil {
		return m.RecvPackets
	}
	return 0
}

func (m *PortStats) GetRecvBytes() uint64 {
	if m != nil {
		return m.RecvBytes
	}
	return 0
}

func (m *PortStats) GetRecvErrorPackets() uint64 {
	if m != nil {
		return m.RecvErrorPackets
	}
	return 0
}

func (m *PortStats) GetSentPackets() uint64 {
	if m != nil {
		return m.SentPackets
	}
	return 0
}

func (m *PortStats) GetSentBytes() uint64 {
	if m != nil {
		return m.SentBytes
	}
	return 0
}

func (m *PortStats) GetSentErrorPackets() uint64 {
	if m != nil {
		return m.SentErrorPackets
	}
	return 0
}

//上报端口统计的接口
type PortStatsList struct {
	DeviceId             []byte       `protobuf:"bytes,1,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	PortNum              uint32       `protobuf:"varint,2,opt,name=port_num,json=portNum,proto3" json:"port_num,omitempty"`
	Records              []*PortStats `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PortStatsList) Reset()         { *m = PortStatsList{} }
func (m *PortStatsList) String() string { return proto.CompactTextString(m) }
func (*PortStatsList) ProtoMessage()    {}
func (*PortStatsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{12}
}

func (m *PortStatsList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortStatsList.Unmarshal(m, b)
}
func (m *PortStatsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortStatsList.Marshal(b, m, deterministic)
}
func (m *PortStatsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortStatsList.Merge(m, src)
}
func (m *PortStatsList) XXX_Size() int {
	return xxx_messageInfo_PortStatsList.Size(m)
}
func (m *PortStatsList) XXX_DiscardUnknown() {
	xxx_messageInfo_PortStatsList.DiscardUnknown(m)
}

var xxx_messageInfo_PortStatsList proto.InternalMessageInfo

func (m *PortStatsList) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *PortStatsList) GetPortNum() uint32 {
	if m != nil {
		return m.PortNum
	}
	return 0
}

func (m *PortStatsList) GetRecords() []*PortStats {
	if m != nil {
		return m.Records
	}
	return nil
}

//表项的记录数和TimeStamp的校验和，用于设备和控制节点之间的对账使用
type TableStatus struct {
	TableId              DEV_TABLE `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,enum=cml.DEV_TABLE" json:"table_id,omitempty"`
	RecordNum            int32     `protobuf:"varint,2,opt,name=record_num,json=recordNum,proto3" json:"record_num,omitempty"`
	Checksum             uint64    `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TableStatus) Reset()         { *m = TableStatus{} }
func (m *TableStatus) String() string { return proto.CompactTextString(m) }
func (*TableStatus) ProtoMessage()    {}
func (*TableStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{13}
}

func (m *TableStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableStatus.Unmarshal(m, b)
}
func (m *TableStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableStatus.Marshal(b, m, deterministic)
}
func (m *TableStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableStatus.Merge(m, src)
}
func (m *TableStatus) XXX_Size() int {
	return xxx_messageInfo_TableStatus.Size(m)
}
func (m *TableStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TableStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TableStatus proto.InternalMessageInfo

func (m *TableStatus) GetTableId() DEV_TABLE {
	if m != nil {
		return m.TableId
	}
	return DEV_TABLE_DATA_ALL
}

func (m *TableStatus) GetRecordNum() int32 {
	if m != nil {
		return m.RecordNum
	}
	return 0
}

func (m *TableStatus) GetChecksum() uint64 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

//设备性能及状态监控数据
type CPU_Usage struct {
	CpuId                int32    `protobuf:"varint,1,opt,name=cpu_id,json=cpuId,proto3" json:"cpu_id,omitempty"`
	Usage                float32  `protobuf:"fixed32,2,opt,name=usage,proto3" json:"usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPU_Usage) Reset()         { *m = CPU_Usage{} }
func (m *CPU_Usage) String() string { return proto.CompactTextString(m) }
func (*CPU_Usage) ProtoMessage()    {}
func (*CPU_Usage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{14}
}

func (m *CPU_Usage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPU_Usage.Unmarshal(m, b)
}
func (m *CPU_Usage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPU_Usage.Marshal(b, m, deterministic)
}
func (m *CPU_Usage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPU_Usage.Merge(m, src)
}
func (m *CPU_Usage) XXX_Size() int {
	return xxx_messageInfo_CPU_Usage.Size(m)
}
func (m *CPU_Usage) XXX_DiscardUnknown() {
	xxx_messageInfo_CPU_Usage.DiscardUnknown(m)
}

var xxx_messageInfo_CPU_Usage proto.InternalMessageInfo

func (m *CPU_Usage) GetCpuId() int32 {
	if m != nil {
		return m.CpuId
	}
	return 0
}

func (m *CPU_Usage) GetUsage() float32 {
	if m != nil {
		return m.Usage
	}
	return 0
}

type Disk_Usage struct {
	VolumeName           string   `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	Capacity             uint64   `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	Used                 uint64   `protobuf:"varint,3,opt,name=used,proto3" json:"used,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Disk_Usage) Reset()         { *m = Disk_Usage{} }
func (m *Disk_Usage) String() string { return proto.CompactTextString(m) }
func (*Disk_Usage) ProtoMessage()    {}
func (*Disk_Usage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{15}
}

func (m *Disk_Usage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Disk_Usage.Unmarshal(m, b)
}
func (m *Disk_Usage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Disk_Usage.Marshal(b, m, deterministic)
}
func (m *Disk_Usage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disk_Usage.Merge(m, src)
}
func (m *Disk_Usage) XXX_Size() int {
	return xxx_messageInfo_Disk_Usage.Size(m)
}
func (m *Disk_Usage) XXX_DiscardUnknown() {
	xxx_messageInfo_Disk_Usage.DiscardUnknown(m)
}

var xxx_messageInfo_Disk_Usage proto.InternalMessageInfo

func (m *Disk_Usage) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

func (m *Disk_Usage) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Disk_Usage) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

type DevicePerfReport struct {
	DeviceId             []byte        `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Timestamp            uint64        `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	VcpuNum              int32         `protobuf:"varint,3,opt,name=vcpu_num,json=vcpuNum,proto3" json:"vcpu_num,omitempty"`
	TotalMem             uint64        `protobuf:"varint,4,opt,name=total_mem,json=totalMem,proto3" json:"total_mem,omitempty"`
	UsedMem              uint64        `protobuf:"varint,5,opt,name=used_mem,json=usedMem,proto3" json:"used_mem,omitempty"`
	CpuUsages            []*CPU_Usage  `protobuf:"bytes,6,rep,name=cpu_usages,json=cpuUsages,proto3" json:"cpu_usages,omitempty"`
	DiskUsages           []*Disk_Usage `protobuf:"bytes,7,rep,name=disk_usages,json=diskUsages,proto3" json:"disk_usages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DevicePerfReport) Reset()         { *m = DevicePerfReport{} }
func (m *DevicePerfReport) String() string { return proto.CompactTextString(m) }
func (*DevicePerfReport) ProtoMessage()    {}
func (*DevicePerfReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a8e9502eb5ea631, []int{16}
}

func (m *DevicePerfReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DevicePerfReport.Unmarshal(m, b)
}
func (m *DevicePerfReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DevicePerfReport.Marshal(b, m, deterministic)
}
func (m *DevicePerfReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePerfReport.Merge(m, src)
}
func (m *DevicePerfReport) XXX_Size() int {
	return xxx_messageInfo_DevicePerfReport.Size(m)
}
func (m *DevicePerfReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePerfReport.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePerfReport proto.InternalMessageInfo

func (m *DevicePerfReport) GetDeviceId() []byte {
	if m != nil {
		return m.DeviceId
	}
	return nil
}

func (m *DevicePerfReport) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DevicePerfReport) GetVcpuNum() int32 {
	if m != nil {
		return m.VcpuNum
	}
	return 0
}

func (m *DevicePerfReport) GetTotalMem() uint64 {
	if m != nil {
		return m.TotalMem
	}
	return 0
}

func (m *DevicePerfReport) GetUsedMem() uint64 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *DevicePerfReport) GetCpuUsages() []*CPU_Usage {
	if m != nil {
		return m.CpuUsages
	}
	return nil
}

func (m *DevicePerfReport) GetDiskUsages() []*Disk_Usage {
	if m != nil {
		return m.DiskUsages
	}
	return nil
}

func init() {
	proto.RegisterEnum("cml.IP_ADDR_TYPE", IP_ADDR_TYPE_name, IP_ADDR_TYPE_value)
	proto.RegisterEnum("cml.DATAOP", DATAOP_name, DATAOP_value)
	proto.RegisterEnum("cml.IP_PROTO", IP_PROTO_name, IP_PROTO_value)
	proto.RegisterEnum("cml.MGMT_PROTO", MGMT_PROTO_name, MGMT_PROTO_value)
	proto.RegisterEnum("cml.TUNNEL_TYPE", TUNNEL_TYPE_name, TUNNEL_TYPE_value)
	proto.RegisterEnum("cml.NetworkType", NetworkType_name, NetworkType_value)
	proto.RegisterEnum("cml.IF_TYPE", IF_TYPE_name, IF_TYPE_value)
	proto.RegisterEnum("cml.RES_STATE", RES_STATE_name, RES_STATE_value)
	proto.RegisterEnum("cml.DIRECTION", DIRECTION_name, DIRECTION_value)
	proto.RegisterEnum("cml.DEV_TABLE", DEV_TABLE_name, DEV_TABLE_value)
	proto.RegisterType((*HostArp)(nil), "cml.HostArp")
	proto.RegisterType((*HostArpList)(nil), "cml.HostArpList")
	proto.RegisterType((*SoftwareVersion)(nil), "cml.SoftwareVersion")
	proto.RegisterType((*CommonReqMsg)(nil), "cml.CommonReqMsg")
	proto.RegisterType((*CommonRespHdr)(nil), "cml.CommonRespHdr")
	proto.RegisterType((*RouteEntry)(nil), "cml.RouteEntry")
	proto.RegisterType((*DeviceRouteEntries)(nil), "cml.DeviceRouteEntries")
	proto.RegisterType((*DevicePort)(nil), "cml.DevicePort")
	proto.RegisterType((*PortDescription)(nil), "cml.PortDescription")
	proto.RegisterType((*Tunnel)(nil), "cml.Tunnel")
	proto.RegisterType((*TunnelList)(nil), "cml.TunnelList")
	proto.RegisterType((*PortStats)(nil), "cml.PortStats")
	proto.RegisterType((*PortStatsList)(nil), "cml.PortStatsList")
	proto.RegisterType((*TableStatus)(nil), "cml.TableStatus")
	proto.RegisterType((*CPU_Usage)(nil), "cml.CPU_Usage")
	proto.RegisterType((*Disk_Usage)(nil), "cml.Disk_Usage")
	proto.RegisterType((*DevicePerfReport)(nil), "cml.DevicePerfReport")
}

func init() {
	proto.RegisterFile("comm_types.proto", fileDescriptor_5a8e9502eb5ea631)
}

var fileDescriptor_5a8e9502eb5ea631 = []byte{
	// 2136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0x4b, 0x93, 0xdb, 0xc6,
	0xf1, 0x37, 0xdf, 0x64, 0x73, 0x1f, 0xa3, 0xf9, 0xfb, 0x41, 0x3f, 0xb5, 0xa6, 0x65, 0x7b, 0xff,
	0x5b, 0x15, 0xc5, 0x5e, 0x39, 0x8e, 0x93, 0xca, 0x0b, 0x0b, 0x0c, 0x49, 0x44, 0x20, 0x01, 0x0d,
	0x40, 0xae, 0x74, 0x48, 0x4d, 0x51, 0xc0, 0xac, 0xc4, 0x88, 0x04, 0x18, 0x3c, 0xd6, 0x52, 0x4e,
	0x49, 0x55, 0x72, 0xf2, 0x37, 0xc8, 0x39, 0xb7, 0x5c, 0xf3, 0x4d, 0xf2, 0x85, 0x52, 0x3d, 0x03,
	0x70, 0x29, 0x59, 0x4e, 0xaa, 0x72, 0x9b, 0xfe, 0x75, 0x4f, 0x3f, 0x7e, 0xdd, 0xd3, 0xe0, 0x2e,
	0x90, 0x30, 0xd9, 0x6c, 0x44, 0xfe, 0x62, 0x2b, 0xb3, 0xbb, 0xdb, 0x34, 0xc9, 0x13, 0xda, 0x08,
	0x37, 0xeb, 0xf7, 0xfa, 0x61, 0x12, 0x55, 0xc8, 0xf0, 0xbb, 0x1a, 0x74, 0x26, 0x49, 0x96, 0x1b,
	0xe9, 0x96, 0x12, 0x68, 0x5c, 0xa7, 0x57, 0x83, 0xda, 0x49, 0xed, 0xb4, 0xc5, 0xf1, 0x48, 0x29,
	0x34, 0xaf, 0x63, 0x99, 0x0f, 0xea, 0x0a, 0x52, 0x67, 0x7a, 0x04, 0xf5, 0xd5, 0x76, 0xd0, 0x38,
	0xa9, 0x9d, 0xf6, 0x78, 0x7d, 0xb5, 0xa5, 0x03, 0xe8, 0x6c, 0x96, 0xa1, 0x11, 0x45, 0xe9, 0xa0,
	0x79, 0x52, 0x3b, 0x6d, 0xf2, 0x4a, 0xa4, 0xef, 0x42, 0x77, 0x95, 0x89, 0x75, 0x12, 0x2e, 0xd7,
	0x83, 0xd6, 0x49, 0xed, 0xb4, 0xcb, 0x3b, 0xab, 0xcc, 0x41, 0x91, 0xbe, 0x05, 0xed, 0xbc, 0x88,
	0xc5, 0x6a, 0x3b, 0x68, 0x2b, 0x47, 0xad, 0xbc, 0x88, 0xed, 0xed, 0xf0, 0x4b, 0xe8, 0x97, 0xc9,
	0x38, 0xab, 0x2c, 0xa7, 0x43, 0x68, 0x3d, 0x4d, 0xb2, 0x3c, 0x1b, 0xd4, 0x4e, 0x1a, 0xa7, 0xfd,
	0xf3, 0x83, 0xbb, 0xe1, 0x66, 0x7d, 0xb7, 0x34, 0xe0, 0x5a, 0x35, 0xf4, 0xe1, 0xd8, 0x4f, 0xae,
	0xf2, 0x6f, 0x97, 0xa9, 0x5c, 0xc8, 0x34, 0x5b, 0x25, 0x31, 0x7d, 0x13, 0x5a, 0x9b, 0xe5, 0xef,
	0x93, 0xb4, 0xac, 0x44, 0x0b, 0x0a, 0x5d, 0xc5, 0x49, 0x5a, 0x16, 0xa3, 0x05, 0x44, 0xb7, 0xcb,
	0x3c, 0x7c, 0xaa, 0x0a, 0x6a, 0x71, 0x2d, 0x0c, 0xef, 0xc2, 0x81, 0x99, 0x6c, 0x36, 0x49, 0xcc,
	0xe5, 0x1f, 0xa6, 0xd9, 0x13, 0xfa, 0x11, 0xc0, 0x13, 0x19, 0xcb, 0x74, 0x99, 0xaf, 0x92, 0x58,
	0xb9, 0x3d, 0xe4, 0x7b, 0xc8, 0xf0, 0x19, 0x1c, 0x56, 0xf6, 0xd9, 0x76, 0x12, 0xa5, 0xf4, 0x53,
	0xe8, 0xa4, 0x32, 0x37, 0x93, 0x48, 0x2a, 0xeb, 0xa3, 0xf3, 0xbe, 0xca, 0x9d, 0x33, 0x7f, 0xee,
	0x04, 0xbc, 0xd2, 0x21, 0xbf, 0x91, 0xcc, 0x42, 0x95, 0x52, 0x8f, 0xab, 0x33, 0xbd, 0x0d, 0xfd,
	0x4c, 0xa6, 0xd7, 0x32, 0x15, 0xf9, 0x6a, 0x23, 0x55, 0x5e, 0x4d, 0x0e, 0x1a, 0x0a, 0x56, 0x1b,
	0x39, 0xfc, 0x7b, 0x0d, 0x80, 0x27, 0x45, 0x2e, 0x59, 0x9c, 0xa7, 0x2f, 0x5e, 0xd3, 0xb5, 0xb7,
	0xa1, 0x9d, 0x15, 0x8f, 0xab, 0xbe, 0xf5, 0x78, 0x29, 0xd1, 0x0f, 0x01, 0xb6, 0xa9, 0xbc, 0x5a,
	0x3d, 0x17, 0x6b, 0x19, 0x97, 0x05, 0xf7, 0x34, 0xe2, 0xc8, 0x18, 0xaf, 0x6d, 0x64, 0x9e, 0xae,
	0x42, 0xd5, 0xc7, 0x16, 0x2f, 0xa5, 0xff, 0xd4, 0xc6, 0xf7, 0xa0, 0x1b, 0xcb, 0xe7, 0xf9, 0xd3,
	0x64, 0x9b, 0x0d, 0xda, 0x27, 0x8d, 0xd3, 0x1e, 0xdf, 0xc9, 0x43, 0x17, 0xa8, 0x25, 0xaf, 0x57,
	0xa1, 0xdc, 0xe5, 0xba, 0x92, 0x19, 0x66, 0x1b, 0x17, 0x9b, 0x2a, 0xdb, 0xb8, 0xd8, 0xd0, 0xcf,
	0xa1, 0x9d, 0xa2, 0x45, 0x36, 0xa8, 0xab, 0x2e, 0x1f, 0x6b, 0xa6, 0x76, 0x05, 0xf2, 0x52, 0x3d,
	0xfc, 0x53, 0x1d, 0x40, 0x7b, 0xf4, 0x92, 0x34, 0xa7, 0xef, 0x40, 0x67, 0x9b, 0xa4, 0xb9, 0x58,
	0x45, 0x65, 0x43, 0xda, 0x28, 0xda, 0x11, 0x92, 0x1a, 0x2f, 0x37, 0xb2, 0x22, 0x15, 0xcf, 0xf4,
	0x04, 0x9a, 0xf8, 0x0e, 0x54, 0xd1, 0x47, 0xe5, 0x20, 0xd9, 0x23, 0x11, 0x3c, 0xf2, 0x18, 0x57,
	0x1a, 0xfa, 0x19, 0x74, 0x62, 0x99, 0x07, 0x68, 0xd4, 0x7c, 0x8d, 0x51, 0xa5, 0xa4, 0x77, 0xa0,
	0x95, 0xe5, 0xcb, 0x5c, 0x2a, 0x2a, 0x8e, 0xce, 0x8f, 0xaa, 0xbe, 0x0a, 0x3f, 0x30, 0x02, 0xc6,
	0xb5, 0x92, 0xbe, 0x0f, 0xbd, 0xb0, 0x48, 0x45, 0xb6, 0x95, 0x32, 0x52, 0x23, 0x7e, 0xc8, 0xbb,
	0x61, 0x91, 0xfa, 0x28, 0xa3, 0x72, 0xb3, 0x7c, 0x5e, 0x2a, 0x3b, 0x5a, 0xb9, 0x59, 0x3e, 0xdf,
	0x29, 0x8b, 0x6d, 0xb4, 0xcc, 0xa5, 0x58, 0xe6, 0x83, 0xae, 0x6a, 0x7e, 0x57, 0x03, 0x46, 0x3e,
	0x4c, 0xe0, 0x18, 0x6b, 0xb7, 0x64, 0x16, 0xa6, 0xab, 0x2d, 0x8e, 0x1e, 0xb6, 0x20, 0x52, 0xa4,
	0xd8, 0x9a, 0x87, 0x03, 0xbe, 0x93, 0xb1, 0x73, 0x8a, 0x22, 0x64, 0xbc, 0xae, 0xe2, 0x28, 0xca,
	0x66, 0xc5, 0x86, 0x7e, 0x0a, 0x2d, 0x3c, 0x66, 0x83, 0xc6, 0x1e, 0xe9, 0x37, 0xec, 0x72, 0xad,
	0x1d, 0xfe, 0xb3, 0x0e, 0xed, 0xa0, 0x88, 0x63, 0xb9, 0xc6, 0xc4, 0xb4, 0xe3, 0x8a, 0xf1, 0xfd,
	0x48, 0x1f, 0x00, 0xe0, 0x7b, 0xce, 0xd2, 0x10, 0xdf, 0xb4, 0x66, 0xbe, 0x9b, 0x17, 0xb1, 0x9f,
	0x86, 0xf6, 0xb6, 0xd2, 0x46, 0x59, 0x2e, 0x76, 0xab, 0x03, 0xb5, 0x56, 0x96, 0xdb, 0x5b, 0x7a,
	0xa7, 0xec, 0x8d, 0xa6, 0x9d, 0xa8, 0x4c, 0x82, 0xf9, 0x6c, 0xc6, 0x9c, 0xfd, 0xfe, 0x7c, 0x0a,
	0x47, 0xeb, 0xe4, 0xc9, 0x2a, 0x5c, 0xae, 0x05, 0xa6, 0xb6, 0x8a, 0x54, 0x03, 0x0e, 0xf9, 0x61,
	0x89, 0x7a, 0x0a, 0xc4, 0xd7, 0xf3, 0xf8, 0x2a, 0x12, 0x32, 0x5e, 0x3e, 0x5e, 0x97, 0xec, 0x76,
	0x39, 0x3c, 0xbe, 0x8a, 0x98, 0x46, 0xe8, 0xe7, 0x70, 0x1c, 0xc9, 0x5c, 0x86, 0xb9, 0x88, 0x8a,
	0xf2, 0x3d, 0x77, 0xd5, 0x30, 0x1e, 0x69, 0xd8, 0x2a, 0x51, 0x7c, 0x2d, 0x91, 0x5c, 0x46, 0x22,
	0x4c, 0x8a, 0x38, 0x1f, 0xf4, 0xf4, 0x6b, 0x41, 0xc4, 0x44, 0xe0, 0xe5, 0x3e, 0xc1, 0x2b, 0x7d,
	0xfa, 0x0a, 0x40, 0xb3, 0xa6, 0xd6, 0xd8, 0x67, 0x80, 0xc5, 0x8a, 0xf5, 0x2a, 0xcb, 0xcb, 0x4d,
	0xa6, 0xb7, 0x81, 0x36, 0xe1, 0x9d, 0xbc, 0x88, 0xd1, 0x6e, 0xf8, 0xb7, 0x3a, 0xf4, 0xb0, 0x0c,
	0x3f, 0x5f, 0xe6, 0xd9, 0x0f, 0xcf, 0xf7, 0x07, 0xd0, 0xc3, 0x21, 0xcb, 0x70, 0x19, 0x28, 0xaa,
	0x9b, 0xfc, 0x06, 0xa0, 0x27, 0xd0, 0x4f, 0x65, 0x78, 0xed, 0x2d, 0xc3, 0x67, 0x52, 0xb5, 0x17,
	0xf5, 0xfb, 0x10, 0xde, 0x47, 0xf1, 0xe2, 0x05, 0xbe, 0x39, 0xbd, 0xb2, 0x6f, 0x00, 0x7a, 0x06,
	0x04, 0x05, 0x96, 0xa6, 0x49, 0x5a, 0x39, 0x69, 0x29, 0xa3, 0xef, 0xe1, 0x18, 0xcb, 0x97, 0x71,
	0x5e, 0x99, 0xb5, 0x75, 0xac, 0x3d, 0x48, 0xe5, 0x2a, 0xe3, 0x5c, 0xc7, 0xea, 0x94, 0xb9, 0x56,
	0x00, 0xc6, 0x42, 0xe1, 0xa5, 0x58, 0x7a, 0xe4, 0xbf, 0x87, 0x0f, 0xb7, 0x70, 0xb8, 0xe3, 0x46,
	0xb1, 0xfa, 0x3f, 0x0e, 0xfe, 0x29, 0x6e, 0xe6, 0x30, 0x49, 0xa3, 0x6a, 0xf4, 0xf5, 0x0b, 0xde,
	0xf9, 0xe6, 0x95, 0x7a, 0x98, 0x41, 0x3f, 0xc0, 0x99, 0x41, 0xb8, 0xc8, 0xe8, 0xff, 0x43, 0x37,
	0x47, 0xb1, 0x6a, 0x48, 0xf5, 0xf6, 0x2d, 0xb6, 0x10, 0x81, 0x71, 0xe1, 0x30, 0xde, 0x51, 0x7a,
	0x3b, 0xc2, 0xd1, 0xd1, 0x4e, 0x76, 0x09, 0xb4, 0x14, 0xc5, 0x49, 0x1a, 0x61, 0x0a, 0xef, 0x41,
	0x37, 0x7c, 0x2a, 0xc3, 0x67, 0x59, 0xb1, 0x29, 0xfb, 0xb3, 0x93, 0x87, 0xdf, 0x40, 0xcf, 0xf4,
	0xe6, 0x62, 0x9e, 0x2d, 0x9f, 0x48, 0xfc, 0x4a, 0x86, 0xdb, 0xa2, 0x0a, 0xd8, 0xe2, 0xad, 0x70,
	0x5b, 0xd8, 0x11, 0x7e, 0xb3, 0x0a, 0xd4, 0x2b, 0xcf, 0x75, 0xae, 0x85, 0xe1, 0xef, 0x00, 0xac,
	0x55, 0xf6, 0xac, 0xbc, 0x7a, 0x1b, 0xfa, 0xd7, 0xc9, 0xba, 0xd8, 0x48, 0xa1, 0x76, 0x61, 0x4d,
	0xbd, 0x39, 0xd0, 0xd0, 0x0c, 0x37, 0x22, 0x26, 0xb1, 0xdc, 0x2e, 0xc3, 0x55, 0xfe, 0xa2, 0x1c,
	0xa2, 0x9d, 0x8c, 0x1b, 0xb4, 0xc8, 0x64, 0x54, 0x26, 0xa7, 0xce, 0xc3, 0x3f, 0xd7, 0x81, 0x94,
	0xfb, 0x41, 0xa6, 0x57, 0x5c, 0x22, 0x9f, 0xff, 0x6d, 0x27, 0xf4, 0xf0, 0x0b, 0x96, 0xe5, 0xcb,
	0xcd, 0xb6, 0x9a, 0xd3, 0x1d, 0x80, 0x2d, 0xba, 0xc6, 0xe2, 0xe2, 0x92, 0x84, 0x16, 0xef, 0xa0,
	0x8c, 0xfc, 0xbc, 0x0f, 0xbd, 0x3c, 0xc9, 0x97, 0x6b, 0xb1, 0x91, 0x9b, 0x72, 0x40, 0xbb, 0x0a,
	0x98, 0xca, 0x0d, 0xde, 0xc3, 0x7c, 0x94, 0x4e, 0xcf, 0x65, 0x07, 0x65, 0x54, 0xfd, 0x08, 0x00,
	0x3d, 0x2a, 0x3a, 0xf4, 0xf7, 0xa8, 0xea, 0xee, 0x8e, 0x52, 0xde, 0x0b, 0xb7, 0x85, 0x3a, 0x65,
	0xf4, 0x0b, 0xe8, 0x47, 0x48, 0x58, 0x69, 0xdf, 0xd9, 0x5f, 0x84, 0x3b, 0x22, 0x39, 0xa0, 0x8d,
	0xbe, 0x71, 0x36, 0x84, 0x03, 0xdb, 0x13, 0x86, 0x65, 0x71, 0xb5, 0x99, 0x68, 0x17, 0x9a, 0xb6,
	0xb7, 0xf8, 0x8a, 0xbc, 0x51, 0x9e, 0xbe, 0x26, 0xb5, 0xb3, 0x2f, 0xa0, 0x6d, 0x19, 0x81, 0xe1,
	0x7a, 0x88, 0x71, 0x66, 0x58, 0xe4, 0x0d, 0xda, 0x81, 0x86, 0x61, 0x59, 0xa4, 0x46, 0x01, 0xda,
	0x73, 0xcf, 0x32, 0x02, 0x46, 0xea, 0x08, 0x5a, 0xcc, 0x21, 0x8d, 0xb3, 0x7f, 0xd4, 0xa0, 0x6b,
	0x7b, 0xc2, 0xe3, 0x6e, 0xe0, 0xd2, 0x3e, 0x74, 0xe6, 0xb3, 0xfb, 0x33, 0xf7, 0x72, 0x56, 0x7a,
	0x35, 0xa7, 0x1e, 0xa9, 0xa9, 0xd3, 0x78, 0xea, 0xe9, 0x6b, 0x81, 0xe9, 0x91, 0x36, 0x1e, 0xe6,
	0x96, 0x47, 0x6e, 0xa1, 0xce, 0x32, 0x4d, 0x8f, 0x7c, 0xac, 0x22, 0xfa, 0x0b, 0x8f, 0xdc, 0x45,
	0xe5, 0x98, 0x33, 0xf2, 0x63, 0x7a, 0x08, 0x3d, 0xdb, 0xf3, 0x99, 0x29, 0x98, 0xef, 0x91, 0x73,
	0x7a, 0x80, 0xa1, 0x50, 0x34, 0x26, 0xe4, 0x1e, 0xed, 0x41, 0x8b, 0xd9, 0x63, 0xee, 0x91, 0x87,
	0x78, 0xd5, 0xf5, 0xbd, 0x11, 0x79, 0x84, 0x27, 0xe7, 0x3c, 0xf0, 0x48, 0x46, 0x7b, 0xd0, 0xf4,
	0xcd, 0xc0, 0x23, 0x7f, 0xc1, 0xf8, 0x8d, 0x89, 0xed, 0x91, 0xef, 0x6a, 0x67, 0x12, 0x60, 0x3a,
	0x9e, 0x06, 0x65, 0xba, 0x04, 0x0e, 0xd4, 0x41, 0xe8, 0xa4, 0x75, 0xce, 0x4f, 0xb8, 0x67, 0x92,
	0x1a, 0x7a, 0x77, 0x17, 0xbe, 0x75, 0x41, 0xea, 0x58, 0xd5, 0x8c, 0x05, 0x66, 0x12, 0x5f, 0x91,
	0x06, 0x0a, 0x9c, 0xf9, 0xc1, 0x55, 0xb1, 0x26, 0x4d, 0x64, 0xc4, 0x9f, 0x4d, 0xbd, 0xeb, 0x73,
	0xd2, 0xda, 0x9d, 0xef, 0x91, 0xf6, 0xd9, 0x1f, 0xa1, 0xbf, 0xf7, 0x0d, 0xc0, 0x7a, 0x7c, 0xdf,
	0x21, 0x6f, 0xa0, 0xd3, 0xc5, 0x43, 0xc7, 0x98, 0x91, 0x1a, 0x96, 0xa6, 0x8e, 0x62, 0xec, 0x21,
	0x9f, 0x00, 0xed, 0x31, 0x9b, 0xb1, 0x05, 0x23, 0x0d, 0xb4, 0x52, 0x65, 0x92, 0x26, 0x7d, 0x13,
	0x88, 0xb6, 0x72, 0x17, 0x8c, 0x0b, 0x8d, 0xb6, 0x30, 0xcb, 0xa9, 0xe7, 0xf8, 0xa4, 0x4d, 0x6f,
	0xc1, 0xe1, 0x4e, 0x2f, 0x30, 0x46, 0xe7, 0xec, 0xaf, 0x35, 0xe8, 0xcf, 0x64, 0xfe, 0x6d, 0x92,
	0x3e, 0x53, 0x9f, 0x7c, 0x0a, 0x47, 0x33, 0x16, 0x5c, 0xba, 0xfc, 0xfe, 0x4d, 0x99, 0x04, 0x0e,
	0x2a, 0x6c, 0xa1, 0xd3, 0xb9, 0x05, 0x87, 0x3b, 0x44, 0x65, 0x58, 0xa7, 0x6f, 0xc1, 0xad, 0x97,
	0x20, 0x95, 0x69, 0x63, 0xdf, 0x5f, 0x99, 0x71, 0x73, 0x1f, 0xf3, 0xb9, 0xc0, 0xc6, 0xb6, 0xce,
	0x1c, 0xe8, 0x94, 0x3f, 0x3f, 0x54, 0x1b, 0x47, 0x37, 0xd1, 0x01, 0xda, 0xf6, 0x48, 0x78, 0x93,
	0x47, 0xa4, 0x86, 0x74, 0xda, 0x23, 0x9d, 0x44, 0x5d, 0xf5, 0x77, 0x54, 0xc6, 0x6f, 0x94, 0x2a,
	0x55, 0x68, 0xf3, 0xec, 0x43, 0xe8, 0xed, 0x7e, 0xa6, 0xd0, 0x36, 0xd4, 0xe7, 0x9e, 0xee, 0x96,
	0x85, 0xb3, 0x56, 0x3b, 0xbb, 0x03, 0x3d, 0xcb, 0xe6, 0xcc, 0x0c, 0x6c, 0x77, 0xa6, 0x2e, 0xce,
	0xc6, 0x9c, 0xf9, 0xbe, 0x0e, 0xc6, 0xf4, 0xb9, 0x76, 0xf6, 0xaf, 0x0e, 0xf4, 0x76, 0x0b, 0x0f,
	0xa3, 0xe1, 0xac, 0x0b, 0xc3, 0x71, 0xb4, 0x2f, 0xcf, 0xe5, 0x81, 0xee, 0x8c, 0x3d, 0x0b, 0x18,
	0x1f, 0x19, 0x26, 0x76, 0xe6, 0x16, 0x1c, 0x3a, 0xae, 0xeb, 0x5d, 0x18, 0xe6, 0x7d, 0x61, 0xcf,
	0x82, 0x11, 0x69, 0xa0, 0xad, 0xca, 0xb8, 0x49, 0x8f, 0xa1, 0x8f, 0x27, 0x31, 0x65, 0xd3, 0x0b,
	0xc6, 0x49, 0x0b, 0x5b, 0xed, 0x18, 0x63, 0xd2, 0xa6, 0x47, 0x00, 0x8e, 0x31, 0xae, 0x14, 0x1d,
	0x35, 0x1e, 0x97, 0x76, 0x60, 0x4e, 0x48, 0x17, 0x8d, 0x16, 0x7c, 0x44, 0x7a, 0xca, 0xd1, 0x8c,
	0x05, 0x04, 0xd0, 0x11, 0xd6, 0x66, 0x9b, 0x62, 0xe2, 0xfa, 0x01, 0x79, 0x13, 0xef, 0x97, 0x80,
	0xc1, 0x3d, 0xf2, 0x16, 0xb6, 0xac, 0x94, 0xb9, 0x3b, 0x0f, 0x18, 0x79, 0x1b, 0xaf, 0x18, 0xa6,
	0x83, 0xa3, 0x3c, 0xb2, 0x1d, 0x46, 0xde, 0xc1, 0x82, 0x10, 0xe0, 0x73, 0x87, 0x91, 0x41, 0xa5,
	0xbe, 0xb0, 0x67, 0x96, 0x3d, 0x1b, 0x93, 0x77, 0x11, 0xb0, 0x26, 0xa6, 0x27, 0x7c, 0xc6, 0x17,
	0x8c, 0x93, 0x8f, 0x30, 0xc4, 0x2c, 0xd8, 0xc9, 0xb7, 0xb1, 0x52, 0xff, 0x91, 0xef, 0xb8, 0xe3,
	0x0a, 0x3a, 0xc1, 0xa8, 0x17, 0x63, 0x4f, 0xcc, 0x98, 0x3d, 0x9e, 0x5c, 0xb8, 0x9c, 0x7c, 0x4c,
	0xff, 0x0f, 0x8e, 0x2d, 0xb6, 0xb0, 0x4d, 0x76, 0x03, 0x0e, 0xe9, 0x07, 0x30, 0x78, 0x05, 0x14,
	0x53, 0x16, 0x18, 0x48, 0x2f, 0xf9, 0x04, 0xa7, 0x63, 0x6a, 0x73, 0xee, 0x72, 0xe1, 0x33, 0xdf,
	0xb7, 0xdd, 0x19, 0xb9, 0x83, 0x33, 0xfe, 0x60, 0xce, 0xe6, 0x8c, 0x9c, 0x23, 0x33, 0xde, 0xc8,
	0x14, 0x97, 0x16, 0xb9, 0x47, 0x3f, 0x83, 0x21, 0x9e, 0x3d, 0x6e, 0xbb, 0xdc, 0x0e, 0x1e, 0x89,
	0xc0, 0xbd, 0x39, 0x8f, 0xb9, 0x3b, 0xf7, 0xc4, 0xd4, 0xf0, 0xc8, 0x57, 0x18, 0x30, 0x30, 0x7f,
	0x40, 0xfb, 0x13, 0xfa, 0x21, 0xbc, 0x3b, 0x35, 0x3c, 0xf1, 0xaa, 0x27, 0x1d, 0xf0, 0x6b, 0x2c,
	0x41, 0x5f, 0x56, 0x80, 0xba, 0xf3, 0x53, 0x4c, 0xd2, 0xf2, 0x4d, 0x0f, 0xe1, 0xc0, 0x54, 0xd8,
	0x37, 0x6a, 0x3f, 0xb8, 0x3c, 0x10, 0x0f, 0x5c, 0x5f, 0x21, 0x3f, 0x53, 0xd5, 0xbb, 0xc1, 0x97,
	0xfb, 0x66, 0x3f, 0xc7, 0x81, 0xf1, 0xcd, 0x09, 0xb3, 0xe6, 0x0e, 0xe3, 0xe4, 0x17, 0x78, 0xeb,
	0x92, 0x33, 0x6b, 0xd7, 0x98, 0x5f, 0x22, 0xf3, 0x17, 0xf3, 0xd1, 0x88, 0x71, 0xe1, 0xb9, 0xae,
	0x43, 0x7e, 0x85, 0xc1, 0x2a, 0xa0, 0x34, 0xfa, 0xb5, 0xa2, 0x5a, 0x63, 0x3a, 0xcf, 0xdf, 0xa0,
	0xdf, 0xca, 0x6a, 0x4c, 0x0c, 0x7a, 0x07, 0x4e, 0x76, 0x5e, 0x78, 0x20, 0xca, 0x11, 0xaf, 0x3c,
	0x08, 0xc7, 0xf6, 0x03, 0x72, 0x41, 0x3f, 0x81, 0xdb, 0xfb, 0x56, 0xec, 0x35, 0x46, 0x26, 0xbe,
	0x10, 0xcf, 0x75, 0x6c, 0x93, 0x71, 0x62, 0x61, 0x60, 0xfd, 0xbe, 0xf5, 0xca, 0x22, 0xa3, 0x9b,
	0xad, 0x53, 0x2e, 0x31, 0x2c, 0x73, 0x8c, 0x2d, 0x53, 0xdd, 0x25, 0x13, 0x9c, 0x1c, 0x9c, 0xdb,
	0x72, 0x14, 0x6d, 0x5c, 0x15, 0x37, 0x72, 0xe5, 0xe7, 0xb7, 0xd8, 0x25, 0xcf, 0xf0, 0x7d, 0x11,
	0x4c, 0xb8, 0x3b, 0x1f, 0x4f, 0x2a, 0x35, 0xbe, 0x3e, 0x72, 0x9f, 0xbe, 0x0d, 0x74, 0xe4, 0xb0,
	0x87, 0xc2, 0x74, 0xe7, 0xf8, 0xdc, 0x4a, 0xdc, 0x43, 0x8e, 0x2f, 0xf1, 0x8f, 0x91, 0xa9, 0xc1,
	0xef, 0x97, 0xe0, 0x03, 0x45, 0xaa, 0xc1, 0xa7, 0x02, 0x77, 0xaf, 0xc1, 0x03, 0x12, 0xe1, 0x23,
	0x32, 0xf9, 0x94, 0xc8, 0xc7, 0x6d, 0xf5, 0xbf, 0x80, 0x7b, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0xe0, 0x6f, 0x40, 0x56, 0x31, 0x10, 0x00, 0x00,
}
