// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vlan-qinq-config.proto

package cml

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//ip pool配置
type Ippoolcfg struct {
	Startip              string   `protobuf:"bytes,1,opt,name=startip,proto3" json:"startip,omitempty"`
	Endip                string   `protobuf:"bytes,2,opt,name=endip,proto3" json:"endip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ippoolcfg) Reset()         { *m = Ippoolcfg{} }
func (m *Ippoolcfg) String() string { return proto.CompactTextString(m) }
func (*Ippoolcfg) ProtoMessage()    {}
func (*Ippoolcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{0}
}

func (m *Ippoolcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ippoolcfg.Unmarshal(m, b)
}
func (m *Ippoolcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ippoolcfg.Marshal(b, m, deterministic)
}
func (m *Ippoolcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ippoolcfg.Merge(m, src)
}
func (m *Ippoolcfg) XXX_Size() int {
	return xxx_messageInfo_Ippoolcfg.Size(m)
}
func (m *Ippoolcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Ippoolcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Ippoolcfg proto.InternalMessageInfo

func (m *Ippoolcfg) GetStartip() string {
	if m != nil {
		return m.Startip
	}
	return ""
}

func (m *Ippoolcfg) GetEndip() string {
	if m != nil {
		return m.Endip
	}
	return ""
}

//vlan 段
type Vlanrange struct {
	Vidstart             int32    `protobuf:"varint,1,opt,name=vidstart,proto3" json:"vidstart,omitempty"`
	Vidend               int32    `protobuf:"varint,2,opt,name=vidend,proto3" json:"vidend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vlanrange) Reset()         { *m = Vlanrange{} }
func (m *Vlanrange) String() string { return proto.CompactTextString(m) }
func (*Vlanrange) ProtoMessage()    {}
func (*Vlanrange) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{1}
}

func (m *Vlanrange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlanrange.Unmarshal(m, b)
}
func (m *Vlanrange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlanrange.Marshal(b, m, deterministic)
}
func (m *Vlanrange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlanrange.Merge(m, src)
}
func (m *Vlanrange) XXX_Size() int {
	return xxx_messageInfo_Vlanrange.Size(m)
}
func (m *Vlanrange) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlanrange.DiscardUnknown(m)
}

var xxx_messageInfo_Vlanrange proto.InternalMessageInfo

func (m *Vlanrange) GetVidstart() int32 {
	if m != nil {
		return m.Vidstart
	}
	return 0
}

func (m *Vlanrange) GetVidend() int32 {
	if m != nil {
		return m.Vidend
	}
	return 0
}

//vlan stack 配置
type Vlanstack struct {
	Vidstart             int32    `protobuf:"varint,1,opt,name=vidstart,proto3" json:"vidstart,omitempty"`
	Vidend               int32    `protobuf:"varint,2,opt,name=vidend,proto3" json:"vidend,omitempty"`
	Stackvlan            int32    `protobuf:"varint,3,opt,name=stackvlan,proto3" json:"stackvlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vlanstack) Reset()         { *m = Vlanstack{} }
func (m *Vlanstack) String() string { return proto.CompactTextString(m) }
func (*Vlanstack) ProtoMessage()    {}
func (*Vlanstack) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{2}
}

func (m *Vlanstack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlanstack.Unmarshal(m, b)
}
func (m *Vlanstack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlanstack.Marshal(b, m, deterministic)
}
func (m *Vlanstack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlanstack.Merge(m, src)
}
func (m *Vlanstack) XXX_Size() int {
	return xxx_messageInfo_Vlanstack.Size(m)
}
func (m *Vlanstack) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlanstack.DiscardUnknown(m)
}

var xxx_messageInfo_Vlanstack proto.InternalMessageInfo

func (m *Vlanstack) GetVidstart() int32 {
	if m != nil {
		return m.Vidstart
	}
	return 0
}

func (m *Vlanstack) GetVidend() int32 {
	if m != nil {
		return m.Vidend
	}
	return 0
}

func (m *Vlanstack) GetStackvlan() int32 {
	if m != nil {
		return m.Stackvlan
	}
	return 0
}

//vlan mapping信息,可以将一层vlan进行映射,也可以将两层vlan映射为一层vlan(确认芯片是否支持)
type Vlanmapcfg struct {
	Vlanid1              int32    `protobuf:"varint,1,opt,name=vlanid1,proto3" json:"vlanid1,omitempty"`
	Innervlan            int32    `protobuf:"varint,2,opt,name=innervlan,proto3" json:"innervlan,omitempty"`
	Mapvlan              int32    `protobuf:"varint,3,opt,name=mapvlan,proto3" json:"mapvlan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vlanmapcfg) Reset()         { *m = Vlanmapcfg{} }
func (m *Vlanmapcfg) String() string { return proto.CompactTextString(m) }
func (*Vlanmapcfg) ProtoMessage()    {}
func (*Vlanmapcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{3}
}

func (m *Vlanmapcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlanmapcfg.Unmarshal(m, b)
}
func (m *Vlanmapcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlanmapcfg.Marshal(b, m, deterministic)
}
func (m *Vlanmapcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlanmapcfg.Merge(m, src)
}
func (m *Vlanmapcfg) XXX_Size() int {
	return xxx_messageInfo_Vlanmapcfg.Size(m)
}
func (m *Vlanmapcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlanmapcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Vlanmapcfg proto.InternalMessageInfo

func (m *Vlanmapcfg) GetVlanid1() int32 {
	if m != nil {
		return m.Vlanid1
	}
	return 0
}

func (m *Vlanmapcfg) GetInnervlan() int32 {
	if m != nil {
		return m.Innervlan
	}
	return 0
}

func (m *Vlanmapcfg) GetMapvlan() int32 {
	if m != nil {
		return m.Mapvlan
	}
	return 0
}

//vlan下端口成员,可配置一段或指定一个
type Portlistcfg struct {
	Porttype             string   `protobuf:"bytes,1,opt,name=porttype,proto3" json:"porttype,omitempty"`
	Portstart            int32    `protobuf:"varint,2,opt,name=portstart,proto3" json:"portstart,omitempty"`
	Portend              int32    `protobuf:"varint,3,opt,name=portend,proto3" json:"portend,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Portlistcfg) Reset()         { *m = Portlistcfg{} }
func (m *Portlistcfg) String() string { return proto.CompactTextString(m) }
func (*Portlistcfg) ProtoMessage()    {}
func (*Portlistcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{4}
}

func (m *Portlistcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Portlistcfg.Unmarshal(m, b)
}
func (m *Portlistcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Portlistcfg.Marshal(b, m, deterministic)
}
func (m *Portlistcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Portlistcfg.Merge(m, src)
}
func (m *Portlistcfg) XXX_Size() int {
	return xxx_messageInfo_Portlistcfg.Size(m)
}
func (m *Portlistcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Portlistcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Portlistcfg proto.InternalMessageInfo

func (m *Portlistcfg) GetPorttype() string {
	if m != nil {
		return m.Porttype
	}
	return ""
}

func (m *Portlistcfg) GetPortstart() int32 {
	if m != nil {
		return m.Portstart
	}
	return 0
}

func (m *Portlistcfg) GetPortend() int32 {
	if m != nil {
		return m.Portend
	}
	return 0
}

//端口接入类型,对DC交换机用户侧默认为hybrid,上行为trunk;对园区用户侧默认为access,上行为trunk
type Portifcfg struct {
	Porttype             string      `protobuf:"bytes,1,opt,name=porttype,proto3" json:"porttype,omitempty"`
	Portnumber           int32       `protobuf:"varint,2,opt,name=portnumber,proto3" json:"portnumber,omitempty"`
	Accesstype           int32       `protobuf:"varint,3,opt,name=accesstype,proto3" json:"accesstype,omitempty"`
	Pvid                 int32       `protobuf:"varint,4,opt,name=pvid,proto3" json:"pvid,omitempty"`
	Hybridpvid           int32       `protobuf:"varint,5,opt,name=hybridpvid,proto3" json:"hybridpvid,omitempty"`
	Trunkpvid            int32       `protobuf:"varint,6,opt,name=trunkpvid,proto3" json:"trunkpvid,omitempty"`
	Hybridtage           *Vlanrange  `protobuf:"bytes,7,opt,name=hybridtage,proto3" json:"hybridtage,omitempty"`
	Hybriduntage         *Vlanrange  `protobuf:"bytes,8,opt,name=hybriduntage,proto3" json:"hybriduntage,omitempty"`
	Trunkallowvlan       *Vlanrange  `protobuf:"bytes,9,opt,name=trunkallowvlan,proto3" json:"trunkallowvlan,omitempty"`
	Stackinfo            *Vlanstack  `protobuf:"bytes,10,opt,name=stackinfo,proto3" json:"stackinfo,omitempty"`
	Qinqproto            string      `protobuf:"bytes,11,opt,name=qinqproto,proto3" json:"qinqproto,omitempty"`
	Vlanmap              *Vlanmapcfg `protobuf:"bytes,12,opt,name=vlanmap,proto3" json:"vlanmap,omitempty"`
	Updatetime           int64       `protobuf:"varint,13,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Portifcfg) Reset()         { *m = Portifcfg{} }
func (m *Portifcfg) String() string { return proto.CompactTextString(m) }
func (*Portifcfg) ProtoMessage()    {}
func (*Portifcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{5}
}

func (m *Portifcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Portifcfg.Unmarshal(m, b)
}
func (m *Portifcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Portifcfg.Marshal(b, m, deterministic)
}
func (m *Portifcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Portifcfg.Merge(m, src)
}
func (m *Portifcfg) XXX_Size() int {
	return xxx_messageInfo_Portifcfg.Size(m)
}
func (m *Portifcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Portifcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Portifcfg proto.InternalMessageInfo

func (m *Portifcfg) GetPorttype() string {
	if m != nil {
		return m.Porttype
	}
	return ""
}

func (m *Portifcfg) GetPortnumber() int32 {
	if m != nil {
		return m.Portnumber
	}
	return 0
}

func (m *Portifcfg) GetAccesstype() int32 {
	if m != nil {
		return m.Accesstype
	}
	return 0
}

func (m *Portifcfg) GetPvid() int32 {
	if m != nil {
		return m.Pvid
	}
	return 0
}

func (m *Portifcfg) GetHybridpvid() int32 {
	if m != nil {
		return m.Hybridpvid
	}
	return 0
}

func (m *Portifcfg) GetTrunkpvid() int32 {
	if m != nil {
		return m.Trunkpvid
	}
	return 0
}

func (m *Portifcfg) GetHybridtage() *Vlanrange {
	if m != nil {
		return m.Hybridtage
	}
	return nil
}

func (m *Portifcfg) GetHybriduntage() *Vlanrange {
	if m != nil {
		return m.Hybriduntage
	}
	return nil
}

func (m *Portifcfg) GetTrunkallowvlan() *Vlanrange {
	if m != nil {
		return m.Trunkallowvlan
	}
	return nil
}

func (m *Portifcfg) GetStackinfo() *Vlanstack {
	if m != nil {
		return m.Stackinfo
	}
	return nil
}

func (m *Portifcfg) GetQinqproto() string {
	if m != nil {
		return m.Qinqproto
	}
	return ""
}

func (m *Portifcfg) GetVlanmap() *Vlanmapcfg {
	if m != nil {
		return m.Vlanmap
	}
	return nil
}

func (m *Portifcfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//vlan相关信息配置
type Vlaninfocfg struct {
	Vlanlist             string       `protobuf:"bytes,1,opt,name=vlanlist,proto3" json:"vlanlist,omitempty"`
	Aggregate            int32        `protobuf:"varint,2,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Aliasname            string       `protobuf:"bytes,3,opt,name=aliasname,proto3" json:"aliasname,omitempty"`
	Subvlanlist          string       `protobuf:"bytes,4,opt,name=subvlanlist,proto3" json:"subvlanlist,omitempty"`
	Dampingtime          int32        `protobuf:"varint,5,opt,name=dampingtime,proto3" json:"dampingtime,omitempty"`
	Descripstr           string       `protobuf:"bytes,6,opt,name=descripstr,proto3" json:"descripstr,omitempty"`
	Ippool               *Ippoolcfg   `protobuf:"bytes,7,opt,name=ippool,proto3" json:"ippool,omitempty"`
	Muxvlan              int32        `protobuf:"varint,8,opt,name=muxvlan,proto3" json:"muxvlan,omitempty"`
	Portlist             *Portlistcfg `protobuf:"bytes,9,opt,name=portlist,proto3" json:"portlist,omitempty"`
	Prototrans           int32        `protobuf:"varint,10,opt,name=prototrans,proto3" json:"prototrans,omitempty"`
	Rservervlan          int32        `protobuf:"varint,11,opt,name=rservervlan,proto3" json:"rservervlan,omitempty"`
	Updatetime           int64        `protobuf:"varint,12,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Vlaninfocfg) Reset()         { *m = Vlaninfocfg{} }
func (m *Vlaninfocfg) String() string { return proto.CompactTextString(m) }
func (*Vlaninfocfg) ProtoMessage()    {}
func (*Vlaninfocfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{6}
}

func (m *Vlaninfocfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlaninfocfg.Unmarshal(m, b)
}
func (m *Vlaninfocfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlaninfocfg.Marshal(b, m, deterministic)
}
func (m *Vlaninfocfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlaninfocfg.Merge(m, src)
}
func (m *Vlaninfocfg) XXX_Size() int {
	return xxx_messageInfo_Vlaninfocfg.Size(m)
}
func (m *Vlaninfocfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlaninfocfg.DiscardUnknown(m)
}

var xxx_messageInfo_Vlaninfocfg proto.InternalMessageInfo

func (m *Vlaninfocfg) GetVlanlist() string {
	if m != nil {
		return m.Vlanlist
	}
	return ""
}

func (m *Vlaninfocfg) GetAggregate() int32 {
	if m != nil {
		return m.Aggregate
	}
	return 0
}

func (m *Vlaninfocfg) GetAliasname() string {
	if m != nil {
		return m.Aliasname
	}
	return ""
}

func (m *Vlaninfocfg) GetSubvlanlist() string {
	if m != nil {
		return m.Subvlanlist
	}
	return ""
}

func (m *Vlaninfocfg) GetDampingtime() int32 {
	if m != nil {
		return m.Dampingtime
	}
	return 0
}

func (m *Vlaninfocfg) GetDescripstr() string {
	if m != nil {
		return m.Descripstr
	}
	return ""
}

func (m *Vlaninfocfg) GetIppool() *Ippoolcfg {
	if m != nil {
		return m.Ippool
	}
	return nil
}

func (m *Vlaninfocfg) GetMuxvlan() int32 {
	if m != nil {
		return m.Muxvlan
	}
	return 0
}

func (m *Vlaninfocfg) GetPortlist() *Portlistcfg {
	if m != nil {
		return m.Portlist
	}
	return nil
}

func (m *Vlaninfocfg) GetPrototrans() int32 {
	if m != nil {
		return m.Prototrans
	}
	return 0
}

func (m *Vlaninfocfg) GetRservervlan() int32 {
	if m != nil {
		return m.Rservervlan
	}
	return 0
}

func (m *Vlaninfocfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//vlan接口配置vlanif
type Vlanifcfg struct {
	Vlanifname           string   `protobuf:"bytes,1,opt,name=vlanifname,proto3" json:"vlanifname,omitempty"`
	Vlanid               int32    `protobuf:"varint,2,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
	Descripstr           string   `protobuf:"bytes,3,opt,name=descripstr,proto3" json:"descripstr,omitempty"`
	Macaddr              string   `protobuf:"bytes,4,opt,name=macaddr,proto3" json:"macaddr,omitempty"`
	Mtu                  int32    `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Shutdown             int32    `protobuf:"varint,6,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	Staticenable         int32    `protobuf:"varint,7,opt,name=staticenable,proto3" json:"staticenable,omitempty"`
	Updatetime           int64    `protobuf:"varint,8,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vlanifcfg) Reset()         { *m = Vlanifcfg{} }
func (m *Vlanifcfg) String() string { return proto.CompactTextString(m) }
func (*Vlanifcfg) ProtoMessage()    {}
func (*Vlanifcfg) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{7}
}

func (m *Vlanifcfg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlanifcfg.Unmarshal(m, b)
}
func (m *Vlanifcfg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlanifcfg.Marshal(b, m, deterministic)
}
func (m *Vlanifcfg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlanifcfg.Merge(m, src)
}
func (m *Vlanifcfg) XXX_Size() int {
	return xxx_messageInfo_Vlanifcfg.Size(m)
}
func (m *Vlanifcfg) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlanifcfg.DiscardUnknown(m)
}

var xxx_messageInfo_Vlanifcfg proto.InternalMessageInfo

func (m *Vlanifcfg) GetVlanifname() string {
	if m != nil {
		return m.Vlanifname
	}
	return ""
}

func (m *Vlanifcfg) GetVlanid() int32 {
	if m != nil {
		return m.Vlanid
	}
	return 0
}

func (m *Vlanifcfg) GetDescripstr() string {
	if m != nil {
		return m.Descripstr
	}
	return ""
}

func (m *Vlanifcfg) GetMacaddr() string {
	if m != nil {
		return m.Macaddr
	}
	return ""
}

func (m *Vlanifcfg) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Vlanifcfg) GetShutdown() int32 {
	if m != nil {
		return m.Shutdown
	}
	return 0
}

func (m *Vlanifcfg) GetStaticenable() int32 {
	if m != nil {
		return m.Staticenable
	}
	return 0
}

func (m *Vlanifcfg) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//ping mac等vlan相关的动作命令,不存盘;抓换为host主机命令
type Vlanmacping struct {
	Macaddr              string   `protobuf:"bytes,1,opt,name=macaddr,proto3" json:"macaddr,omitempty"`
	Vlanid               int32    `protobuf:"varint,2,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
	Iftype               string   `protobuf:"bytes,3,opt,name=iftype,proto3" json:"iftype,omitempty"`
	Ifnumber             int32    `protobuf:"varint,4,opt,name=ifnumber,proto3" json:"ifnumber,omitempty"`
	Count                int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	Packsize             int32    `protobuf:"varint,6,opt,name=packsize,proto3" json:"packsize,omitempty"`
	Timeout              int32    `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Updatetime           int64    `protobuf:"varint,8,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vlanmacping) Reset()         { *m = Vlanmacping{} }
func (m *Vlanmacping) String() string { return proto.CompactTextString(m) }
func (*Vlanmacping) ProtoMessage()    {}
func (*Vlanmacping) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{8}
}

func (m *Vlanmacping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlanmacping.Unmarshal(m, b)
}
func (m *Vlanmacping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlanmacping.Marshal(b, m, deterministic)
}
func (m *Vlanmacping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlanmacping.Merge(m, src)
}
func (m *Vlanmacping) XXX_Size() int {
	return xxx_messageInfo_Vlanmacping.Size(m)
}
func (m *Vlanmacping) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlanmacping.DiscardUnknown(m)
}

var xxx_messageInfo_Vlanmacping proto.InternalMessageInfo

func (m *Vlanmacping) GetMacaddr() string {
	if m != nil {
		return m.Macaddr
	}
	return ""
}

func (m *Vlanmacping) GetVlanid() int32 {
	if m != nil {
		return m.Vlanid
	}
	return 0
}

func (m *Vlanmacping) GetIftype() string {
	if m != nil {
		return m.Iftype
	}
	return ""
}

func (m *Vlanmacping) GetIfnumber() int32 {
	if m != nil {
		return m.Ifnumber
	}
	return 0
}

func (m *Vlanmacping) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Vlanmacping) GetPacksize() int32 {
	if m != nil {
		return m.Packsize
	}
	return 0
}

func (m *Vlanmacping) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Vlanmacping) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

//vlan trace动作命令
type Vlantrace struct {
	Macaddr              string   `protobuf:"bytes,1,opt,name=macaddr,proto3" json:"macaddr,omitempty"`
	Vlanid               int32    `protobuf:"varint,2,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
	Iftype               string   `protobuf:"bytes,3,opt,name=iftype,proto3" json:"iftype,omitempty"`
	Ifnumber             int32    `protobuf:"varint,4,opt,name=ifnumber,proto3" json:"ifnumber,omitempty"`
	Timeout              int32    `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Updatetime           int64    `protobuf:"varint,6,opt,name=updatetime,proto3" json:"updatetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vlantrace) Reset()         { *m = Vlantrace{} }
func (m *Vlantrace) String() string { return proto.CompactTextString(m) }
func (*Vlantrace) ProtoMessage()    {}
func (*Vlantrace) Descriptor() ([]byte, []int) {
	return fileDescriptor_40a5d0a3ba8aa134, []int{9}
}

func (m *Vlantrace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vlantrace.Unmarshal(m, b)
}
func (m *Vlantrace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vlantrace.Marshal(b, m, deterministic)
}
func (m *Vlantrace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vlantrace.Merge(m, src)
}
func (m *Vlantrace) XXX_Size() int {
	return xxx_messageInfo_Vlantrace.Size(m)
}
func (m *Vlantrace) XXX_DiscardUnknown() {
	xxx_messageInfo_Vlantrace.DiscardUnknown(m)
}

var xxx_messageInfo_Vlantrace proto.InternalMessageInfo

func (m *Vlantrace) GetMacaddr() string {
	if m != nil {
		return m.Macaddr
	}
	return ""
}

func (m *Vlantrace) GetVlanid() int32 {
	if m != nil {
		return m.Vlanid
	}
	return 0
}

func (m *Vlantrace) GetIftype() string {
	if m != nil {
		return m.Iftype
	}
	return ""
}

func (m *Vlantrace) GetIfnumber() int32 {
	if m != nil {
		return m.Ifnumber
	}
	return 0
}

func (m *Vlantrace) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *Vlantrace) GetUpdatetime() int64 {
	if m != nil {
		return m.Updatetime
	}
	return 0
}

func init() {
	proto.RegisterType((*Ippoolcfg)(nil), "cml.ippoolcfg")
	proto.RegisterType((*Vlanrange)(nil), "cml.vlanrange")
	proto.RegisterType((*Vlanstack)(nil), "cml.vlanstack")
	proto.RegisterType((*Vlanmapcfg)(nil), "cml.vlanmapcfg")
	proto.RegisterType((*Portlistcfg)(nil), "cml.portlistcfg")
	proto.RegisterType((*Portifcfg)(nil), "cml.portifcfg")
	proto.RegisterType((*Vlaninfocfg)(nil), "cml.vlaninfocfg")
	proto.RegisterType((*Vlanifcfg)(nil), "cml.vlanifcfg")
	proto.RegisterType((*Vlanmacping)(nil), "cml.vlanmacping")
	proto.RegisterType((*Vlantrace)(nil), "cml.vlantrace")
}

func init() {
	proto.RegisterFile("vlan-qinq-config.proto", fileDescriptor_40a5d0a3ba8aa134)
}

var fileDescriptor_40a5d0a3ba8aa134 = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0x1b, 0x37,
	0x17, 0xfd, 0xf4, 0xc9, 0x52, 0x24, 0x4a, 0x91, 0x0d, 0xa2, 0x30, 0x06, 0x42, 0x11, 0x18, 0xb3,
	0x28, 0x5c, 0x20, 0x31, 0x60, 0x07, 0x4e, 0x17, 0x5d, 0x74, 0x91, 0x6e, 0xb2, 0x28, 0x10, 0x8c,
	0x8b, 0xee, 0x5a, 0x80, 0xe2, 0x70, 0xc6, 0x84, 0x67, 0xc8, 0x09, 0x87, 0x23, 0x35, 0x7d, 0x95,
	0x3e, 0x42, 0x1f, 0xaa, 0xbb, 0xae, 0x0a, 0xf4, 0x15, 0x8a, 0x7b, 0xc9, 0xe1, 0xd0, 0xb2, 0x5a,
	0x27, 0x59, 0x74, 0xa5, 0x39, 0x87, 0x3c, 0xf7, 0x87, 0xf7, 0x47, 0xe4, 0x74, 0x5b, 0x31, 0xf5,
	0xe2, 0x9d, 0x54, 0xef, 0x5e, 0x70, 0xad, 0x0a, 0x59, 0x5e, 0x34, 0x46, 0x5b, 0x4d, 0xc7, 0xbc,
	0xae, 0xd6, 0xc7, 0xbc, 0x28, 0xb9, 0xae, 0x6b, 0xad, 0x1c, 0x9b, 0x7e, 0x4d, 0xe6, 0xb2, 0x69,
	0xb4, 0xae, 0x78, 0x51, 0xd2, 0x84, 0x3c, 0x69, 0x2d, 0x33, 0x56, 0x36, 0xc9, 0xe8, 0x6c, 0x74,
	0x3e, 0xcf, 0x7a, 0x48, 0x3f, 0x23, 0x13, 0xa1, 0x72, 0xd9, 0x24, 0xff, 0x47, 0xde, 0x81, 0xf4,
	0x1b, 0x32, 0x07, 0x67, 0x86, 0xa9, 0x52, 0xd0, 0x35, 0x99, 0x6d, 0x65, 0x8e, 0x02, 0x54, 0x4f,
	0xb2, 0x80, 0xe9, 0x29, 0x99, 0x6e, 0x65, 0x2e, 0x54, 0x8e, 0xfa, 0x49, 0xe6, 0x51, 0xfa, 0xa3,
	0x33, 0xd0, 0x5a, 0xc6, 0xef, 0x3e, 0xc5, 0x00, 0xfd, 0x9c, 0xcc, 0x51, 0x0c, 0x56, 0x92, 0x31,
	0x1e, 0x0d, 0x44, 0xfa, 0x13, 0x21, 0xf0, 0x5b, 0xb3, 0xc6, 0x67, 0x07, 0x48, 0xe6, 0x97, 0xde,
	0x7c, 0x0f, 0xc1, 0x8a, 0x54, 0x4a, 0x18, 0xb4, 0xe2, 0x1c, 0x0c, 0x04, 0xe8, 0x6a, 0xd6, 0x44,
	0x1e, 0x7a, 0x98, 0x32, 0xb2, 0x68, 0xb4, 0xb1, 0x95, 0x6c, 0x2d, 0x38, 0x58, 0x93, 0x19, 0x40,
	0xfb, 0xbe, 0x11, 0xfe, 0xfd, 0x02, 0x06, 0x17, 0xf0, 0xed, 0xb2, 0xf3, 0x2e, 0x02, 0x01, 0x2e,
	0x00, 0x40, 0x7e, 0xde, 0x85, 0x87, 0xe9, 0x9f, 0x63, 0x27, 0x94, 0xc5, 0x63, 0x1e, 0x9e, 0x11,
	0x02, 0xdf, 0xaa, 0xab, 0x37, 0xc2, 0x78, 0x17, 0x11, 0x03, 0xe7, 0x8c, 0x73, 0xd1, 0xb6, 0xa8,
	0x76, 0x6e, 0x22, 0x86, 0x52, 0x72, 0xd4, 0x6c, 0x65, 0x9e, 0x1c, 0xe1, 0x09, 0x7e, 0x83, 0xe6,
	0xf6, 0xfd, 0xc6, 0xc8, 0x1c, 0x4f, 0x26, 0x4e, 0x33, 0x30, 0x90, 0x95, 0x35, 0x9d, 0xba, 0xc3,
	0xe3, 0xa9, 0xcb, 0x2a, 0x10, 0xf4, 0xa2, 0x57, 0x5b, 0x56, 0x8a, 0xe4, 0xc9, 0xd9, 0xe8, 0x7c,
	0x71, 0xb5, 0xba, 0xe0, 0x75, 0x75, 0x11, 0xba, 0x26, 0x8b, 0x6e, 0xd0, 0x2b, 0xb2, 0x74, 0xa8,
	0x53, 0xa8, 0x98, 0x1d, 0x54, 0xdc, 0xbb, 0x43, 0x5f, 0x91, 0x15, 0x3a, 0x64, 0x55, 0xa5, 0x77,
	0x58, 0xa3, 0xf9, 0x41, 0xd5, 0xde, 0x2d, 0xfa, 0xdc, 0x37, 0x8e, 0x54, 0x85, 0x4e, 0xc8, 0x9e,
	0x04, 0x4f, 0xb2, 0xe1, 0x02, 0xe4, 0x09, 0x03, 0x85, 0x23, 0x93, 0x2c, 0xf0, 0xe1, 0x07, 0x82,
	0x7e, 0xe9, 0x1a, 0xab, 0x66, 0x4d, 0xb2, 0x44, 0x4b, 0xc7, 0xc1, 0x92, 0x6b, 0xbd, 0xac, 0x3f,
	0x87, 0x07, 0xed, 0x9a, 0x9c, 0x59, 0x61, 0x65, 0x2d, 0x92, 0xa7, 0x67, 0xa3, 0xf3, 0x71, 0x16,
	0x31, 0xe9, 0xaf, 0x63, 0xb2, 0xc0, 0xae, 0x54, 0x85, 0xf6, 0x05, 0x07, 0x08, 0x1d, 0xd6, 0x17,
	0xbc, 0xc7, 0x10, 0x14, 0x2b, 0x4b, 0x23, 0x4a, 0x66, 0x45, 0xdf, 0x52, 0x81, 0xc0, 0xd3, 0x4a,
	0xb2, 0x56, 0xb1, 0xda, 0x55, 0x7b, 0x9e, 0x0d, 0x04, 0x3d, 0x23, 0x8b, 0xb6, 0xdb, 0x04, 0xd3,
	0x47, 0x78, 0x1e, 0x53, 0x70, 0x23, 0x67, 0x75, 0x23, 0x55, 0x89, 0xa1, 0xba, 0xda, 0xc7, 0x14,
	0xe4, 0x92, 0x8b, 0x96, 0x1b, 0xd9, 0xb4, 0xd6, 0x60, 0xf5, 0xe7, 0x59, 0xc4, 0xd0, 0x2f, 0xc8,
	0xd4, 0xad, 0x96, 0x7b, 0xa5, 0x0f, 0xdb, 0x26, 0xf3, 0xa7, 0x38, 0x5f, 0xdd, 0xcf, 0x58, 0xbb,
	0x99, 0x9f, 0x2f, 0x07, 0xe9, 0x73, 0xd7, 0xee, 0x18, 0xa2, 0x2b, 0xeb, 0x09, 0xda, 0x88, 0x86,
	0x2e, 0x0b, 0x37, 0x70, 0x00, 0xa0, 0x1e, 0xd6, 0x30, 0xd5, 0x62, 0x4d, 0x61, 0x00, 0x02, 0x03,
	0x19, 0x99, 0x56, 0x98, 0xad, 0x9f, 0xf3, 0x85, 0xcb, 0x28, 0xa2, 0xf6, 0xaa, 0xb3, 0x7c, 0x50,
	0x9d, 0xbf, 0x46, 0x6e, 0x5f, 0xb9, 0x61, 0x7c, 0xe6, 0xb6, 0x8b, 0x2c, 0xf0, 0x89, 0x5d, 0x75,
	0x22, 0x06, 0x77, 0x16, 0x2e, 0x98, 0xb0, 0xb3, 0x10, 0xed, 0xbd, 0xdb, 0xf8, 0xc1, 0xbb, 0xe1,
	0xbe, 0xe1, 0x2c, 0xcf, 0x8d, 0xaf, 0x4b, 0x0f, 0xe9, 0x09, 0x19, 0xd7, 0xb6, 0xf3, 0xb5, 0x80,
	0x4f, 0xe8, 0x8f, 0xf6, 0xb6, 0xb3, 0xb9, 0xde, 0x29, 0x3f, 0x7f, 0x01, 0xd3, 0x94, 0x2c, 0x5b,
	0xcb, 0xac, 0xe4, 0x42, 0xb1, 0x4d, 0xe5, 0x06, 0x70, 0x92, 0xdd, 0xe3, 0xf6, 0x32, 0x9e, 0x3d,
	0xc8, 0xf8, 0xf7, 0x91, 0xeb, 0xc7, 0x9a, 0x71, 0xa8, 0x7b, 0x1c, 0xdb, 0xe8, 0x7e, 0x6c, 0xff,
	0x94, 0xed, 0x29, 0x99, 0xca, 0x22, 0xac, 0x9c, 0x79, 0xe6, 0x11, 0x44, 0x2e, 0x0b, 0xbf, 0xac,
	0xdc, 0xca, 0x09, 0x18, 0xfe, 0x6d, 0xb8, 0xee, 0x94, 0xf5, 0x99, 0x3a, 0x80, 0xcb, 0x8f, 0xf1,
	0xbb, 0x56, 0xfe, 0x22, 0xfa, 0x5c, 0x7b, 0x0c, 0x71, 0x41, 0xbc, 0xba, 0xb3, 0x3e, 0xcd, 0x1e,
	0x3e, 0x9a, 0xe1, 0x6f, 0xbe, 0xa6, 0xd6, 0x30, 0x2e, 0xfe, 0xa3, 0xfc, 0xa2, 0x68, 0x27, 0xff,
	0x16, 0xed, 0x74, 0x3f, 0xda, 0xab, 0x3f, 0x8e, 0xc8, 0xea, 0x75, 0x5d, 0xe1, 0x92, 0x12, 0x66,
	0x2b, 0xb9, 0xa0, 0x2f, 0xc9, 0xea, 0x46, 0xd8, 0x9b, 0xdd, 0x5b, 0x6d, 0xec, 0x9b, 0xe2, 0x75,
	0x51, 0xd2, 0x55, 0x18, 0x12, 0x6c, 0xd4, 0xb5, 0x5b, 0x47, 0xbc, 0x28, 0x8d, 0xc5, 0xc5, 0x92,
	0xfe, 0x0f, 0x44, 0xdf, 0x8a, 0xea, 0x23, 0x45, 0x5f, 0x91, 0xe3, 0x9b, 0x5b, 0xbd, 0x8b, 0x55,
	0x6e, 0x1e, 0xdb, 0x5b, 0xbd, 0xe3, 0x45, 0x09, 0xd7, 0xd6, 0x03, 0x33, 0x08, 0xaf, 0x31, 0xc4,
	0x1f, 0x2a, 0xa6, 0xde, 0xa8, 0x42, 0x0f, 0xba, 0x68, 0xd3, 0x1d, 0xf2, 0x77, 0x8d, 0x41, 0x7e,
	0xb4, 0xcc, 0x87, 0xf9, 0x50, 0xf7, 0x58, 0x98, 0x97, 0x64, 0xd9, 0x87, 0x19, 0x3d, 0x49, 0x18,
	0xf8, 0x43, 0xbe, 0x2e, 0xc9, 0xb2, 0x0f, 0xf1, 0x43, 0x25, 0xd7, 0xe4, 0x69, 0x08, 0xef, 0x93,
	0xde, 0xf0, 0x3b, 0xc6, 0xdf, 0xc2, 0x2c, 0x9e, 0x44, 0xff, 0x32, 0x38, 0x9d, 0x87, 0xbc, 0xbd,
	0x22, 0xc7, 0x83, 0xec, 0x7b, 0xec, 0xf1, 0x0f, 0xd1, 0x6d, 0xa6, 0xb8, 0x38, 0x5f, 0xfe, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x47, 0x8a, 0x49, 0x44, 0x4e, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CmlvlanserviceClient is the client API for Cmlvlanservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmlvlanserviceClient interface {
	//交换机属性的端口相关配置
	SetSwPortIfCfg(ctx context.Context, in *Portifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelSwPortIfCfg(ctx context.Context, in *Portifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	ShowSwPortIfCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
	//vlan属性相关配置
	SetVlanInfoCfg(ctx context.Context, in *Vlaninfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelVlanInfoCfg(ctx context.Context, in *Vlaninfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	ShowVlanInfoCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
	//接口下的vlan相关配置
	SetVlanIfCfg(ctx context.Context, in *Vlanifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	DelVlanIfCfg(ctx context.Context, in *Vlanifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	ShowVlanIfCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error)
	//vlan mac ping
	SetVlanMacPing(ctx context.Context, in *Vlanmacping, opts ...grpc.CallOption) (*Cfgrtninfo, error)
	//vlan mac ping
	SetVlanMacTrace(ctx context.Context, in *Vlanmacping, opts ...grpc.CallOption) (*Cfgrtninfo, error)
}

type cmlvlanserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmlvlanserviceClient(cc grpc.ClientConnInterface) CmlvlanserviceClient {
	return &cmlvlanserviceClient{cc}
}

func (c *cmlvlanserviceClient) SetSwPortIfCfg(ctx context.Context, in *Portifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/SetSwPortIfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) DelSwPortIfCfg(ctx context.Context, in *Portifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/DelSwPortIfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) ShowSwPortIfCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/ShowSwPortIfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) SetVlanInfoCfg(ctx context.Context, in *Vlaninfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/SetVlanInfoCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) DelVlanInfoCfg(ctx context.Context, in *Vlaninfocfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/DelVlanInfoCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) ShowVlanInfoCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/ShowVlanInfoCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) SetVlanIfCfg(ctx context.Context, in *Vlanifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/SetVlanIfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) DelVlanIfCfg(ctx context.Context, in *Vlanifcfg, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/DelVlanIfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) ShowVlanIfCfg(ctx context.Context, in *Showcfginfo, opts ...grpc.CallOption) (*Showrtninfo, error) {
	out := new(Showrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/ShowVlanIfCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) SetVlanMacPing(ctx context.Context, in *Vlanmacping, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/SetVlanMacPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmlvlanserviceClient) SetVlanMacTrace(ctx context.Context, in *Vlanmacping, opts ...grpc.CallOption) (*Cfgrtninfo, error) {
	out := new(Cfgrtninfo)
	err := c.cc.Invoke(ctx, "/cml.Cmlvlanservice/SetVlanMacTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmlvlanserviceServer is the server API for Cmlvlanservice service.
type CmlvlanserviceServer interface {
	//交换机属性的端口相关配置
	SetSwPortIfCfg(context.Context, *Portifcfg) (*Cfgrtninfo, error)
	DelSwPortIfCfg(context.Context, *Portifcfg) (*Cfgrtninfo, error)
	ShowSwPortIfCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
	//vlan属性相关配置
	SetVlanInfoCfg(context.Context, *Vlaninfocfg) (*Cfgrtninfo, error)
	DelVlanInfoCfg(context.Context, *Vlaninfocfg) (*Cfgrtninfo, error)
	ShowVlanInfoCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
	//接口下的vlan相关配置
	SetVlanIfCfg(context.Context, *Vlanifcfg) (*Cfgrtninfo, error)
	DelVlanIfCfg(context.Context, *Vlanifcfg) (*Cfgrtninfo, error)
	ShowVlanIfCfg(context.Context, *Showcfginfo) (*Showrtninfo, error)
	//vlan mac ping
	SetVlanMacPing(context.Context, *Vlanmacping) (*Cfgrtninfo, error)
	//vlan mac ping
	SetVlanMacTrace(context.Context, *Vlanmacping) (*Cfgrtninfo, error)
}

// UnimplementedCmlvlanserviceServer can be embedded to have forward compatible implementations.
type UnimplementedCmlvlanserviceServer struct {
}

func (*UnimplementedCmlvlanserviceServer) SetSwPortIfCfg(ctx context.Context, req *Portifcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwPortIfCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) DelSwPortIfCfg(ctx context.Context, req *Portifcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSwPortIfCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) ShowSwPortIfCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowSwPortIfCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) SetVlanInfoCfg(ctx context.Context, req *Vlaninfocfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanInfoCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) DelVlanInfoCfg(ctx context.Context, req *Vlaninfocfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVlanInfoCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) ShowVlanInfoCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVlanInfoCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) SetVlanIfCfg(ctx context.Context, req *Vlanifcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanIfCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) DelVlanIfCfg(ctx context.Context, req *Vlanifcfg) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVlanIfCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) ShowVlanIfCfg(ctx context.Context, req *Showcfginfo) (*Showrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowVlanIfCfg not implemented")
}
func (*UnimplementedCmlvlanserviceServer) SetVlanMacPing(ctx context.Context, req *Vlanmacping) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanMacPing not implemented")
}
func (*UnimplementedCmlvlanserviceServer) SetVlanMacTrace(ctx context.Context, req *Vlanmacping) (*Cfgrtninfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanMacTrace not implemented")
}

func RegisterCmlvlanserviceServer(s *grpc.Server, srv CmlvlanserviceServer) {
	s.RegisterService(&_Cmlvlanservice_serviceDesc, srv)
}

func _Cmlvlanservice_SetSwPortIfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Portifcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).SetSwPortIfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/SetSwPortIfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).SetSwPortIfCfg(ctx, req.(*Portifcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_DelSwPortIfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Portifcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).DelSwPortIfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/DelSwPortIfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).DelSwPortIfCfg(ctx, req.(*Portifcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_ShowSwPortIfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).ShowSwPortIfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/ShowSwPortIfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).ShowSwPortIfCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_SetVlanInfoCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vlaninfocfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).SetVlanInfoCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/SetVlanInfoCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).SetVlanInfoCfg(ctx, req.(*Vlaninfocfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_DelVlanInfoCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vlaninfocfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).DelVlanInfoCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/DelVlanInfoCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).DelVlanInfoCfg(ctx, req.(*Vlaninfocfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_ShowVlanInfoCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).ShowVlanInfoCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/ShowVlanInfoCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).ShowVlanInfoCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_SetVlanIfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vlanifcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).SetVlanIfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/SetVlanIfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).SetVlanIfCfg(ctx, req.(*Vlanifcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_DelVlanIfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vlanifcfg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).DelVlanIfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/DelVlanIfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).DelVlanIfCfg(ctx, req.(*Vlanifcfg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_ShowVlanIfCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Showcfginfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).ShowVlanIfCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/ShowVlanIfCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).ShowVlanIfCfg(ctx, req.(*Showcfginfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_SetVlanMacPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vlanmacping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).SetVlanMacPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/SetVlanMacPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).SetVlanMacPing(ctx, req.(*Vlanmacping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cmlvlanservice_SetVlanMacTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vlanmacping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmlvlanserviceServer).SetVlanMacTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cml.Cmlvlanservice/SetVlanMacTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmlvlanserviceServer).SetVlanMacTrace(ctx, req.(*Vlanmacping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmlvlanservice_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cml.Cmlvlanservice",
	HandlerType: (*CmlvlanserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSwPortIfCfg",
			Handler:    _Cmlvlanservice_SetSwPortIfCfg_Handler,
		},
		{
			MethodName: "DelSwPortIfCfg",
			Handler:    _Cmlvlanservice_DelSwPortIfCfg_Handler,
		},
		{
			MethodName: "ShowSwPortIfCfg",
			Handler:    _Cmlvlanservice_ShowSwPortIfCfg_Handler,
		},
		{
			MethodName: "SetVlanInfoCfg",
			Handler:    _Cmlvlanservice_SetVlanInfoCfg_Handler,
		},
		{
			MethodName: "DelVlanInfoCfg",
			Handler:    _Cmlvlanservice_DelVlanInfoCfg_Handler,
		},
		{
			MethodName: "ShowVlanInfoCfg",
			Handler:    _Cmlvlanservice_ShowVlanInfoCfg_Handler,
		},
		{
			MethodName: "SetVlanIfCfg",
			Handler:    _Cmlvlanservice_SetVlanIfCfg_Handler,
		},
		{
			MethodName: "DelVlanIfCfg",
			Handler:    _Cmlvlanservice_DelVlanIfCfg_Handler,
		},
		{
			MethodName: "ShowVlanIfCfg",
			Handler:    _Cmlvlanservice_ShowVlanIfCfg_Handler,
		},
		{
			MethodName: "SetVlanMacPing",
			Handler:    _Cmlvlanservice_SetVlanMacPing_Handler,
		},
		{
			MethodName: "SetVlanMacTrace",
			Handler:    _Cmlvlanservice_SetVlanMacTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vlan-qinq-config.proto",
}
